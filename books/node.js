exports.data = [
    {
        children:[
            {
                content:'<div class="rno-markdown J-articleContent"><p>记录一些 Node.js 应用中的小知识点，如果你 Google/Baidu “Node.js 如何判断文件是否存在” 发现给出的很多答案还是使用的 fs.exists，这里<strong>不推荐使用 fs.exists 你可以选择 fs.stat 或 fs.access。</strong></p><h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%8E%A8%E8%8D%90-fs.exists" name="%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%8E%A8%E8%8D%90-fs.exists"><strong>为什么不推荐 fs.exists</strong></h2><p>我们在设计一个回调函数时，通常会遵循一个原则 “ <strong>错误优先的回调函数</strong>”，也就是返回值的第一个参数为错误信息，用以验证是否出错，其它的参数则用于返回数据。
                如下所示为 fs.exists 的使用示例，直接返回了一个布尔值，违背了 “错误优先的回调函数” 这一设计原则，这是一方面原因。</p><pre class="prism-token token  language-javascript">fs<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exists <span class="token operator">?</span> <span class="token string">'存在'</span> <span class="token punctuation">:</span> <span class="token string">'不存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre><p>另外一个是 <strong>不推荐在 fs.open()、 fs.readFile() 或 fs.writeFile() 之前使用 fs.exists() 判断文件是否存在</strong>，因为这样会引起 <strong>竞态条件</strong>，如果是在多进程下，程序的执行不完全是线性的，当程序的一个进程在执行 fs.exists 和 fs.writeFile() 时，其它进程是有可能在这之间更改文件的状态，这样就会造成一些非预期的结果。
                <strong>不推荐</strong></p><pre class="prism-token token  language-javascript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                  <span class="token keyword">const</span> exists <span class="token operator">=</span> <span class="token keyword">await</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>exists<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'text.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'text.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>code<span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre><p><strong>推荐</strong></p><pre class="prism-token token  language-javascript"><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                  <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>readFile<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'text.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> encoding<span class="token punctuation">:</span> <span class="token string">'utf-8'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'ENOENT'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'File does not exists'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                      <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                  <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre><p>目前 <strong>fs.exists 已被废弃</strong>，另外需要清楚， <strong>只有在文件不直接使用时才去检查文件是否存在</strong>，下面推荐几个检查文件是否存在的方法。</p><h2 id="%E4%BD%BF%E7%94%A8-fs.stat" name="%E4%BD%BF%E7%94%A8-fs.stat"><strong>使用 fs.stat</strong></h2><p>fs.stat 返回一个 fs.Stats 对象，该对象提供了关于文件的很多信息，例如文件大小、创建时间等。其中有两个方法 stats.isDirectory()、stats.isFile() 用来判断是否是一个目录、是否是一个文件。</p><pre class="prism-token token  language-javascript"><span class="token keyword">const</span> stats <span class="token operator">=</span> <span class="token keyword">await</span> util<span class="token punctuation">.</span><span class="token function">promisify</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span>stat<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'text1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></pre><p><strong>若只是检查文件是否存在，推荐使用下面的 fs.access</strong>。</p><h2 id="%E4%BD%BF%E7%94%A8-fs.access" name="%E4%BD%BF%E7%94%A8-fs.access"><strong>使用 fs.access</strong></h2><p>fs.access 接收一个 mode 参数可以判断一个文件是否存在、是否可读、是否可写，返回值为一个 err 参数。</p><pre class="prism-token token  language-javascript"><span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token string">'text.txt'</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 检查文件是否存在于当前目录中。</span>
                fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> fs<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>F_OK<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err <span class="token operator">?</span> <span class="token string">'不存在'</span> <span class="token punctuation">:</span> <span class="token string">'存在'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 检查文件是否可读。</span>
                fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> fs<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>R_OK<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err <span class="token operator">?</span> <span class="token string">'不可读'</span> <span class="token punctuation">:</span> <span class="token string">'可读'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 检查文件是否可写。</span>
                fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> fs<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>W_OK<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err <span class="token operator">?</span> <span class="token string">'不可写'</span> <span class="token punctuation">:</span> <span class="token string">'可写'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token comment">// 检查文件是否存在于当前目录中、以及是否可写。</span>
                fs<span class="token punctuation">.</span><span class="token function">access</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> fs<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>F_OK <span class="token operator">|</span> fs<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>W_OK<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
                      <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">'ENOENT'</span> <span class="token operator">?</span> <span class="token string">'不存在'</span> <span class="token punctuation">:</span> <span class="token string">'只可读'</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>file<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 存在，且可写`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre><p>同样的也<strong>不推荐在 fs.open()、 fs.readFile() 或 fs.writeFile() 之前使用 fs.exists() 判断文件是否存在，会引起竞态条件。</strong></p></div><div class="col-2-article-source"><p>本文分享自微信公众号 - <!-- -->Nodejs技术栈（NodejsRoadmap）<!-- -->，作者：五月君</p><p>原文出处及转载信息见文内详细说明，如有侵权，请联系 <!-- -->yunjia_community@tencent.com<!-- --> 删除。</p><p>原始发表时间：<!-- -->2020-08-24</p><p>本文参与<a href="/developer/support-plan" class="com-link">腾讯云自媒体分享计划</a>，欢迎正在阅读的你也加入，一起分享。</p></div>'
            }
        ]
    }
]