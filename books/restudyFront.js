exports.category = "frontend";
exports.title = "重学前端";
exports.data = [
  {
    chapterTitle: "开篇词+学习路线+架构图 (3讲)",
    children: [
      {
        title: "开篇词 | 从今天起，重新理解前端",
        herf: "https://time.geekbang.org/column/article/77345",
        id: "77345",
        content:
          "<p>你好，我是winter。接下来的3个月里，我将带你重新认识前端。</p><h2>前端发展史：从青铜到黄金时代</h2><p>我自己是在2006年开始接触前端的。现在回想起来，那会儿前端还处于史前的“青铜时代”，甚至网页的主要交互都还是依靠切换超链接来完成的。</p><h3>1.前端的史前记忆：“青铜时代”</h3><p>那时候，谷歌刚刚基于Ajax发布的Gmail也没多久，虽然这项伟大的技术标志着Web 1.0（静态网页）到Web 2.0（动态网页）的迈进，但在国内依然少有人懂，如果当时谁可以对这项技术侃侃而谈，那简直就是大神的级别了。</p><p>当时我还是个学生，喜欢前端纯粹是兴趣使然。那时我混黑白棋社区，想着给黑白棋界面写插件，但自己又不懂界面相关的知识，于是开始通过各种方式学习前端。</p><p>真想学的时候才发现网络上的前端资料很是稀缺，所以我基本上都是先从图书馆借书，然后再在电脑上跑案例验证这样的方式来学习的，现在想起来，还真是一段艰难的岁月。</p><p>当然，这段经历也为我日后的前端生涯悄悄埋下了一颗种子，我逐渐开始把自己的职业规划路线放在了前端上。</p><p>这在当时是个不可思议的想法，因为那时的前端岗位不论从收入上还是在职责上，都远落后于其他岗位。但是，我基于对技术发展趋势的判断，认为前端在未来会越来越重要。</p><!-- [[[read_end]]] --><h3>2. 进入发展期的前端：“白银时代”</h3><p>2008年，我毕业了，也很幸运地得到了一个既能发挥我的C++长处，又能兼顾前端发展规划的职位：微软北京的软件开发工程师，恰好负责的是Windows CE上的IE浏览器开发，在这里，我接触到了当时最先进的软件工程体系，并且积累了很多UI架构经验。</p><p>两年后，我加入了盛大做电子书，负责电子书的文本排版工作，这个工作是一个既写底层又写JavaScript的岗位，同时排版引擎也是浏览器的重要组成部分，也让我对浏览器的工作原理有了更深入的理解。</p><p>在盛大后期，我加入了WebOS项目，负责前端框架，我开始基于移动的角度思考前端交互和框架，这份工作让我离前端又近了一步。</p><p>但是很遗憾，因为种种原因，我在微软和盛大的几个项目都不算成功，除了电子书实际上市但销量不高，Windows CE 7.0 和盛大的 WebOS 都在公司内部夭折。</p><p>自己亲手构建的产品，却因为非技术原因没有服务到最终用户，对我来说，是件非常遗憾的事情。不过，这段时间，也让我更加确信前端技术的价值。</p><p>回过来看，那几年，前端技术开始了它的大踏步发展，那一段时间，可以说是前端的“白银时代”。最直观的表现之一就是前端逐步从后端分离了出来，它的代码也变得复杂了起来，还需要保存数据、处理数据、生成视图等等。</p><p>悄然之间，我发现前端已经从零散的“工序”逐步发展成为有体系和发展目标的职能，同时，在越来越大的前端团队中，工程化的思想也逐渐萌芽。我深有感触，前端已经不再是别人眼中的“小菜一碟”了。</p><h3>3. 从前端到“全端”：“黄金时代”</h3><p>在这样的行业背景里，从盛大离职后，我加入了阿里巴巴做手机淘宝开发，这也是我首次从事真正的前端工作。</p><p>在手机淘宝，前端团队的各种基础设施也逐渐建立了起来，从最开始的多屏适配方案、基础库、工具链到页面搭建平台和性能体系，最后到客户端融合方案Weex，我随着团队一起经历了业务发展、团队自身成长和行业变革。</p><p>与此同时，在我加入阿里巴巴后的这段时间里，随着移动时代的到来，前端也开启了自己的“黄金时代”，它的职责变得更加重要，有了独立的发布权限，技术也变得更加复杂。</p><p>一些传统软件开发和互联网服务端的方法论逐步移植到前端开发中，并形成了前端自己的工程体系，诸如持续集成、前后端分离、线上监控……</p><p>架构方面，前端架构的任务也从简单的解决兼容和风格问题，逐步过渡到提倡组件化和UI架构模式，最后形成了新一代的前端框架React、Vue和Angular，他们也在竞争和互相学习中成长。</p><h2>前端开发之痛：散点自学+基础不牢</h2><p>正当处于“黄金时代”的前端技术在全力以赴极速前行之时，我却发现，前端开发者们的步伐似乎渐渐有些跟不上了。</p><p>因为在我职业发展的后半段，面试和培养前端工程师已经成为我的长期工作职责。在这期间，我意识到，目前的前端教育几乎是完全缺失的。</p><p>在面试应届生过程中，我会习惯性地问表现比较好的同学“你是如何学习前端的”，而我得到的答案多是“自学”“在社团学习”，却从未听到过“在学校学习过”这样的答案。</p><p>而对于工作之后的前端开发者来说，没有系统学习的问题仍然存在，常常有一些具有多年从业经验的工程师，仍然会在看到一些用法时惊呼：“还可以这样！”</p><p>在我看来，这些用法都是一些基础的不能再基础的知识点，但是他们却浑然不知。</p><p><strong>如果深入进去了解，你会发现，表面上看他们可能是一时忘记了，或者之前没注意，但实际上是他们对于前端的知识体系和底层原理没有真正系统地理解。</strong></p><p>在阿里工作的时候，我戏称很多同学学前端的方式是“土法学前端”，他们对于知识的理解基本都停留在点上，从来没有大范围把这些点串成线，形成自己的知识体系，因此才会出现上面说的遗漏和盲点。</p><p>这个问题在一些一直在小公司工作的前端工程师身上非常突出。</p><p>经常能看到一些案例，一些有技术追求、有热情的工程师，因为技术敏感度和主观能动性都不错，所以工作了五六年之后，逐步开始在自己的公司做一些技术管理相关的事情了。</p><p>但是，由于他们所在公司的业务并不复杂，也没有技术积累，所以他们自身的技术水平其实并不高，可以说还处于非常初级的阶段（可能面试连阿里P6都过不了）。</p><p><strong>做了管理，技术没跟上，并且还错过了最佳的学习时间，这个境遇可想而知，他们在工作中大概率只能是被动地接受需求解决问题，然后也同时焦虑着自己的未来，焦虑着自己的竞争力。</strong></p><p>关于前端工程师成长，我认为需要两个视角。一是立足标准，系统性总结和整理前端知识，建立自己的认知和方法论；二是放眼团队，从业务和工程角度思考前端团队的价值和发展需要。只有这样做，才能够持续发展，在高速发展的技术和工程浪潮中稳稳立足。</p><p>这也正是“重学前端”这个专栏的初衷，我希望提供一些视角，带你以完备、体系化的方式理解和思考前端的基础知识和工程实践。</p><p>除此之外，前端工程师也是开发工程师的一员，除了前端自身的领域知识和工程特点外，你还需要了解程序员通用的编程能力和架构能力。</p><p>所以，想要成为优秀的前端工程师，我觉得你需要通过系统地学习和总结获取知识，通过练习获取编程能力，通过工作经验来获取架构和工程能力。</p><p>当然，一个为期3个月的专栏无法穷尽前端庞杂的知识，讲知识点也不是我们的目标。知识点讲的再好再全，也不一定能记得住。</p><p>我们专栏的目标是帮助你建立自己的知识体系，根据你自己的理解把前端的领域知识链接起来，形成结构，这样做，不但能帮助你记忆知识，还能在其中发现自己知识的缺失，甚至可以凭借知识体系来判断知识的重要性，来决定是否要深入学习。</p><p>在这个专栏里，我将知识分成了四个模块来讲解：</p><ul>\n<li>JavaScript；</li>\n<li>CSS和HTML；</li>\n<li>浏览器实践；</li>\n<li>前端综合应用。</li>\n</ul><p>前三个模块是前端的基础知识，是个人的前端能力提升，而模块四则是前端团队发展相关的内容，有助于你和团队的整体提高。</p><p>在<strong>JavaScript部分</strong>中，我主要会从文法和运行时的角度去讨论JavaScript语言。它们是互相关联的，而语义就是文法到运行时之间的桥梁；它们分别又是完备的，任何语言特性都离不开两者，所以从语法和运行时的角度，我们都可以了解完整的JavaScript。</p><p><strong>CSS和HTML部分</strong>，会侧重从语言和设计思想的角度来讲解，我们同样可以对两者的全貌建立一些认知。</p><p><strong>浏览器部分</strong>，包含了浏览器工作的原理和一些重要的API，包括BOM、DOM、CSSOM和其他一些内容。了解了这些知识，你才能把JavaScript和HTML、CSS连接起来，用JavaScript来实现功能。</p><p><strong>前端综合应用部分</strong>，主要是我的一些工作经验，我会选择我在手淘和淘宝工作中的一些案例来辅助讲解。</p><p>前面，我说到前端是一个非常年轻的职业，但我仍然认为前端具有很多空间和机会，一些基础设施仍然简陋，前端的能力可以带来更多的业务场景，这些有待于我们去发掘。</p><p>前端社区非常活跃，新技术也在不断出现。在这样的环境下，机会和竞争并存，学习也犹如逆水行舟，不进则退，建立自己的知识体系和方法论，你才能够保持领先优势。</p><p>我希望从我的经验出发，给你一些启发和帮助，并借由这个专栏帮你建立自己的前端知识体系。同时，我也相信，在你们中间一定会产生更多能够带领前端领域取得突破的、优秀的前端工程师。</p><p>最后，也希望你能和我分享你的前端故事和经历，你是怎么走上前端道路的？你希望将来成为怎样的前端工程师？欢迎在留言区与我分享。</p><p></p>",
        article_title: "开篇词 | 从今天起，重新理解前端",
      },
      {
        title: "明确你的前端学习路线与方法",
        herf: "https://time.geekbang.org/column/article/77749",
        id: "77749",
        content:
          '<p>你好，我是winter。今天我们一起来聊聊前端的学习路线与方法。</p><p>在“开篇词”中，我和你简单回顾了前端行业的发展，到现在为止，前端工程师已经成为研发体系中的重要岗位之一。可是，与此相对的是，我发现极少或者几乎没有大学的计算机专业愿意开设前端课程，更没有系统性的教学方案出现。大部分前端工程师的知识，其实都是来自于实践和工作中零散的学习。</p><p>这样的现状就引发了一系列的问题。</p><p><strong>首先是前端的基础知识</strong>，常常有一些工作多年的工程师，在看到一些我认为很基础的JavaScript语法的时候，还会惊呼“居然可以这样”。是的，基础知识的欠缺会让你束手束脚，更限制你解决问题的思路。</p><p><strong>其次，技术上存在短板，就会导致前端开发者的上升通道不甚顺畅。</strong>特别是一些小公司的程序员，只能靠自己摸索，这样就很容易陷入重复性劳动的陷阱，最终耽误自己的职业发展。</p><p><strong>除此之外，前端工程师也会面临技术发展问题带来的挑战。</strong>前端社区高度活跃，前端标准也在快速更新，这样蓬勃发展对技术来说无疑是好事，但是副作用也显而易见，它使得前端工程师的学习压力变得很大。</p><p>我们就拿JavaScript标准来说，ES6中引入的新特性超过了过去十年的总和，新特性带来的实践就更多了，仅仅是一个Proxy特性的引入，就支持了VueJS从2.0到3.0的内核原理完全升级。</p><!-- [[[read_end]]] --><p>缺少系统教育+技术快速革新，在这样的大环境下，前端工程师保持自学能力就显得尤其重要了。</p><p>那么，前端究竟应该怎么学呢？我想，我可以简单分享一下自己的经验。</p><h2>学习路径与学习方法</h2><p>首先是<strong>0基础入门</strong>的同学，你可以读几本经典的前端教材，比如《JavaScript高级程序设计》《精通CSS》等书籍，去阅读一些参考性质的网站也是不错的选项，比如<a href="https://developer.mozilla.org">MDN</a>。</p><p>如果你至少已经<strong>有了1年以上的工作经验</strong>，希望在技术上有一定突破，那么，这个专栏就可以是你技术进阶的一个选项了。</p><p>在这个专栏中，我希望传达的不仅仅是具体的知识点，还有体系架构和学习方法。我希望达到三个目标：</p><ul>\n<li>带你摸索出适合自己的前端学习方法；</li>\n<li>帮助你建立起前端技术的知识架构；</li>\n<li>让你理解前端技术背后的核心思想。</li>\n</ul><p>在开始具体的知识讲解之前，这篇文章中，我想先来谈两个前端学习方法。</p><h2>第一个方法：建立知识架构</h2><p>第一个方法是建立自己的知识架构，并且在这个架构上，不断地进行优化。</p><p>我们先来讲讲什么叫做知识架构？我们可以把它理解为知识的“目录”或者索引，<strong>它能够帮助我们把零散的知识组织起来，也能够帮助我们发现一些知识上的盲区。</strong></p><p>当然，知识的架构是有优劣之分的，最重要的就是逻辑性和完备性。</p><p>我们来思考一个问题，如果我们要给JavaScript知识做一个顶层目录，该怎么做呢？</p><p>如果我们把一些特别流行的术语和问题，拼凑起来，可能会变成这样：</p><ul>\n<li>类型转换；</li>\n<li>this指针；</li>\n<li>闭包；</li>\n<li>作用域链；</li>\n<li>原型链；</li>\n<li>……</li>\n</ul><p>这其实不是我们想要的结果，因为这些知识点之间，没有任何逻辑关系。它们既不是并列关系，又不是递进关系，合在一起，也就没有任何意义。这样的知识架构，无法帮助我们去发现问题和理解问题。</p><p>如果让我来做，我会这样划分：</p><ul>\n<li>文法</li>\n<li>语义</li>\n<li>运行时</li>\n</ul><p>为什么这样分呢，因为对于任何计算机语言来说，必定是“用规定的文法，去表达特定语义，最终操作运行时的”一个过程。</p><p>这样，JavaScript的任何知识都不会出现在这个范围之外，这是知识架构的完备性。我们再往下细分一个层级，就变成了这个样子：</p><ul>\n<li>文法\n<ul>\n<li>词法</li>\n<li>语法</li>\n</ul>\n</li>\n<li>语义</li>\n<li>运行时\n<ul>\n<li>类型</li>\n<li>执行过程</li>\n</ul>\n</li>\n</ul><p>我来解释一下这个划分。</p><p>文法可以分成词法和语法，这来自编译原理的划分，同样是完备的。语义则跟语法具有一一对应关系，这里暂时不区分。</p><p>对于运行时部分，这个划分保持了完备性，<strong>我们都知道：程序 = 算法 + 数据结构，那么，对运行时来说，类型就是数据结构，执行过程就是算法。</strong></p><p>当我们再往下细分的时候，就会看到熟悉的概念了，词法中有各种直接量、关键字、运算符，语法和语义则是表达式、语句、函数、对象、模块，类型则包含了对象、数字、字符串等……</p><p>这样逐层向下细分，知识框架就初见端倪了。在顶层和大结构上，我们通过逻辑来保持完备性。如果继续往下，就需要一些技巧了，我们可以寻找一些线索。</p><p>比如在JavaScript标准中，有完整的文法定义，它是具有完备性的，所以我们可以根据它来完成，我们还可以根据语法去建立语义的知识架构。实际上，因为JavaScript有一份统一的标准，所以相对来说不太困难。</p><p>如果是浏览器中的API，那就困难了，它们分布在w3c的各种标准当中，非常难找。但是我们要想找到一些具有完备性的线索，也不是没有办法。我喜欢的一个办法，就是用实际的代码去找：for in 遍历window的属性，再去找它的内容。</p><p>我想，学习的过程，实际上就是知识架构不断进化的过程，通过知识架构的自然延伸，我们可以更轻松地记忆一些原本难以记住的点，还可以发现被忽视的知识盲点。</p><p>建立知识架构，同样有利于面试，没人能够记住所有的知识，当不可避免地谈到一个记不住的知识，如果你能快速定位到它在知识架构中的位置，把一些相关的点讲出来，我想，这也能捞回不少分。（关于前端具体的知识架构，我会在02篇文章中详细讲解。）</p><h2>第二个方法：追本溯源</h2><p>第二个方法，我把它称作追本溯源。</p><p>有一些知识，背后有一个很大的体系，例如，我们对比一下CSS里面的两个属性：</p><ul>\n<li>opacity；</li>\n<li>display。</li>\n</ul><p>虽然都是“属性”，但是它们背后的知识量完全不同，opacity是个非常单纯的数值，表达的意思也很清楚，而display的每一个取值背后都是一个不同的布局体系。我们要讲清楚display，就必须关注正常流（Normal Flow）、关注弹性布局系统以及grid这些内容。</p><p>还有一些知识，涉及的概念本身经历了各种变迁，变得非常复杂和有争议性，比如MVC，从1979年至今，概念变化非常大，MVC的定义几乎已经成了一段公案，我曾经截取了MVC原始论文、MVP原始论文、微软MSDN、Apple开发者文档，这些内容里面，MVC画的图、箭头和解释都完全不同。</p><p>这种时候，就是我们做一些考古工作的时候了。追本溯源，其实就是关注技术提出的背景，关注原始的论文或者文章，关注作者说的话。</p><p>操作起来也非常简单：翻翻资料（一般wiki上就有）找找历史上的文章和人物，再顺藤摸瓜翻出来历史资料就可以了，如果翻出来的是历史人物（幸亏互联网的历史不算悠久），你也可以试着发封邮件问问。</p><p>这个过程，可以帮助我们理解一些看上去不合理的东西，有时候还可以收获一些趣闻，比如JavaScript之父 Brendan Eich 曾经在Wikipedia的讨论页上解释JavaScript最初想设计一个带有prototype的scheme，结果受到管理层命令把它弄成像Java的样子（如果你再挖的深一点，甚至能找到他对某位“尖头老板”的吐槽）。</p><p>根据这么一句话，我们再去看看scheme，看看Java，再看看一些别的基于原型的语言，我们就可以理解为什么JavaScript是现在这个样子了：函数是一等公民，却提供了new this instanceof等特性，甚至抄来了Java的getYear这样的Bug。</p><h2>结语</h2><p>今天我带你探索了前端的学习路径，并提出了两个学习方法：你要试着建立自己的知识架构，除此之外，还要学会追本溯源，找到知识的源头。</p><p>这个专栏中，我并不奢望通过短短的40篇专栏，事无巨细地把前端的所有知识都罗列清楚，这本身是MDN这样的参考手册的工作。但是，我希望通过这个专栏，把前端技术背后的设计原理和知识体系讲清楚，让你能对前端技术产生整体认知，这样才能够在未来汹涌而来的新技术中保持领先的状态。</p><p>在你的认识中，前端知识的结构是怎样的？欢迎留言告诉我，我们一起讨论。</p><p></p>',
        article_title: "明确你的前端学习路线与方法",
      },
      {
        title: "列一份前端知识架构图",
        herf: "https://time.geekbang.org/column/article/77804",
        id: "77804",
        content:
          '<p>你好，我是winter。</p><p>在上一篇文章中，我们简要地总结了前端的学习路径与方法，我们提到的第一个学习方法就是：建立知识框架。那么，今天我们就一起来列一份前端的知识框架图。</p><p>在开始列框架之前，我想先来谈谈我们的目标。实际上，我们在网上可以找到很多参考资料，比如MDN这样的参考手册，又比如一份语言标准，但是我们的课程既不是一本参考手册，也不是一份语言标准。参考手册希望做到便于查阅、便于理解和全面，语言标准的目标是严谨、无遗漏、无歧义。</p><p>而我们的课程有什么不同呢？我认为，作为一个课程，有两个目标：一个是把无法通过查阅解决的原理和背景讲清楚，另一个是把不方便查阅和记忆的内容整理好。</p><p>我会尽量避免像前面提到的两种文档一样逐条目罗列知识点和细节，当然，这不是在说两种文档没有价值，而是我们各有分工，参考手册和语言标准做的事情，我们没必要重复去做，即使做了也不一定能做得更好。</p><p><strong>在这个课程里，我希望能和你一起打造一个前端知识的框架，再把知识点做个遍历，这其中，有原理和背景的部分，我去讲解知识的原理和背景。如果没有的话，我们就去讲整理和记忆这部分知识的方法，这样，即使你遇见无法一下子记住的知识，也可以很容易地查阅参考手册和标准来解决。</strong></p><!-- [[[read_end]]] --><p>如果让我做一个划分，前端的知识在总体上分成基础部分和实践部分，基础部分包含了JavaScript语言（模块一）、CSS和HTML（模块二）以及浏览器的实现原理和API（模块三），这三个模块涵盖了一个前端工程师所需要掌握的全部知识。</p><p>学完这三个部分，你再结合基本的编程能力，就可以应对基本的前端开发工作了。实践部分（模块四）重点会介绍我在工作过程中遇到的问题和解决方案，希望这块内容能够帮助你和你的前端团队找到可能的发展方向和着力点。</p><h2>JavaScript</h2><p><img src="https://static001.geekbang.org/resource/image/6a/9b/6aec0a09381a2f74014ec604ef99c19b.png" alt=""></p><p>上面是我整理的JavaScript知识架构图，下面我们来具体解释一下。</p><p>在JavaScript的模块中，首先我们可以把语言按照文法、语义和运行时来拆分，这符合编程语言的一般规律：<strong>用一定的词法和语法，表达一定语义，从而操作运行时。</strong></p><p>接下来，我们又按照程序的一般规律，把运行时分为数据结构和算法部分：数据结构包含类型和实例（JavaScript的类型系统就是它的7种基本类型和7种语言类型，实例就是它的内置对象部分）。所谓的算法，就是JavaScript的执行过程。</p><p>类型部分中，对象比其它所有类型加起来都要更为复杂，所以我们会用较长的篇幅来讲解对象，包括它的一些历史和设计思路。</p><p>执行过程我们则需要按照从大结构到小结构的角度讲解，从最顶层的程序与模块、事件循环和微任务，到函数、再到语句级的执行。我们从粗到细地了解执行过程。</p><p>实例部分，对JavaScript来说类似基础库，JavaScipt的内置对象多达150以上，考虑到我们即使逐次讲解也必定不如MDN更加细致全面，所以我们会从应用和机制的角度，挑选其中几个体系来讲解。</p><p>文法中的语法和语义基本是一一对应关系，在JavaScript标准中有一份语法定义表，它同样不适合一一讲解，我们会从JavaScript语法中特别的地方，以及与日常开发比较相关的地方来重点讲解，剩下的内容和词法部分，我们会带领大家做一些数据挖掘工作，从这份表格中找到一些和我们日常开发息息相关的内容。</p><p>语义的大部分内容我们会在运行时的讲解中透出，同时它又跟语法有对应的关系，所以我们不再单独拿出来讲解。</p><h2>HTML 和 CSS</h2><p><img src="https://static001.geekbang.org/resource/image/41/62/4153891927afac7f4c21ccf6a141f062.png" alt=""></p><p>上面是我整理的HTML和CSS的知识架构图，我们来具体解释一下。</p><p><strong>在HTML的部分</strong>，我们会按照功能和语言来划分它的知识，HTML的功能主要由标签来承担，所以我们首先会把标签做一些分类，并对它们分别进行讲解。</p><p>我们都知道HTML的标签可以分为很多种，head里面的我们称为元信息类标签，诸如title、meta、style、link、base这些，它们用来描述文档的一些基本信息。还有一类是一些诸如section、nav的标签，它们在视觉表现上跟div并没有区别，但是各有各的适用场景，我们把它们称作语义类标签。另外一类是img、video、audio之类的替换型媒体类标签，用来引入外部内容，平常开发中你也会经常用到。再有就是表单类的，比如input、button。</p><p>所以，基于这样的分类，我把标签分成下面几种。</p><ol>\n<li>文档元信息：通常是出现在head标签中的元素，包含了描述文档自身的一些信息；</li>\n<li>语义相关：扩展了纯文本，表达文章结构、不同语言要素的标签；</li>\n<li>链接：提供到文档内和文档外的链接；</li>\n<li>替换型标签：引入声音、图片、视频等外部元素替换自身的一类标签；</li>\n<li>表单：用于填写和提交信息的一类标签；</li>\n<li>表格：表头、表尾、单元格等表格的结构。</li>\n</ol><p>我们的重点会放在前四种标签上，表单和表格较少用到，而且基本以查阅型知识为主，这里就不拿出来讲解了。</p><p>除了标签之外，我们还应该把HTML当作一门语言来了解下，当然，标记语言跟编程语言不太一样，没有编程语言那么严谨，所以，我们会简要介绍HTML的语法和几个重要的语言机制：实体、命名空间。</p><p>最后我们会介绍下HTML的补充标准：ARIA，它是HTML的扩展，在可访问性领域，它有至关重要的作用。</p><p><strong>CSS部分</strong>，按照惯例，我们也会从语言和功能两个角度去介绍。在语言部分，我们会从大到小介绍CSS的各种语法结构，比如@rule、选择器、单位等等。功能部分，我们大致可以分为布局、绘制和交互类。</p><p>在布局类我们介绍两个最常用的布局：正常流和弹性布局。绘制类我们则会分成图形相关的和文字相关的绘制。最后我们会介绍动画和其它交互。</p><h2>浏览器的实现原理和API</h2><p><img src="https://static001.geekbang.org/resource/image/cb/cb/cbb6d198ccfb95af4906eeb0581333cb.png" alt=""></p><p>上面是我整理的浏览器知识架构图，我们来具体看一下。</p><p>浏览器部分我们会先介绍下浏览器的实现原理，这是我们深入理解API的基础。</p><p>我们会从一般的浏览器设计出发，按照解析、构建DOM树、计算CSS、渲染、合成和绘制的流程来讲解浏览器的工作原理。</p><p>在API部分，我们会从W3C零散的标准中挑选几个大块的API来详细讲解，主要有：事件、DOM、CSSOM几个部分，它们分别覆盖了交互、语义和可见效果，这是我们工作中用到的主要内容。</p><p>其他的API怎么办呢，别着急，在最后，我会给出一份Chrome已经实现的API跟W3C标准的对应关系和它的生成过程，来覆盖其它部分。</p><h2>前端工程实践</h2><p><img src="https://static001.geekbang.org/resource/image/45/ce/4568011037a5591402c4ba1547ba0dce.jpg" alt=""></p><p>最后一个模块是前端工程实践。我们在掌握了前面的基础知识之后，也就基本掌握了做一个前端工程师的底层能力。在这个模块中，我选择了性能、工具链、持续集成、搭建系统、架构与基础库这几个方向的前端工程实践案例，来与你一起分享我的经验。</p><h3>性能</h3><p>首先我们会谈谈性能。对任何一个前端团队而言，性能是它价值的核心指标，从早年“重构”的实践开始，前端有通过性能证明自己价值的传统。</p><p>但是性能并非细节的堆砌，也不是默默做优化，所以，我会从团队的角度来跟你一起探讨性能的方法论和技术体系。</p><h3>工具链</h3><p>下一个案例是工具链。这一部分，我将会探讨企业中工具链的建设思路。对一个高效又合作良好的前端团队来说，一致性的工具链是不可或缺的保障，作为开发阶段的入口，工具链又可以和性能、发布、持续集成等系统链接到一起，成为团队技术管理的基础。</p><h3>持续集成</h3><p>接下来还会给大家介绍前端的持续集成，持续集成并非一个新概念，但是过去持续集成概念和理论都主要针对软件开发，而对前端来说，持续集成是一个新的课题（当然对持续集成来说，前端也是一个新课题），比如daily build就完全不适用前端，前端代码必须是线上实时可用的。这一部分内容将会针对前端的持续集成提出一些建设的思路。</p><h3>搭建系统</h3><p>接下来的案例是搭建系统，前端工作往往多而繁杂，针对高重复性、可模块化的业务需求，传统的人工开发不再适用，搭建系统是大部分大型前端团队的选择。这一部分内容我将会介绍什么是搭建系统，以及一些常见的搭建系统类型。</p><h3>架构与基础库</h3><p>最后一个部分，会给大家介绍前端架构和基础库的知识。软件架构师主要解决功能复杂性的问题，服务端架构师主要解决高流量问题，而前端是页面间天然解耦，分散在用户端运行的系统，但是前端架构也有自己要解决的问题。</p><p>前端需求量大、专业人才稀缺，更因为前端本身运行在浏览器中，有大量兼容工作要做。所以前端架构的主要职责是兼容性、复用和能力扩展。这一部分文章我将会介绍前端架构工作的一些思路和切入点。</p><p>上面的这些案例来自我在领导手淘前端团队时的经验，和我在阿里巴巴工作参与晋升面试时听到的案例，这些内容几乎是每一个年轻的前端团队成长过程中都会需要的基础设施。</p><p>好了，前端的知识体系我们大致列出来了。你可能发现了，知识体系图中的每一个知识点，专栏里都有与之对应的文章，这也是我的初衷：希望借由讲解这40余个知识点，帮你建立起前端的知识框架。</p><p><img src="https://static001.geekbang.org/resource/image/d1/a8/d1cb4040d91207075e0591abffe1b9a8.jpg" alt=""><br>\n（长按保存高清大图）</p><h2>讲述形式</h2><p>基于这份知识框架图，我们的课程主要采用两种讲述形式：一种是重点讲解的课程，一种是知识图谱型的课程。</p><p>重点讲解的课程我们会从技术的背景、原理和设计出发，把知识的内容呈现出来。这种形式适用于有体系和源流的知识，比较适合系统学习和理解，比如JavaScript中的对象、CSS的排版。</p><p>知识图谱型的课程则提供一些方法，用表格或者脑图的形式来整理知识的结构。这种形式适用于零散的知识，比较适合记住大概，用到时去查阅，比如JavaScript的词法、HTML中的所有标签、以及浏览器中的API就十分适合这样的讲解方式。</p><h2>结语</h2><p>今天我带你一起划分了前端的知识内容，前端的基础知识分成JavaScript、HTML、CSS以及浏览器四大重点模块，每个模块也分别有自己的技术重点。你可以在框架中，挑选你最需要的前端知识，按需学习。</p><p>当然，这篇文章最重要的是，我希望能帮你建立一个理解前端的全景图。这样，任何时候，你都能够体系地思考问题，分析问题。</p><p>你觉得你的划分跟我一样吗，你还有其他的想法，你觉得是否有想了解的知识不在其中，欢迎给我留言。</p><p></p>',
        article_title: "列一份前端知识架构图",
      },
    ],
  },
  {
    chapterTitle: "模块一：JavaScript (15讲)",
    children: [
      {
        title: "JavaScript类型：关于类型，有哪些你不知道的细节？",
        herf: "https://time.geekbang.org/column/article/78884",
        id: "78884",
        content:
          '<p>你好，我是winter。今天我们来讲讲JavaScript的内容，在这个部分，我首先想跟你聊一聊类型。</p><p>JavaScript类型对每个前端程序员来说，几乎都是最为熟悉的概念了。但是你真的很了解它们吗？我们不妨来看看下面的几个问题。</p><ul>\n<li>为什么有的编程规范要求用void 0代替undefined？</li>\n<li>字符串有最大长度吗？</li>\n<li>0.1 + 0.2不是等于0.3么？为什么JavaScript里不是这样的？</li>\n<li>ES6新加入的Symbol是个什么东西？</li>\n<li>为什么给对象添加的方法能用在基本类型上？</li>\n</ul><p>如果你答起来还有些犹豫的地方，这就说明你对这部分知识点，还是有些遗漏之处的。没关系，今天我来帮你一一补上。</p><p>我在前面提到过，我们的JavaScript模块会从运行时、文法和执行过程三个角度去剖析JS的知识体系，本篇我们就从运行时的角度去看JavaScript的类型系统。</p><blockquote>\n<p><span class="reference">运行时类型是代码实际执行过程中我们用到的类型。所有的类型数据都会属于7个类型之一。从变量、参数、返回值到表达式中间结果，任何JavaScript代码运行过程中产生的数据，都具有运行时类型</span>。</p>\n</blockquote><h2>类型</h2><p>JavaScript语言的每一个值都属于某一种数据类型。JavaScript语言规定了7种语言类型。语言类型广泛用于变量、函数参数、表达式、函数返回值等场合。根据最新的语言标准，这7种语言类型是：</p><!-- [[[read_end]]] --><ol>\n<li>Undefined；</li>\n<li>Null；</li>\n<li>Boolean；</li>\n<li>String；</li>\n<li>Number；</li>\n<li>Symbol；</li>\n<li>Object。</li>\n</ol><p>除了ES6中新加入的Symbol类型，剩下6种类型都是我们日常开发中的老朋友了，但是，要想回答文章一开始的问题，我们需要重新认识一下这些老朋友，下面我们就来从简单到复杂，重新学习一下这些类型。</p><h2>Undefined、Null</h2><p>我们的第一个问题，为什么有的编程规范要求用void 0代替undefined？现在我们就分别来看一下。</p><p>Undefined 类型表示未定义，它的类型只有一个值，就是 undefined。任何变量在赋值前是 Undefined 类型、值为 undefined，一般我们可以用全局变量undefined（就是名为undefined的这个变量）来表达这个值，或者 void 运算来把任意一个表达式变成 undefined 值。</p><p>但是呢，因为JavaScript的代码undefined是一个变量，而并非是一个关键字，这是JavaScript语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取undefined值。</p><p>Undefined跟 Null 有一定的表意差别，Null表示的是：“定义了但是为空”。所以，在实际编程时，我们一般不会把变量赋值为 undefined，这样可以保证所有值为 undefined 的变量，都是从未赋值的自然状态。</p><p>Null 类型也只有一个值，就是 null，它的语义表示空值，与 undefined 不同，null 是 JavaScript 关键字，所以在任何代码中，你都可以放心用 null 关键字来获取 null 值。</p><h2>Boolean</h2><p>Boolean 类型有两个值， true 和 false，它用于表示逻辑意义上的真和假，同样有关键字 true 和 false 来表示两个值。这个类型很简单，我就不做过多介绍了。</p><h2>String</h2><p>我们来看看字符串是否有最大长度。</p><p>String 用于表示文本数据。String 有最大长度是 2^53 - 1，这在一般开发中都是够用的，但是有趣的是，这个所谓最大长度，并不完全是你理解中的字符数。</p><p>因为String 的意义并非“字符串”，而是字符串的 UTF16 编码，我们字符串的操作 charAt、charCodeAt、length 等方法针对的都是 UTF16 编码。所以，字符串的最大长度，实际上是受字符串的编码长度影响的。</p><blockquote>\n<p><span class="reference">Note：现行的字符集国际标准，字符是以 Unicode 的方式表示的，每一个 Unicode 的码点表示一个字符，理论上，Unicode 的范围是无限的。UTF是Unicode的编码方式，规定了码点在计算机中的表示方法，常见的有 UTF16 和 UTF8。 Unicode 的码点通常用 U+??? 来表示，其中 ??? 是十六进制的码点值。 0-65536（U+0000 - U+FFFF）的码点被称为基本字符区域（BMP）。</span></p>\n</blockquote><p>JavaScript 中的字符串是永远无法变更的，一旦字符串构造出来，无法用任何方式改变字符串的内容，所以字符串具有值类型的特征。</p><p>JavaScript 字符串把每个 UTF16 单元当作一个字符来处理，所以处理非BMP（超出 U+0000 - U+FFFF 范围）的字符时，你应该格外小心。</p><p>JavaScript 这个设计继承自 Java，最新标准中是这样解释的，这样设计是为了“性能和尽可能实现起来简单”。因为现实中很少用到 BMP 之外的字符。</p><h2>Number</h2><p>下面，我们来说说Number类型。Number类型表示我们通常意义上的“数字”。这个数字大致对应数学中的有理数，当然，在计算机中，我们有一定的精度限制。</p><p>JavaScript中的Number类型有 18437736874454810627(即2^64-2^53+3) 个值。</p><p>JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是JavaScript为了表达几个额外的语言场景（比如不让除以0出错，而引入了无穷大的概念），规定了几个例外情况：</p><ul>\n<li>NaN，占用了 9007199254740990，这原本是符合IEEE规则的数字；</li>\n<li>Infinity，无穷大；</li>\n<li>-Infinity，负无穷大。</li>\n</ul><p>另外，值得注意的是，JavaScript中有 +0 和 -0，在加法类运算中它们没有区别，但是除法的场合则需要特别留意区分，“忘记检测除以-0，而得到负无穷大”的情况经常会导致错误，而区分 +0 和 -0 的方式，正是检测 1/x 是 Infinity 还是 -Infinity。</p><p>根据双精度浮点数的定义，Number类型中有效的整数范围是-0x1fffffffffffff至0x1fffffffffffff，所以Number无法精确表示此范围外的整数。</p><p>同样根据浮点数的定义，非整数的Number类型无法用 ==（===也不行） 来比较，一段著名的代码，这也正是我们第三题的问题，为什么在JavaScript中，0.1+0.2不能=0.3：</p><pre><code>  console.log( 0.1 + 0.2 == 0.3);\n</code></pre><p>这里输出的结果是false，说明两边不相等的，这是浮点运算的特点，也是很多同学疑惑的来源，浮点数运算的精度问题导致等式左右的结果并不是严格相等，而是相差了个微小的值。</p><p>所以实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用JavaScript提供的最小精度值：</p><pre><code>  console.log( Math.abs(0.1 + 0.2 - 0.3) &lt;= Number.EPSILON);\n</code></pre><p>检查等式左右两边差的绝对值是否小于最小精度，才是正确的比较浮点数的方法。这段代码结果就是 true 了。</p><h2>Symbol</h2><p>Symbol 是 ES6 中引入的新类型，它是一切非字符串的对象key的集合，在ES6规范中，整个对象系统被用Symbol 重塑。</p><p>在后面的文章中，我会详细叙述 Symbol 跟对象系统。这里我们只介绍Symbol类型本身：它有哪些部分，它表示什么意思，以及如何创建Symbol类型。</p><p>Symbol 可以具有字符串类型的描述，但是即使描述相同，Symbol也不相等。</p><p>我们创建 Symbol 的方式是使用全局的 Symbol 函数。例如：</p><pre><code>    var mySymbol = Symbol(&quot;my symbol&quot;);\n</code></pre><p>一些标准中提到的 Symbol，可以在全局的 Symbol 函数的属性中找到。例如，我们可以使用 Symbol.iterator 来自定义 for…of 在对象上的行为：</p><pre><code>    var o = new Object\n\n    o[Symbol.iterator] = function() {\n        var v = 0\n        return {\n            next: function() {\n                return { value: v++, done: v &gt; 10 }\n            }\n        }        \n    };\n\n    for(var v of o) \n        console.log(v); // 0 1 2 3 ... 9\n</code></pre><p>代码中我们定义了iterator之后，用for(var v of o)就可以调用这个函数，然后我们可以根据函数的行为，产生一个for…of的行为。</p><p>这里我们给对象o添加了 Symbol.iterator 属性，并且按照迭代器的要求定义了一个0到10的迭代器，之后我们就可以在for of中愉快地使用这个o对象啦。</p><p>这些标准中被称为“众所周知”的 Symbol，也构成了语言的一类接口形式。它们允许编写与语言结合更紧密的 API。</p><h2>Object</h2><p>Object 是 JavaScript 中最复杂的类型，也是 JavaScript 的核心机制之一。Object表示对象的意思，它是一切有形和无形物体的总称。</p><p>下面我们来看一看，为什么给对象添加的方法能用在基本类型上？</p><p>在 JavaScript 中，对象的定义是“属性的集合”。属性分为数据属性和访问器属性，二者都是key-value结构，key可以是字符串或者 Symbol类型。</p><p>关于对象的机制，后面会有单独的一篇来讲述，这里我重点从类型的角度来介绍对象类型。</p><p>提到对象，我们必须要提到一个概念：类。</p><p>因为 C++ 和 Java 的成功，在这两门语言中，每个类都是一个类型，二者几乎等同，以至于很多人常常会把JavaScript的“类”与类型混淆。</p><p>事实上，JavaScript 中的“类”仅仅是运行时对象的一个私有属性，而JavaScript中是无法自定义类型的。</p><p>JavaScript中的几个基本类型，都在对象类型中有一个“亲戚”。它们是：</p><ul>\n<li>Number；</li>\n<li>String；</li>\n<li>Boolean；</li>\n<li>Symbol。</li>\n</ul><p>所以，我们必须认识到 3 与 new Number(3) 是完全不同的值，它们一个是 Number 类型， 一个是对象类型。</p><p>Number、String和Boolean，三个构造器是两用的，当跟 new 搭配时，它们产生对象，当直接调用时，它们表示强制类型转换。</p><p>Symbol 函数比较特殊，直接用 new 调用它会抛出错误，但它仍然是 Symbol 对象的构造器。</p><p>JavaScript 语言设计上试图模糊对象和基本类型之间的关系，我们日常代码可以把对象的方法在基本类型上使用，比如：</p><pre><code>    console.log(&quot;abc&quot;.charAt(0)); //a\n</code></pre><p>甚至我们在原型上添加方法，都可以应用于基本类型，比如以下代码，在 Symbol 原型上添加了hello方法，在任何 Symbol 类型变量都可以调用。</p><pre><code>    Symbol.prototype.hello = () =&gt; console.log(&quot;hello&quot;);\n\n    var a = Symbol(&quot;a&quot;);\n    console.log(typeof a); //symbol，a并非对象\n    a.hello(); //hello，有效\n</code></pre><p>所以我们文章开头的问题，答案就是<code>.</code> 运算符提供了装箱操作，它会根据基础类型构造一个临时对象，使得我们能在基础类型上调用对应对象的方法。</p><h2>类型转换</h2><p>讲完了基本类型，我们来介绍一个现象：类型转换。</p><p>因为JS是弱类型语言，所以类型转换发生非常频繁，大部分我们熟悉的运算都会先进行类型转换。大部分类型转换符合人类的直觉，但是如果我们不去理解类型转换的严格定义，很容易造成一些代码中的判断失误。</p><p>其中最为臭名昭著的是JavaScript中的“ == ”运算，因为试图实现跨类型的比较，它的规则复杂到几乎没人可以记住。</p><p>这里我们当然也不打算讲解==的规则，它属于设计失误，并非语言中有价值的部分，很多实践中推荐禁止使用“ ==”，而要求程序员进行显式地类型转换后，用 === 比较。</p><p>其它运算，如加减乘除大于小于，也都会涉及类型转换。幸好的是，实际上大部分类型转换规则是非常简单的，如下表所示：</p><p><img src="https://static001.geekbang.org/resource/image/71/20/71bafbd2404dc3ffa5ccf5d0ba077720.jpg" alt=""></p><p>在这个里面，较为复杂的部分是Number和String之间的转换，以及对象跟基本类型之间的转换。我们分别来看一看这几种转换的规则。</p><h3>StringToNumber</h3><p>字符串到数字的类型转换，存在一个语法结构，类型转换支持十进制、二进制、八进制和十六进制，比如：</p><ul>\n<li>30；</li>\n<li>0b111；</li>\n<li>0o13；</li>\n<li>0xFF。</li>\n</ul><p>此外，JavaScript支持的字符串语法还包括正负号科学计数法，可以使用大写或者小写的e来表示：</p><ul>\n<li>1e3；</li>\n<li>-1e-2。</li>\n</ul><p>需要注意的是，parseInt 和 parseFloat 并不使用这个转换，所以支持的语法跟这里不尽相同。</p><p>在不传入第二个参数的情况下，parseInt只支持16进制前缀“0x”，而且会忽略非数字字符，也不支持科学计数法。</p><p>在一些古老的浏览器环境中，parseInt还支持0开头的数字作为8进制前缀，这是很多错误的来源。所以在任何环境下，都建议传入parseInt的第二个参数，而parseFloat则直接把原字符串作为十进制来解析，它不会引入任何的其他进制。</p><p>多数情况下，Number 是比 parseInt 和 parseFloat 更好的选择。</p><h3>NumberToString</h3><p>在较小的范围内，数字到字符串的转换是完全符合你直觉的十进制表示。当Number绝对值较大或者较小时，字符串表示则是使用科学计数法表示的。这个算法细节繁多，我们从感性的角度认识，它其实就是保证了产生的字符串不会过长。</p><p>具体的算法，你可以去参考JavaScript的语言标准。由于这个部分内容，我觉得在日常开发中很少用到，所以这里我就不去详细地讲解了。</p><h3>装箱转换</h3><p>每一种基本类型Number、String、Boolean、Symbol在对象中都有对应的类，所谓装箱转换，正是把基本类型转换为对应的对象，它是类型转换中一种相当重要的种类。</p><p>前文提到，全局的 Symbol 函数无法使用 new 来调用，但我们仍可以利用装箱机制来得到一个 Symbol 对象，我们可以利用一个函数的call方法来强迫产生装箱。</p><p>我们定义一个函数，函数里面只有return this，然后我们调用函数的call方法到一个Symbol类型的值上，这样就会产生一个symbolObject。</p><p>我们可以用console.log看一下这个东西的type of，它的值是object，我们使用symbolObject instanceof 可以看到，它是Symbol这个类的实例，我们找它的constructor也是等于Symbol的，所以我们无论从哪个角度看，它都是Symbol装箱过的对象：</p><pre><code>    var symbolObject = (function(){ return this; }).call(Symbol(&quot;a&quot;));\n\n    console.log(typeof symbolObject); //object\n    console.log(symbolObject instanceof Symbol); //true\n    console.log(symbolObject.constructor == Symbol); //true\n</code></pre><p>装箱机制会频繁产生临时对象，在一些对性能要求较高的场景下，我们应该尽量避免对基本类型做装箱转换。</p><p>使用内置的 Object 函数，我们可以在JavaScript代码中显式调用装箱能力。</p><pre><code>    var symbolObject = Object(Symbol(&quot;a&quot;));\n\n    console.log(typeof symbolObject); //object\n    console.log(symbolObject instanceof Symbol); //true\n    console.log(symbolObject.constructor == Symbol); //true\n</code></pre><p>每一类装箱对象皆有私有的 Class 属性，这些属性可以用 Object.prototype.toString 获取：</p><pre><code>    var symbolObject = Object(Symbol(&quot;a&quot;));\n\n    console.log(Object.prototype.toString.call(symbolObject)); //[object Symbol]\n</code></pre><p>在 JavaScript 中，没有任何方法可以更改私有的 Class 属性，因此Object.prototype.toString 是可以准确识别对象对应的基本类型的方法，它比 instanceof 更加准确。</p><p>但需要注意的是，call本身会产生装箱操作，所以需要配合 typeof 来区分基本类型还是对象类型。</p><h3>拆箱转换</h3><p>在JavaScript标准中，规定了 ToPrimitive 函数，它是对象类型到基本类型的转换（即，拆箱转换）。</p><p>对象到 String 和 Number 的转换都遵循“先拆箱再转换”的规则。通过拆箱转换，把对象变成基本类型，再从基本类型转换为对应的 String 或者 Number。</p><p>拆箱转换会尝试调用 valueOf 和 toString 来获得拆箱后的基本类型。如果 valueOf 和 toString 都不存在，或者没有返回基本类型，则会产生类型错误 TypeError。</p><pre><code>    var o = {\n        valueOf : () =&gt; {console.log(&quot;valueOf&quot;); return {}},\n        toString : () =&gt; {console.log(&quot;toString&quot;); return {}}\n    }\n\n    o * 2\n    // valueOf\n    // toString\n    // TypeError\n</code></pre><p>我们定义了一个对象o，o有valueOf和toString两个方法，这两个方法都返回一个对象，然后我们进行o*2这个运算的时候，你会看见先执行了valueOf，接下来是toString，最后抛出了一个TypeError，这就说明了这个拆箱转换失败了。</p><p>到 String 的拆箱转换会优先调用 toString。我们把刚才的运算从o*2换成 String(o)，那么你会看到调用顺序就变了。</p><pre><code>    var o = {\n        valueOf : () =&gt; {console.log(&quot;valueOf&quot;); return {}},\n        toString : () =&gt; {console.log(&quot;toString&quot;); return {}}\n    }\n\n   String(o)\n    // toString\n    // valueOf\n    // TypeError\n</code></pre><p>在 ES6 之后，还允许对象通过显式指定 @@toPrimitive Symbol 来覆盖原有的行为。</p><pre><code>    var o = {\n        valueOf : () =&gt; {console.log(&quot;valueOf&quot;); return {}},\n        toString : () =&gt; {console.log(&quot;toString&quot;); return {}}\n    }\n\n    o[Symbol.toPrimitive] = () =&gt; {console.log(&quot;toPrimitive&quot;); return &quot;hello&quot;}\n\n\n    console.log(o + &quot;&quot;)\n    // toPrimitive\n    // hello\n</code></pre><h2>结语</h2><p>在本篇文章中，我们介绍了 JavaScript 运行时的类型系统。这里回顾一下今天讲解的知识点。</p><p>除了这七种语言类型，还有一些语言的实现者更关心的规范类型。</p><ul>\n<li>List 和 Record： 用于描述函数传参过程。</li>\n<li>Set：主要用于解释字符集等。</li>\n<li>Completion Record：用于描述异常、跳出等语句执行过程。</li>\n<li>Reference：用于描述对象属性访问、delete等。</li>\n<li>Property Descriptor：用于描述对象的属性。</li>\n<li>Lexical Environment 和 Environment Record：用于描述变量和作用域。</li>\n<li>Data Block：用于描述二进制数据。</li>\n</ul><p>有一个说法是：程序 = 算法 + 数据结构，运行时类型包含了所有 JavaScript 执行时所需要的数据结构的定义，所以我们要对它格外重视。</p><p>最后我们留一个实践问题，如果我们不用原生的Number和parseInt，用JavaScript代码实现String到Number的转换，该怎么做呢？请你把自己的代码留言给我吧！</p><hr></hr><h2>补充阅读</h2><p>事实上，“类型”在 JavaScript 中是一个有争议的概念。一方面，标准中规定了运行时数据类型； 另一方面，JavaScript语言中提供了 typeof 这样的运算，用来返回操作数的类型，但 typeof 的运算结果，与运行时类型的规定有很多不一致的地方。我们可以看下表来对照一下。</p><p><img src="https://static001.geekbang.org/resource/image/ec/6b/ec4299a73fb84c732efcd360fed6e16b.png" alt=""></p><p>在表格中，多数项是对应的，但是请注意object——Null和function——Object是特例，我们理解类型的时候需要特别注意这个区别。</p><p>从一般语言使用者的角度来看，毫无疑问，我们应该按照 typeof 的结果去理解语言的类型系统。但JavaScript之父本人也在多个场合表示过，typeof 的设计是有缺陷的，只是现在已经错过了修正它的时机。</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "JavaScript类型：关于类型，有哪些你不知道的细节？",
      },
      {
        title: "JavaScript对象：面向对象还是基于对象？",
        herf: "https://time.geekbang.org/column/article/79319",
        id: "79319",
        content:
          '<p>你好，我是winter。</p><p>与其它的语言相比，JavaScript中的“对象”总是显得不那么合群。</p><p>一些新人在学习JavaScript面向对象时，往往也会有疑惑：</p><ul>\n<li>为什么JavaScript（直到ES6）有对象的概念，但是却没有像其他的语言那样，有类的概念呢；</li>\n<li>为什么在JavaScript对象里可以自由添加属性，而其他的语言却不能呢？</li>\n</ul><p>甚至，在一些争论中，有人强调：JavaScript并非“面向对象的语言”，而是“基于对象的语言”。这个说法一度流传甚广，而事实上，我至今遇到的持有这一说法的人中，无一能够回答“如何定义面向对象和基于对象”这个问题。</p><p>实际上，基于对象和面向对象两个形容词都出现在了JavaScript标准的各个版本当中。</p><p>我们可以先看看JavaScript标准对基于对象的定义，这个定义的具体内容是：“语言和宿主的基础设施由对象来提供，并且JavaScript程序即是一系列互相通讯的对象集合”。</p><p>这里的意思根本不是表达弱化的面向对象的意思，反而是表达对象对于语言的重要性。</p><p>那么，在本篇文章中，我会尝试让你去理解面向对象和JavaScript中的面向对象究竟是什么。</p><h2>什么是面向对象？</h2><p>我们先来说说什么是对象，因为翻译的原因，中文语境下我们很难理解“对象”的真正含义。事实上，Object（对象）在英文中，是一切事物的总称，这和面向对象编程的抽象思维有互通之处。</p><!-- [[[read_end]]] --><p>中文的“对象”却没有这样的普适性，我们在学习编程的过程中，更多是把它当作一个专业名词来理解。</p><p>但不论如何，我们应该认识到，对象并不是计算机领域凭空造出来的概念，它是顺着人类思维模式产生的一种抽象（于是面向对象编程也被认为是：更接近人类思维模式的一种编程范式）。</p><p>那么，我们先来看看在人类思维模式下，对象究竟是什么。</p><blockquote>\n<p><span class="reference">对象这一概念在人类的幼儿期形成，这远远早于我们编程逻辑中常用的值、过程等概念。</span></p>\n<p><span class="reference">在幼年期，我们总是先认识到某一个苹果能吃（这里的某一个苹果就是一个对象），继而认识到所有的苹果都可以吃（这里的所有苹果，就是一个类），再到后来我们才能意识到三个苹果和三个梨之间的联系，进而产生数字“3”（值）的概念。</span></p>\n</blockquote><p>在《面向对象分析与设计》这本书中，Grady Booch替我们做了总结，他认为，从人类的认知角度来说，对象应该是下列事物之一：</p><ol>\n<li>一个可以触摸或者可以看见的东西；</li>\n<li>人的智力可以理解的东西；</li>\n<li>可以指导思考或行动（进行想象或施加动作）的东西。</li>\n</ol><p>有了对象的自然定义后，我们就可以描述编程语言中的对象了。在不同的编程语言中，设计者也利用各种不同的语言特性来抽象描述对象，最为成功的流派是使用“类”的方式来描述对象，这诞生了诸如 C++、Java等流行的编程语言。</p><p>而 JavaScript 早年却选择了一个更为冷门的方式：原型（关于原型，我在下一篇文章会重点介绍，这里你留个印象就可以了）。这是我在前面说它不合群的原因之一。</p><p>然而很不幸，因为一些公司政治原因，JavaScript推出之时受管理层之命被要求模仿Java，所以，JavaScript创始人Brendan Eich在“原型运行时”的基础上引入了new、this等语言特性，使之“看起来更像Java”。</p><p>在 ES6 出现之前，大量的 JavaScript 程序员试图在原型体系的基础上，把JavaScript变得更像是基于类的编程，进而产生了很多所谓的“框架”，比如PrototypeJS、Dojo。</p><p>事实上，它们成为了某种JavaScript的古怪方言，甚至产生了一系列互不相容的社群，显然这样做的收益是远远小于损失的。</p><p>如果我们从运行时角度来谈论对象，就是在讨论JavaScript实际运行中的模型，这是由于任何代码执行都必定绕不开运行时的对象模型。</p><p>不过，幸运的是，从运行时的角度看，可以不必受到这些“基于类的设施”的困扰，这是因为任何语言运行时类的概念都是被弱化的。</p><p>首先我们来了解一下JavaScript是如何设计对象模型的。</p><h2>JavaScript 对象的特征</h2><p>在我看来，不论我们使用什么样的编程语言，我们都先应该去理解对象的本质特征（参考Grandy Booch《面向对象分析与设计》）。总结来看，对象有如下几个特点。</p><ul>\n<li>对象具有唯一标识性：即使完全相同的两个对象，也并非同一个对象。</li>\n<li>对象有状态：对象具有状态，同一对象可能处于不同状态之下。</li>\n<li>对象具有行为：即对象的状态，可能因为它的行为产生变迁。</li>\n</ul><p>我们先来看第一个特征，对象具有唯一标识性。一般而言，各种语言的对象唯一标识性都是用内存地址来体现的， 对象具有唯一标识的内存地址，所以具有唯一的标识。</p><p>所以，JavaScript程序员都知道，任何不同的JavaScript对象其实是互不相等的，我们可以看下面的代码，o1和o2初看是两个一模一样的对象，但是打印出来的结果却是false。</p><pre><code class="language-JavaScript">    var o1 = { a: 1 };\n    var o2 = { a: 1 };\n    console.log(o1 == o2); // false\n</code></pre><p>关于对象的第二个和第三个特征“状态和行为”，不同语言会使用不同的术语来抽象描述它们，比如C++中称它们为“成员变量”和“成员函数”，Java中则称它们为“属性”和“方法”。</p><p>在 JavaScript中，将状态和行为统一抽象为“属性”，考虑到 JavaScript 中将函数设计成一种特殊对象（关于这点，我会在后面的文章中详细讲解，此处先不用细究），所以 JavaScript中的行为和状态都能用属性来抽象。</p><p>下面这段代码其实就展示了普通属性和函数作为属性的一个例子，其中o是对象，d是一个属性，而函数f也是一个属性，尽管写法不太相同，但是对JavaScript来说，d和f就是两个普通属性。</p><pre><code class="language-JavaScript">    var o = { \n        d: 1,\n        f() {\n            console.log(this.d);\n        }    \n    };\n</code></pre><p>所以，总结一句话来看，在JavaScript中，对象的状态和行为其实都被抽象为了属性。如果你用过Java，一定不要觉得奇怪，尽管设计思路有一定差别，但是二者都很好地表现了对象的基本特征：标识性、状态和行为。</p><p><strong>在实现了对象基本特征的基础上, 我认为，JavaScript中对象独有的特色是：对象具有高度的动态性，这是因为JavaScript赋予了使用者在运行时为对象添改状态和行为的能力。</strong></p><p>我来举个例子，比如，JavaScript 允许运行时向对象添加属性，这就跟绝大多数基于类的、静态的对象设计完全不同。如果你用过Java或者其它别的语言，肯定会产生跟我一样的感受。</p><p>下面这段代码就展示了运行时如何向一个对象添加属性，一开始我定义了一个对象o，定义完成之后，再添加它的属性b，这样操作是完全没问题的。</p><pre><code class="language-JavaScript">    var o = { a: 1 };\n    o.b = 2;\n    console.log(o.a, o.b); //1 2\n</code></pre><p>为了提高抽象能力，JavaScript的属性被设计成比别的语言更加复杂的形式，它提供了数据属性和访问器属性（getter/setter）两类。</p><h2>JavaScript对象的两类属性</h2><p>对JavaScript来说，属性并非只是简单的名称和值，JavaScript用一组特征（attribute）来描述属性（property）。</p><p>先来说第一类属性，数据属性。它比较接近于其它语言的属性概念。数据属性具有四个特征。</p><ul>\n<li>value：就是属性的值。</li>\n<li>writable：决定属性能否被赋值。</li>\n<li>enumerable：决定for in能否枚举该属性。</li>\n<li>configurable：决定该属性能否被删除或者改变特征值。</li>\n</ul><p>在大多数情况下，我们只关心数据属性的值即可。</p><p>第二类属性是访问器（getter/setter）属性，它也有四个特征。</p><ul>\n<li>getter：函数或undefined，在取属性值时被调用。</li>\n<li>setter：函数或undefined，在设置属性值时被调用。</li>\n<li>enumerable：决定for in能否枚举该属性。</li>\n<li>configurable：决定该属性能否被删除或者改变特征值。</li>\n</ul><p>访问器属性使得属性在读和写时执行代码，它允许使用者在写和读属性时，得到完全不同的值，它可以视为一种函数的语法糖。</p><p>我们通常用于定义属性的代码会产生数据属性，其中的writable、enumerable、configurable都默认为true。我们可以使用内置函数getOwnPropertyDescriptor来查看，如以下代码所示：</p><pre><code class="language-JavaScript">    var o = { a: 1 };\n    o.b = 2;\n    //a和b皆为数据属性\n    Object.getOwnPropertyDescriptor(o,"a") // {value: 1, writable: true, enumerable: true, configurable: true}\n    Object.getOwnPropertyDescriptor(o,"b") // {value: 2, writable: true, enumerable: true, configurable: true}\n</code></pre><p>我们在这里使用了两种语法来定义属性，定义完属性后，我们用JavaScript的API来查看这个属性，我们可以发现，这样定义出来的属性都是数据属性，writeable、enumerable、configurable都是默认值为true。</p><p>如果我们要想改变属性的特征，或者定义访问器属性，我们可以使用 Object.defineProperty，示例如下：</p><pre><code>    var o = { a: 1 };\n    Object.defineProperty(o, &quot;b&quot;, {value: 2, writable: false, enumerable: false, configurable: true});\n    //a和b都是数据属性，但特征值变化了\n    Object.getOwnPropertyDescriptor(o,&quot;a&quot;); // {value: 1, writable: true, enumerable: true, configurable: true}\n    Object.getOwnPropertyDescriptor(o,&quot;b&quot;); // {value: 2, writable: false, enumerable: false, configurable: true}\n    o.b = 3;\n    console.log(o.b); // 2\n</code></pre><p>这里我们使用了Object.defineProperty来定义属性，这样定义属性可以改变属性的writable和enumerable。</p><p>我们同样用Object.getOwnPropertyDescriptor来查看，发现确实改变了writable和enumerable特征。因为writable特征为false，所以我们重新对b赋值，b的值不会发生变化。</p><p>在创建对象时，也可以使用 get 和 set 关键字来创建访问器属性，代码如下所示：</p><pre><code>    var o = { get a() { return 1 } };\n\n    console.log(o.a); // 1\n</code></pre><p>访问器属性跟数据属性不同，每次访问属性都会执行getter或者setter函数。这里我们的getter函数返回了1，所以o.a每次都得到1。</p><p>这样，我们就理解了，实际上JavaScript 对象的运行时是一个“属性的集合”，属性以字符串或者Symbol为key，以数据属性特征值或者访问器属性特征值为value。</p><p>对象是一个属性的索引结构（索引结构是一类常见的数据结构，我们可以把它理解为一个能够以比较快的速度用key来查找value的字典）。我们以上面的对象o为例，你可以想象一下“a”是key。</p><p><code>{writable:true,value:1,configurable:true,enumerable:true}</code>是value。我们在前面的类型课程中，已经介绍了Symbol类型，能够以Symbol为属性名，这是JavaScript对象的一个特色。</p><p>讲到了这里，如果你理解了对象的特征，也就不难理解我开篇提出来的问题。</p><p>你甚至可以理解为什么会有“JavaScript不是面向对象”这样的说法了。这是由于JavaScript的对象设计跟目前主流基于类的面向对象差异非常大。</p><p>可事实上，这样的对象系统设计虽然特别，但是JavaScript提供了完全运行时的对象系统，这使得它可以模仿多数面向对象编程范式（下一节课我们会给你介绍JavaScript中两种面向对象编程的范式：基于类和基于原型），所以它也是正统的面向对象语言。</p><p>JavaScript语言标准也已经明确说明，JavaScript是一门面向对象的语言，我想标准中能这样说，正是因为JavaScript的高度动态性的对象系统。</p><p>所以，我们应该在理解其设计思想的基础上充分挖掘它的能力，而不是机械地模仿其它语言。</p><h2>结语</h2><p>要想理解JavaScript对象，必须清空我们脑子里“基于类的面向对象”相关的知识，回到人类对对象的朴素认知和面向对象的语言无关基础理论，我们就能够理解JavaScript面向对象设计的思路。</p><p>在这篇文章中，我从对象的基本理论出发，和你理清了关于对象的一些基本概念，分析了JavaScript对象的设计思路。接下来又从运行时的角度，介绍了JavaScript对象的具体设计：具有高度动态性的属性集合。</p><p>很多人在思考JavaScript对象时，会带着已有的“对象”观来看问题，最后的结果当然就是“剪不断理还乱”了。</p><p>在后面的文章中，我会继续带你探索JavaScript对象的一些机制，看JavaScript如何基于这样的动态对象模型设计自己的原型系统，以及你熟悉的函数、类等基础设施。</p><p>你还知道哪些面向对象语言，它们的面向对象系统是怎样的？请留言告诉我吧！</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "JavaScript对象：面向对象还是基于对象？",
      },
      {
        title: "JavaScript对象：我们真的需要模拟类吗？",
        herf: "https://time.geekbang.org/column/article/79539",
        id: "79539",
        content:
          "<p>早期的JavaScript程序员一般都有过使用JavaScript“模拟面向对象”的经历。</p><p>在上一篇文章我们已经讲到，JavaScript本身就是面向对象的，它并不需要模拟，只是它实现面向对象的方式和主流的流派不太一样，所以才让很多人产生了误会。</p><p>那么，随着我们理解的思路继续深入，这些“模拟面向对象”，实际上做的事情就是“模拟基于类的面向对象”。</p><p>尽管我认为，“类”并非面向对象的全部，但我们不应该责备社区出现这样的方案，事实上，因为一些公司的政治原因，JavaScript推出之时，管理层就要求它去模仿Java。</p><p>所以，JavaScript创始人Brendan Eich在“原型运行时”的基础上引入了new、this等语言特性，使之“看起来语法更像Java”，而Java正是基于类的面向对象的代表语言之一。</p><p>但是JavaScript这样的半吊子模拟，缺少了继承等关键特性，导致大家试图对它进行修补，进而产生了种种互不相容的解决方案。</p><p>庆幸的是，从ES6开始，JavaScript提供了class关键字来定义类，尽管，这样的方案仍然是基于原型运行时系统的模拟，但是它修正了之前的一些常见的“坑”，统一了社区的方案，这对语言的发展有着非常大的好处。</p><!-- [[[read_end]]] --><p>实际上，我认为“基于类”并非面向对象的唯一形态，如果我们把视线从“类”移开，Brendan当年选择的原型系统，就是一个非常优秀的抽象对象的形式。</p><p>我们从头讲起。</p><h2>什么是原型？</h2><p>原型是顺应人类自然思维的产物。中文中有个成语叫做“照猫画虎”，这里的猫看起来就是虎的原型，所以，由此我们可以看出，用原型来描述对象的方法可以说是古已有之。</p><p>我们在上一节讲解面向对象的时候提到了：在不同的编程语言中，设计者也利用各种不同的语言特性来抽象描述对象。</p><p>最为成功的流派是使用“类”的方式来描述对象，这诞生了诸如 C++、Java等流行的编程语言。这个流派叫做基于类的编程语言。</p><p>还有一种就是基于原型的编程语言，它们利用原型来描述对象。我们的JavaScript就是其中代表。</p><p>“基于类”的编程提倡使用一个关注分类和类之间关系开发模型。在这类语言中，总是先有类，再从类去实例化一个对象。类与类之间又可能会形成继承、组合等关系。类又往往与语言的类型系统整合，形成一定编译时的能力。</p><p>与此相对，“基于原型”的编程看起来更为提倡程序员去关注一系列对象实例的行为，而后才去关心如何将这些对象，划分到最近的使用方式相似的原型对象，而不是将它们分成类。</p><p>基于原型的面向对象系统通过“复制”的方式来创建新对象。一些语言的实现中，还允许复制一个空对象。这实际上就是创建一个全新的对象。</p><p>基于原型和基于类都能够满足基本的复用和抽象需求，但是适用的场景不太相同。</p><p>这就像专业人士可能喜欢在看到老虎的时候，喜欢用猫科豹属豹亚种来描述它，但是对一些不那么正式的场合，“大猫”可能更为接近直观的感受一些（插播一个冷知识：比起老虎来，美洲狮在历史上相当长时间都被划分为猫科猫属，所以性格也跟猫更相似，比较亲人）。</p><p>我们的JavaScript 并非第一个使用原型的语言，在它之前，self、kevo等语言已经开始使用原型来描述对象了。</p><p>事实上，Brendan更是曾透露过，他最初的构想是一个拥有基于原型的面向对象能力的scheme语言（但是函数式的部分是另外的故事，这篇文章里，我暂时不做详细讲述）。</p><p>在JavaScript之前，原型系统就更多与高动态性语言配合，并且多数基于原型的语言提倡运行时的原型修改，我想，这应该是Brendan选择原型系统很重要的理由。</p><p>原型系统的“复制操作”有两种实现思路：</p><ul>\n<li>\n<p>一个是并不真的去复制一个原型对象，而是使得新对象持有一个原型的引用；</p>\n</li>\n<li>\n<p>另一个是切实地复制对象，从此两个对象再无关联。</p>\n</li>\n</ul><p>历史上的基于原型语言因此产生了两个流派，显然，JavaScript显然选择了前一种方式。</p><h2>JavaScript的原型</h2><p>如果我们抛开JavaScript用于模拟Java类的复杂语法设施（如new、Function Object、函数的prototype属性等），原型系统可以说相当简单，我可以用两条概括：</p><ul>\n<li>如果所有对象都有私有字段[[prototype]]，就是对象的原型；</li>\n<li>读一个属性，如果对象本身没有，则会继续访问对象的原型，直到原型为空或者找到为止。</li>\n</ul><p>这个模型在ES的各个历史版本中并没有很大改变，但从 ES6 以来，JavaScript提供了一系列内置函数，以便更为直接地访问操纵原型。三个方法分别为：</p><ul>\n<li>Object.create 根据指定的原型创建新对象，原型可以是null；</li>\n<li>Object.getPrototypeOf 获得一个对象的原型；</li>\n<li>Object.setPrototypeOf 设置一个对象的原型。</li>\n</ul><p>利用这三个方法，我们可以完全抛开类的思维，利用原型来实现抽象和复用。我用下面的代码展示了用原型来抽象猫和虎的例子。</p><pre><code>var cat = {\n    say(){\n        console.log(&quot;meow~&quot;);\n    },\n    jump(){\n        console.log(&quot;jump&quot;);\n    }\n}\n\nvar tiger = Object.create(cat,  {\n    say:{\n        writable:true,\n        configurable:true,\n        enumerable:true,\n        value:function(){\n            console.log(&quot;roar!&quot;);\n        }\n    }\n})\n\n\nvar anotherCat = Object.create(cat);\n\nanotherCat.say();\n\nvar anotherTiger = Object.create(tiger);\n\nanotherTiger.say();\n\n</code></pre><p>这段代码创建了一个“猫”对象，又根据猫做了一些修改创建了虎，之后我们完全可以用Object.create来创建另外的猫和虎对象，我们可以通过“原始猫对象”和“原始虎对象”来控制所有猫和虎的行为。</p><p>但是，在更早的版本中，程序员只能通过Java风格的类接口来操纵原型运行时，可以说非常别扭。</p><p>考虑到new和prototype属性等基础设施今天仍然有效，而且被很多代码使用，学习这些知识也有助于我们理解运行时的原型工作原理，下面我们试着回到过去，追溯一下早年的JavaScript中的原型和类。</p><h2>早期版本中的类与原型</h2><p>在早期版本的JavaScript中，“类”的定义是一个私有属性 [[class]]，语言标准为内置类型诸如Number、String、Date等指定了[[class]]属性，以表示它们的类。语言使用者唯一可以访问[[class]]属性的方式是Object.prototype.toString。</p><p>以下代码展示了所有具有内置class属性的对象：</p><pre><code>    var o = new Object;\n    var n = new Number;\n    var s = new String;\n    var b = new Boolean;\n    var d = new Date;\n    var arg = function(){ return arguments }();\n    var r = new RegExp;\n    var f = new Function;\n    var arr = new Array;\n    var e = new Error;\n    console.log([o, n, s, b, d, arg, r, f, arr, e].map(v =&gt; Object.prototype.toString.call(v))); \n</code></pre><p>因此，在ES3和之前的版本，JS中类的概念是相当弱的，它仅仅是运行时的一个字符串属性。</p><p>在ES5开始，[[class]] 私有属性被 Symbol.toStringTag 代替，Object.prototype.toString 的意义从命名上不再跟 class 相关。我们甚至可以自定义 Object.prototype.toString 的行为，以下代码展示了使用Symbol.toStringTag来自定义 Object.prototype.toString 的行为：</p><pre><code>    var o = { [Symbol.toStringTag]: &quot;MyObject&quot; }\n    console.log(o + &quot;&quot;);\n</code></pre><p>这里创建了一个新对象，并且给它唯一的一个属性 Symbol.toStringTag，我们用字符串加法触发了Object.prototype.toString的调用，发现这个属性最终对Object.prototype.toString 的结果产生了影响。</p><p>但是，考虑到JavaScript语法中跟Java相似的部分，我们对类的讨论不能用“new运算是针对构造器对象，而不是类”来试图回避。</p><p>所以，我们仍然要把new理解成JavaScript面向对象的一部分，下面我就来讲一下new操作具体做了哪些事情。</p><p>new 运算接受一个构造器和一组调用参数，实际上做了几件事：</p><ul>\n<li>以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；</li>\n<li>将 this 和调用参数传给构造器，执行；</li>\n<li>如果构造器返回的是对象，则返回，否则返回第一步创建的对象。</li>\n</ul><p>new 这样的行为，试图让函数对象在语法上跟类变得相似，但是，它客观上提供了两种方式，一是在构造器中添加属性，二是在构造器的 prototype 属性上添加属性。</p><p>下面代码展示了用构造器模拟类的两种方法:</p><pre><code>\nfunction c1(){\n    this.p1 = 1;\n    this.p2 = function(){\n        console.log(this.p1);\n    }\n} \nvar o1 = new c1;\no1.p2();\n\n\n\nfunction c2(){\n}\nc2.prototype.p1 = 1;\nc2.prototype.p2 = function(){\n    console.log(this.p1);\n}\n\nvar o2 = new c2;\no2.p2();\n</code></pre><p>第一种方法是直接在构造器中修改this，给this添加属性。</p><p>第二种方法是修改构造器的prototype属性指向的对象，它是从这个构造器构造出来的所有对象的原型。</p><p>没有Object.create、Object.setPrototypeOf 的早期版本中，new 运算是唯一一个可以指定[[prototype]]的方法（当时的mozilla提供了私有属性__proto__，但是多数环境并不支持），所以，当时已经有人试图用它来代替后来的 Object.create，我们甚至可以用它来实现一个Object.create的不完整的polyfill，见以下代码：</p><pre><code>Object.create = function(prototype){\n    var cls = function(){}\n    cls.prototype = prototype;\n    return new cls;\n}\n</code></pre><p>这段代码创建了一个空函数作为类，并把传入的原型挂在了它的prototype，最后创建了一个它的实例，根据new的行为，这将产生一个以传入的第一个参数为原型的对象。</p><p>这个函数无法做到与原生的Object.create一致，一个是不支持第二个参数，另一个是不支持null作为原型，所以放到今天意义已经不大了。</p><h2>ES6 中的类</h2><p>好在ES6中加入了新特性class，new跟function搭配的怪异行为终于可以退休了（虽然运行时没有改变），在任何场景，我都推荐使用ES6的语法来定义类，而令function回归原本的函数语义。下面我们就来看一下ES6中的类。</p><p>ES6中引入了class关键字，并且在标准中删除了所有[[class]]相关的私有属性描述，类的概念正式从属性升级成语言的基础设施，从此，基于类的编程方式成为了JavaScript的官方编程范式。</p><p>我们先看下类的基本写法：</p><pre><code>class Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get area() {\n    return this.calcArea();\n  }\n  // Method\n  calcArea() {\n    return this.height * this.width;\n  }\n}\n</code></pre><p>在现有的类语法中，getter/setter和method是兼容性最好的。</p><p>我们通过get/set关键字来创建getter，通过括号和大括号来创建方法，数据型成员最好写在构造器里面。</p><p>类的写法实际上也是由原型运行时来承载的，逻辑上JavaScript认为每个类是有共同原型的一组对象，类中定义的方法和属性则会被写在原型对象之上。</p><p>此外，最重要的是，类提供了继承能力。我们来看一下下面的代码。</p><pre><code>class Animal { \n  constructor(name) {\n    this.name = name;\n  }\n  \n  speak() {\n    console.log(this.name + ' makes a noise.');\n  }\n}\n\nclass Dog extends Animal {\n  constructor(name) {\n    super(name); // call the super class constructor and pass in the name parameter\n  }\n\n  speak() {\n    console.log(this.name + ' barks.');\n  }\n}\n\nlet d = new Dog('Mitzie');\nd.speak(); // Mitzie barks.\n</code></pre><p>以上代码创造了Animal类，并且通过extends关键字让Dog继承了它，展示了最终调用子类的speak方法获取了父类的name。</p><p>比起早期的原型模拟方式，使用extends关键字自动设置了constructor，并且会自动调用父类的构造函数，这是一种更少坑的设计。</p><p>所以当我们使用类的思想来设计代码时，应该尽量使用class来声明类，而不是用旧语法，拿函数来模拟对象。</p><p>一些激进的观点认为，class关键字和箭头运算符可以完全替代旧的function关键字，它更明确地区分了定义函数和定义类两种意图，我认为这是有一定道理的。</p><h2>总结</h2><p>在新的ES版本中，我们不再需要模拟类了：我们有了光明正大的新语法。而原型体系同时作为一种编程范式和运行时机制存在。</p><p>我们可以自由选择原型或者类作为代码的抽象风格，但是无论我们选择哪种，理解运行时的原型系统都是很有必要的一件事。</p><p>在你的工作中，是使用class还是仍然在用function来定义“类”？为什么这么做？如何把使用function定义类的代码改造到class的新语法？</p><p>欢迎给我留言，我们一起讨论。</p><p></p>",
        article_title: "JavaScript对象：我们真的需要模拟类吗？",
      },
      {
        title: "JavaScript对象：你知道全部的对象分类吗？",
        herf: "https://time.geekbang.org/column/article/80011",
        id: "80011",
        content:
          '<p>你好，我是winter。</p><p>在前面的课程中，我已经讲解了JavaScript对象的一些基础知识。但是，我们所讲解的对象，只是特定的一部分，并不能涵盖全部的JavaScript对象。</p><p>比如说，我们不论怎样编写代码，都没法绕开Array，实现一个跟原生的数组行为一模一样的对象，这是由于原生数组的底层实现了一个自动随着下标变化的length属性。</p><p>并且，在浏览器环境中，我们也无法单纯依靠JavaScript代码实现div对象，只能靠document.createElement来创建。这也说明了JavaScript的对象机制并非简单的属性集合+原型。</p><p>我们日常工作中，接触到的主要API，几乎都是由今天所讲解的这些对象提供的。理解这些对象的性质，我们才能真正理解我们使用的API的一些特性。</p><h2>JavaScript中的对象分类</h2><p>我们可以把对象分成几类。</p><ul>\n<li>\n<p>宿主对象（host Objects）：由JavaScript宿主环境提供的对象，它们的行为完全由宿主环境决定。</p>\n</li>\n<li>\n<p>内置对象（Built-in Objects）：由JavaScript语言提供的对象。</p>\n<ul>\n<li>固有对象（Intrinsic Objects ）：由标准规定，随着JavaScript运行时创建而自动创建的对象实例。</li>\n<li>原生对象（Native Objects）：可以由用户通过Array、RegExp等内置构造器或者特殊语法创建的对象。</li>\n<li>普通对象（Ordinary Objects）：由{}语法、Object构造器或者class关键字定义类创建的对象，它能够被原型继承。</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><p>下面我会为你一一讲解普通对象之外的对象类型。</p><h3>宿主对象</h3><p>首先我们来看看宿主对象。</p><p>JavaScript宿主对象千奇百怪，但是前端最熟悉的无疑是浏览器环境中的宿主了。</p><p>在浏览器环境中，我们都知道全局对象是window，window上又有很多属性，如document。</p><p>实际上，这个全局对象window上的属性，一部分来自JavaScript语言，一部分来自浏览器环境。</p><p>JavaScript标准中规定了全局对象属性，W3C的各种标准中规定了Window对象的其它属性。</p><p>宿主对象也分为固有的和用户可创建的两种，比如document.createElement就可以创建一些DOM对象。</p><p>宿主也会提供一些构造器，比如我们可以使用new Image来创建img元素，这些我们会在浏览器的API部分详细讲解。</p><h2>内置对象·固有对象</h2><p>我们在前面说过，固有对象是由标准规定，随着JavaScript运行时创建而自动创建的对象实例。</p><p>固有对象在任何JavaScript代码执行前就已经被创建出来了，它们通常扮演者类似基础库的角色。我们前面提到的“类”其实就是固有对象的一种。</p><p>ECMA标准为我们提供了一份固有对象表，里面含有150+个固有对象。你可以通过<a href="https://www.ecma-international.org/ecma-262/9.0/index.html#sec-well-known-intrinsic-objects">这个链接</a>查看。</p><p>但是遗憾的是，这个表格并不完整。所以在本篇的末尾，我设计了一个小实验（小实验：获取全部JavaScript固有对象），你可以自己尝试一下，数一数一共有多少个固有对象。</p><h2>内置对象·原生对象</h2><p>我们把JavaScript中，能够通过语言本身的构造器创建的对象称作原生对象。在JavaScript标准中，提供了30多个构造器。按照我的理解，按照不同应用场景，我把原生对象分成了以下几个种类。</p><p><img src="https://static001.geekbang.org/resource/image/6c/d0/6cb1df319bbc7c7f948acfdb9ffd99d0.png" alt=""></p><p>通过这些构造器，我们可以用new运算创建新的对象，所以我们把这些对象称作原生对象。<br>\n几乎所有这些构造器的能力都是无法用纯JavaScript代码实现的，它们也无法用class/extend语法来继承。</p><p>这些构造器创建的对象多数使用了私有字段,例如：</p><ul>\n<li>Error: [[ErrorData]]</li>\n<li>Boolean: [[BooleanData]]</li>\n<li>Number: [[NumberData]]</li>\n<li>Date: [[DateValue]]</li>\n<li>RegExp: [[RegExpMatcher]]</li>\n<li>Symbol: [[SymbolData]]</li>\n<li>Map: [[MapData]]</li>\n</ul><p>这些字段使得原型继承方法无法正常工作，所以，我们可以认为，所有这些原生对象都是为了特定能力或者性能，而设计出来的“特权对象”。</p><h2>用对象来模拟函数与构造器：函数对象与构造器对象</h2><p>我在前面介绍了对象的一般分类，在JavaScript中，还有一个看待对象的不同视角，这就是用对象来模拟函数和构造器。</p><p>事实上，JavaScript为这一类对象预留了私有字段机制，并规定了抽象的函数对象与构造器对象的概念。</p><p>函数对象的定义是：具有[[call]]私有字段的对象，构造器对象的定义是：具有私有字段[[construct]]的对象。</p><p>JavaScript用对象模拟函数的设计代替了一般编程语言中的函数，它们可以像其它语言的函数一样被调用、传参。任何宿主只要提供了“具有[[call]]私有字段的对象”，就可以被 JavaScript 函数调用语法支持。</p><blockquote>\n<p><span class="reference">[[call]]私有字段必须是一个引擎中定义的函数，需要接受this值和调用参数，并且会产生域的切换，这些内容，我将会在属性访问和执行过程两个章节详细讲述。</span></p>\n</blockquote><p>我们可以这样说，任何对象只需要实现[[call]]，它就是一个函数对象，可以去作为函数被调用。而如果它能实现[[construct]]，它就是一个构造器对象，可以作为构造器被调用。</p><p>对于为JavaScript提供运行环境的程序员来说，只要字段符合，我们在上文中提到的宿主对象和内置对象（如Symbol函数）可以模拟函数和构造器。</p><p>当然了，用户用function关键字创建的函数必定同时是函数和构造器。不过，它们表现出来的行为效果却并不相同。</p><p>对于宿主和内置对象来说，它们实现[[call]]（作为函数被调用）和[[construct]]（作为构造器被调用）不总是一致的。比如内置对象 Date 在作为构造器调用时产生新的对象，作为函数时，则产生字符串，见以下代码：</p><pre><code class="language-JavaScript">    console.log(new Date); // 1\n    console.log(Date())\n</code></pre><p>而浏览器宿主环境中，提供的Image构造器，则根本不允许被作为函数调用。</p><pre><code>console.log(new Image); \nconsole.log(Image());//抛出错误\n</code></pre><p>再比如基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p><p>值得一提的是，在ES6之后 =&gt; 语法创建的函数仅仅是函数，它们无法被当作构造器使用，见以下代码：</p><pre><code class="language-JavaScript">    new (a =&gt; 0) // error\n\n</code></pre><p>对于用户使用 function 语法或者Function构造器创建的对象来说，[[call]]和[[construct]]行为总是相似的，它们执行同一段代码。</p><p>我们看一下示例。</p><pre><code class="language-JavaScript">function f(){\n    return 1;\n}\nvar v = f(); //把f作为函数调用\nvar o = new f(); //把f作为构造器调用\n</code></pre><p>我们大致可以认为，它们[[construct]]的执行过程如下：</p><ul>\n<li>以 Object.prototype 为原型创建一个新对象；</li>\n<li>以新对象为 this，执行函数的[[call]]；</li>\n<li>如果[[call]]的返回值是对象，那么，返回这个对象，否则返回第一步创建的新对象。</li>\n</ul><p>这样的规则造成了个有趣的现象，如果我们的构造器返回了一个新的对象，那么new创建的新对象就变成了一个构造函数之外完全无法访问的对象，这一定程度上可以实现“私有”。</p><pre><code>function cls(){\n    this.a = 100;\n    return {\n        getValue:() =&gt; this.a\n    }\n}\nvar o = new cls;\no.getValue(); //100\n//a在外面永远无法访问到\n</code></pre><h2>特殊行为的对象</h2><p>除了上面介绍的对象之外，在固有对象和原生对象中，有一些对象的行为跟正常对象有很大区别。</p><p>它们常见的下标运算（就是使用中括号或者点来做属性访问）或者设置原型跟普通对象不同，这里我简单总结一下。</p><ul>\n<li>Array：Array的length属性根据最大的下标自动发生变化。</li>\n<li>Object.prototype：作为所有正常对象的默认原型，不能再给它设置原型了。</li>\n<li>String：为了支持下标运算，String的正整数属性访问会去字符串里查找。</li>\n<li>Arguments：arguments的非负整数型下标属性跟对应的变量联动。</li>\n<li>模块的namespace对象：特殊的地方非常多，跟一般对象完全不一样，尽量只用于import吧。</li>\n<li>类型数组和数组缓冲区：跟内存块相关联，下标运算比较特殊。</li>\n<li>bind后的function：跟原来的函数相关联。</li>\n</ul><h2>结语</h2><p>在这篇文章中，我们介绍了一些不那么常规的对象，并且我还介绍了JavaScript中用对象来模拟函数和构造器的机制。</p><p>这是一些不那么有规律、不那么优雅的知识，而JavaScript正是通过这些对象，提供了很多基础的能力。</p><p>我们这次课程留一个挑战任务：不使用new运算符，尽可能找到获得对象的方法。</p><p>例子：</p><pre><code>var o = {}\nvar o = function(){}\n</code></pre><p>请把自己的答案留言给我，我们来比比看谁找到的多。</p><h2>小实验：获取全部JavaScript固有对象</h2><p>我们从JavaScript标准中可以找到全部的JavaScript对象定义。JavaScript语言规定了全局对象的属性。</p><p>三个值：</p><p>Infinity、NaN、undefined。</p><p>九个函数：</p><ul>\n<li>eval</li>\n<li>isFinite</li>\n<li>isNaN</li>\n<li>parseFloat</li>\n<li>parseInt</li>\n<li>decodeURI</li>\n<li>decodeURIComponent</li>\n<li>encodeURI</li>\n<li>encodeURIComponent</li>\n</ul><p>一些构造器：<br>\nArray、Date、RegExp、Promise、Proxy、Map、WeakMap、Set、WeakSet、Function、Boolean、String、Number、Symbol、Object、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError、ArrayBuffer、SharedArrayBuffer、DataView、Typed Array、Float32Array、Float64Array、Int8Array、Int16Array、Int32Array、UInt8Array、UInt16Array、UInt32Array、UInt8ClampedArray。</p><p>四个用于当作命名空间的对象：</p><ul>\n<li>Atomics</li>\n<li>JSON</li>\n<li>Math</li>\n<li>Reflect</li>\n</ul><p>我们使用广度优先搜索，查找这些对象所有的属性和Getter/Setter，就可以获得JavaScript中所有的固有对象。</p><p>请你试着先不看我的代码，在自己的浏览器中计算出来JavaScript有多少固有对象。</p><pre><code>var set = new Set();\nvar objects = [\n    eval,\n    isFinite,\n    isNaN,\n    parseFloat,\n    parseInt,\n    decodeURI,\n    decodeURIComponent,\n    encodeURI,\n    encodeURIComponent,\n    Array,\n    Date,\n    RegExp,\n    Promise,\n    Proxy,\n    Map,\n    WeakMap,\n    Set,\n    WeakSet,\n    Function,\n    Boolean,\n    String,\n    Number,\n    Symbol,\n    Object,\n    Error,\n    EvalError,\n    RangeError,\n    ReferenceError,\n    SyntaxError,\n    TypeError,\n    URIError,\n    ArrayBuffer,\n    SharedArrayBuffer,\n    DataView,\n    Float32Array,\n    Float64Array,\n    Int8Array,\n    Int16Array,\n    Int32Array,\n    Uint8Array,\n    Uint16Array,\n    Uint32Array,\n    Uint8ClampedArray,\n    Atomics,\n    JSON,\n    Math,\n    Reflect];\nobjects.forEach(o =&gt; set.add(o));\n\nfor(var i = 0; i &lt; objects.length; i++) {\n    var o = objects[i]\n    for(var p of Object.getOwnPropertyNames(o)) {\n        var d = Object.getOwnPropertyDescriptor(o, p)\n        if( (d.value !== null &amp;&amp; typeof d.value === &quot;object&quot;) || (typeof d.value === &quot;function&quot;))\n            if(!set.has(d.value))\n                set.add(d.value), objects.push(d.value);\n        if( d.get )\n            if(!set.has(d.get))\n                set.add(d.get), objects.push(d.get);\n        if( d.set )\n            if(!set.has(d.set))\n                set.add(d.set), objects.push(d.set);\n    }\n}\n</code></pre>',
        article_title: "JavaScript对象：你知道全部的对象分类吗？",
      },
      {
        title:
          "JavaScript执行（一）：Promise里的代码为什么比setTimeout先执行？",
        herf: "https://time.geekbang.org/column/article/82764",
        id: "82764",
        content:
          '<p>你好，我是winter。这一部分我们来讲一讲JavaScript的执行。</p><p>首先我们考虑一下，如果我们是浏览器或者Node的开发者，我们该如何使用JavaScript引擎。</p><p>当拿到一段JavaScript代码时，浏览器或者Node环境首先要做的就是；传递给JavaScript引擎，并且要求它去执行。</p><p>然而，执行JavaScript并非一锤子买卖，宿主环境当遇到一些事件时，会继续把一段代码传递给JavaScript引擎去执行，此外，我们可能还会提供API给JavaScript引擎，比如setTimeout这样的API，它会允许JavaScript在特定的时机执行。</p><p>所以，我们首先应该形成一个感性的认知：一个JavaScript引擎会常驻于内存中，它等待着我们（宿主）把JavaScript代码或者函数传递给它执行。</p><p>在ES3和更早的版本中，JavaScript本身还没有异步执行代码的能力，这也就意味着，宿主环境传递给JavaScript引擎一段代码，引擎就把代码直接顺次执行了，这个任务也就是宿主发起的任务。</p><p>但是，在ES5之后，JavaScript引入了Promise，这样，不需要浏览器的安排，JavaScript引擎本身也可以发起任务了。</p><!-- [[[read_end]]] --><p>由于我们这里主要讲JavaScript语言，那么采纳JSC引擎的术语，我们把宿主发起的任务称为宏观任务，把JavaScript引擎发起的任务称为微观任务。</p><h2>宏观和微观任务</h2><p>JavaScript引擎等待宿主环境分配宏观任务，在操作系统中，通常等待的行为都是一个事件循环，所以在Node术语中，也会把这个部分称为事件循环。</p><p>不过，术语本身并非我们需要重点讨论的内容，我们在这里把重点放在事件循环的原理上。在底层的C/C++代码中，这个事件循环是一个跑在独立线程中的循环，我们用伪代码来表示，大概是这样的：</p><pre><code class="language-C">while(TRUE) {\n    r = wait();\n    execute(r);\n}\n</code></pre><p>我们可以看到，整个循环做的事情基本上就是反复“等待-执行”。当然，实际的代码中并没有这么简单，还有要判断循环是否结束、宏观任务队列等逻辑，这里为了方便你理解，我就把这些都省略掉了。</p><p>这里每次的执行过程，其实都是一个宏观任务。我们可以大概理解：宏观任务的队列就相当于事件循环。</p><p>在宏观任务中，JavaScript的Promise还会产生异步代码，JavaScript必须保证这些异步代码在一个宏观任务中完成，因此，每个宏观任务中又包含了一个微观任务队列：</p><p><img src="https://static001.geekbang.org/resource/image/16/65/16f70a9a51a65d5302166b0d78414d65.jpg" alt=""></p><p>有了宏观任务和微观任务机制，我们就可以实现JavaScript引擎级和宿主级的任务了，例如：Promise永远在队列尾部添加微观任务。setTimeout等宿主API，则会添加宏观任务。</p><p>接下来，我们来详细介绍一下Promise。</p><h2>Promise</h2><p>Promise是JavaScript语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行io、等待或者其它异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用方可以在合适的时机，选择等待这个承诺兑现（通过Promise的then方法的回调）。</p><p>Promise的基本用法示例如下：</p><pre><code>    function sleep(duration) {\n        return new Promise(function(resolve, reject) {\n            setTimeout(resolve,duration);\n        })\n    }\n    sleep(1000).then( ()=&gt; console.log(&quot;finished&quot;));\n</code></pre><p>这段代码定义了一个函数sleep，它的作用是等候传入参数指定的时长。</p><p>Promise的then回调是一个异步的执行过程，下面我们就来研究一下Promise函数中的执行顺序，我们来看一段代码示例：</p><pre><code>    var r = new Promise(function(resolve, reject){\n        console.log(&quot;a&quot;);\n        resolve()\n    });\n    r.then(() =&gt; console.log(&quot;c&quot;));\n    console.log(&quot;b&quot;)\n</code></pre><p>我们执行这段代码后，注意输出的顺序是 a b c。在进入console.log(“b”) 之前，毫无疑问 r 已经得到了resolve，但是Promise的resolve始终是异步操作，所以c无法出现在b之前。</p><p>接下来我们试试跟setTimeout混用的Promise。</p><p>在这段代码中，我设置了两段互不相干的异步操作：通过setTimeout执行console.log(“d”)，通过Promise执行console.log(“c”)。</p><pre><code>    var r = new Promise(function(resolve, reject){\n        console.log(&quot;a&quot;);\n        resolve()\n    });\n    setTimeout(()=&gt;console.log(&quot;d&quot;), 0)\n    r.then(() =&gt; console.log(&quot;c&quot;));\n    console.log(&quot;b&quot;)\n</code></pre><p>我们发现，不论代码顺序如何，d必定发生在c之后，因为Promise产生的是JavaScript引擎内部的微任务，而setTimeout是浏览器API，它产生宏任务。</p><p>为了理解微任务始终先于宏任务，我们设计一个实验：执行一个耗时1秒的Promise。</p><pre><code>    setTimeout(()=&gt;console.log(&quot;d&quot;), 0)\n    var r = new Promise(function(resolve, reject){\n        resolve()\n    });\n    r.then(() =&gt; { \n        var begin = Date.now();\n        while(Date.now() - begin &lt; 1000);\n        console.log(&quot;c1&quot;) \n        new Promise(function(resolve, reject){\n            resolve()\n        }).then(() =&gt; console.log(&quot;c2&quot;))\n    });\n</code></pre><p>这里我们强制了1秒的执行耗时，这样，我们可以确保任务c2是在d之后被添加到任务队列。</p><p>我们可以看到，即使耗时一秒的c1执行完毕，再enque的c2，仍然先于d执行了，这很好地解释了微任务优先的原理。</p><p>通过一系列的实验，我们可以总结一下如何分析异步执行的顺序：</p><ul>\n<li>首先我们分析有多少个宏任务；</li>\n<li>在每个宏任务中，分析有多少个微任务；</li>\n<li>根据调用次序，确定宏任务中的微任务执行次序；</li>\n<li>根据宏任务的触发规则和调用次序，确定宏任务的执行次序；</li>\n<li>确定整个顺序。</li>\n</ul><p>我们再来看一个稍微复杂的例子：</p><pre><code>    function sleep(duration) {\n        return new Promise(function(resolve, reject) {\n            console.log(&quot;b&quot;);\n            setTimeout(resolve,duration);\n        })\n    }\n    console.log(&quot;a&quot;);\n    sleep(5000).then(()=&gt;console.log(&quot;c&quot;));\n</code></pre><p>这是一段非常常用的封装方法，利用Promise把setTimeout封装成可以用于异步的函数。</p><p>我们首先来看，setTimeout把整个代码分割成了2个宏观任务，这里不论是5秒还是0秒，都是一样的。</p><p>第一个宏观任务中，包含了先后同步执行的 console.log(“a”); 和 console.log(“b”);。</p><p>setTimeout后，第二个宏观任务执行调用了resolve，然后then中的代码异步得到执行，所以调用了console.log(“c”)，最终输出的顺序才是： a b c。</p><p>Promise是JavaScript中的一个定义，但是实际编写代码时，我们可以发现，它似乎并不比回调的方式书写更简单，但是从ES6开始，我们有了async/await，这个语法改进跟Promise配合，能够有效地改善代码结构。</p><h2>新特性：async/await</h2><p>async/await是ES2016新加入的特性，它提供了用for、if等代码结构来编写异步的方式。它的运行时基础是Promise，面对这种比较新的特性，我们先来看一下基本用法。</p><p>async函数必定返回Promise，我们把所有返回Promise的函数都可以认为是异步函数。</p><p>async函数是一种特殊语法，特征是在function关键字之前加上async关键字，这样，就定义了一个async函数，我们可以在其中使用await来等待一个Promise。</p><pre><code>function sleep(duration) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(resolve,duration);\n    })\n}\nasync function foo(){\n    console.log(&quot;a&quot;)\n    await sleep(2000)\n    console.log(&quot;b&quot;)\n}\n</code></pre><p>这段代码利用了我们之前定义的sleep函数。在异步函数foo中，我们调用sleep。</p><p>async函数强大之处在于，它是可以嵌套的。我们在定义了一批原子操作的情况下，可以利用async函数组合出新的async函数。</p><pre><code>function sleep(duration) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(resolve,duration);\n    })\n}\nasync function foo(name){\n    await sleep(2000)\n    console.log(name)\n}\nasync function foo2(){\n    await foo(&quot;a&quot;);\n    await foo(&quot;b&quot;);\n}\n</code></pre><p>这里foo2用await调用了两次异步函数foo，可以看到，如果我们把sleep这样的异步操作放入某一个框架或者库中，使用者几乎不需要了解Promise的概念即可进行异步编程了。</p><p>此外，generator/iterator也常常被跟异步一起来讲，我们必须说明 generator/iterator 并非异步代码，只是在缺少async/await的时候，一些框架（最著名的要数co）使用这样的特性来模拟async/await。</p><p>但是generator并非被设计成实现异步，所以有了async/await之后，generator/iterator来模拟异步的方法应该被废弃。</p><h2>结语</h2><p>在今天的文章里，我们学习了JavaScript执行部分的知识，首先我们学习了JavaScript的宏观任务和微观任务相关的知识。我们把宿主发起的任务称为宏观任务，把JavaScript引擎发起的任务称为微观任务。许多的微观任务的队列组成了宏观任务。</p><p>除此之外，我们还展开介绍了用Promise来添加微观任务的方式，并且介绍了async/await这个语法的改进。</p><p>最后，留给你一个小练习：我们现在要实现一个红绿灯，把一个圆形div按照绿色3秒，黄色1秒，红色2秒循环改变背景色，你会怎样编写这个代码呢？欢迎你留言讨论。</p><p></p>',
        article_title:
          "JavaScript执行（一）：Promise里的代码为什么比setTimeout先执行？",
      },
      {
        title: "JavaScript执行（二）：闭包和执行上下文到底是怎么回事？",
        herf: "https://time.geekbang.org/column/article/83302",
        id: "83302",
        content:
          '<p>你好，我是winter。</p><p>在上一课，我们了解了JavaScript执行中最粗粒度的任务：传给引擎执行的代码段。并且，我们还根据“由JavaScript引擎发起”还是“由宿主发起”，分成了宏观任务和微观任务，接下来我们继续去看一看更细的执行粒度。</p><p>一段JavaScript代码可能会包含函数调用的相关内容，从今天开始，我们就用两节课的时间来了解一下函数的执行。</p><p>我们今天要讲的知识在网上有不同的名字，比较常见的可能有：</p><ul>\n<li>闭包；</li>\n<li>作用域链；</li>\n<li>执行上下文；</li>\n<li>this值。</li>\n</ul><p>实际上，尽管它们是表示不同的意思的术语，所指向的几乎是同一部分知识，那就是函数执行过程相关的知识。我们可以简单看一下图。</p><p><img src="https://static001.geekbang.org/resource/image/68/52/68f50c00d475a7d6d8c7eef6a91b2152.png" alt=""></p><p>看着也许会有点晕，别着急，我会和你共同理一下它们之间的关系。</p><p>当然，除了让你理解函数执行过程的知识，理清这些概念也非常重要。所以我们先来讲讲这个有点复杂的概念：闭包。</p><h2>闭包</h2><p>闭包翻译自英文单词closure，这是个不太好翻译的词，在计算机领域，它就有三个完全不相同的意义：编译原理中，它是处理语法产生式的一个步骤；计算几何中，它表示包裹平面点集的凸多边形（翻译作凸包）；而在编程语言领域，它表示一种函数。</p><p>闭包这个概念第一次出现在1964年的《The Computer Journal》上，由P. J. Landin在《The mechanical evaluation of expressions》一文中提出了applicative expression和closure的概念。</p><!-- [[[read_end]]] --><p><img src="https://static001.geekbang.org/resource/image/9b/0c/9b6c6693afe654b4cfdbf16852b82a0c.png" alt=""></p><p>在上世纪60年代，主流的编程语言是基于lambda演算的函数式编程语言，所以这个最初的闭包定义，使用了大量的函数式术语。一个不太精确的描述是“带有一系列信息的λ表达式”。对函数式语言而言，λ表达式其实就是函数。</p><p>我们可以这样简单理解一下，闭包其实只是一个绑定了执行环境的函数，这个函数并不是印在书本里的一条简单的表达式，闭包与普通函数的区别是，它携带了执行的环境，就像人在外星中需要自带吸氧的装备一样，这个函数也带有在程序中生存的环境。</p><p>这个古典的闭包定义中，闭包包含两个部分。</p><ul>\n<li>环境部分\n<ul>\n<li>环境</li>\n<li>标识符列表</li>\n</ul>\n</li>\n<li>表达式部分</li>\n</ul><p>当我们把视角放在JavaScript的标准中，我们发现，标准中并没有出现过closure这个术语，但是，我们却不难根据古典定义，在JavaScript中找到对应的闭包组成部分。</p><ul>\n<li>环境部分\n<ul>\n<li>环境：函数的词法环境（执行上下文的一部分）</li>\n<li>标识符列表：函数中用到的未声明的变量</li>\n</ul>\n</li>\n<li>表达式部分：函数体</li>\n</ul><p>至此，我们可以认为，JavaScript中的函数完全符合闭包的定义。它的环境部分是函数词法环境部分组成，它的标识符列表是函数中用到的未声明变量，它的表达式部分就是函数体。</p><p>这里我们容易产生一个常见的概念误区，有些人会把JavaScript执行上下文，或者作用域（Scope，ES3中规定的执行上下文的一部分）这个概念当作闭包。</p><p>实际上JavaScript中跟闭包对应的概念就是“函数”，可能是这个概念太过于普通，跟闭包看起来又没什么联系，所以大家才不自觉地把这个概念对应到了看起来更特别的“作用域”吧（其实我早年也是这么理解闭包，直到后来被朋友纠正，查了资料才改正过来）。</p><h3>执行上下文：执行的基础设施</h3><p>相比普通函数，JavaScript函数的主要复杂性来自于它携带的“环境部分”。当然，发展到今天的JavaScript，它所定义的环境部分，已经比当初经典的定义复杂了很多。</p><p>JavaScript中与闭包“环境部分”相对应的术语是“词法环境”，但是JavaScript函数比λ函数要复杂得多，我们还要处理this、变量声明、with等等一系列的复杂语法，λ函数中可没有这些东西，所以，在JavaScript的设计中，词法环境只是JavaScript执行上下文的一部分。</p><p>JavaScript标准把一段代码（包括函数），执行所需的所有信息定义为：“执行上下文”。</p><p>因为这部分术语经历了比较多的版本和社区的演绎，所以定义比较混乱，这里我们先来理一下JavaScript中的概念。</p><p><strong>执行上下文在ES3中</strong>，包含三个部分。</p><ul>\n<li>scope：作用域，也常常被叫做作用域链。</li>\n<li>variable object：变量对象，用于存储变量的对象。</li>\n<li>this value：this值。</li>\n</ul><p><strong>在ES5中</strong>，我们改进了命名方式，把执行上下文最初的三个部分改为下面这个样子。</p><ul>\n<li>lexical environment：词法环境，当获取变量时使用。</li>\n<li>variable environment：变量环境，当声明变量时使用。</li>\n<li>this value：this值。</li>\n</ul><p><strong>在ES2018中</strong>，执行上下文又变成了这个样子，this值被归入lexical environment，但是增加了不少内容。</p><ul>\n<li>lexical environment：词法环境，当获取变量或者this值时使用。</li>\n<li>variable environment：变量环境，当声明变量时使用。</li>\n<li>code evaluation state：用于恢复代码执行位置。</li>\n<li>Function：执行的任务是函数时使用，表示正在被执行的函数。</li>\n<li>ScriptOrModule：执行的任务是脚本或者模块时使用，表示正在被执行的代码。</li>\n<li>Realm：使用的基础库和内置对象实例。</li>\n<li>Generator：仅生成器上下文有这个属性，表示当前生成器。</li>\n</ul><p>我们在这里介绍执行上下文的各个版本定义，是考虑到你可能会从各种网上的文章中接触这些概念，如果不把它们理清楚，我们就很难分辨对错。如果是我们自己使用，我建议统一使用最新的ES2018中规定的术语定义。</p><p>尽管我们介绍了这些定义，但我并不打算按照JavaScript标准的思路，从实现的角度去介绍函数的执行过程，这是不容易被理解的。</p><p>我想试着从代码实例出发，跟你一起推导函数执行过程中需要哪些信息，它们又对应着执行上下文中的哪些部分。</p><p>比如，我们看以下的这段JavaScript代码：</p><pre><code>var b = {}\nlet c = 1\nthis.a = 2;\n</code></pre><p>要想正确执行它，我们需要知道以下信息：</p><ol>\n<li>var 把 b 声明到哪里；</li>\n<li>b 表示哪个变量；</li>\n<li>b 的原型是哪个对象；</li>\n<li>let 把 c 声明到哪里；</li>\n<li>this 指向哪个对象。</li>\n</ol><p>这些信息就需要执行上下文来给出了，这段代码出现在不同的位置，甚至在每次执行中，会关联到不同的执行上下文，所以，同样的代码会产生不一样的行为。</p><p>在这两篇文章中，我会基本覆盖执行上下文的组成部分，本篇我们先讲var声明与赋值，let，realm三个特性来分析上下文提供的信息，分析执行上下文中提供的信息。</p><h3>var 声明与赋值</h3><p>我们来分析一段代码：</p><pre><code>var b = 1\n</code></pre><p>通常我们认为它声明了b，并且为它赋值为1，var声明作用域函数执行的作用域。也就是说，var会穿透for 、if等语句。</p><p>在只有var，没有let的旧JavaScript时代，诞生了一个技巧，叫做：立即执行的函数表达式（IIFE），通过创建一个函数，并且立即执行，来构造一个新的域，从而控制var的范围。</p><p>由于语法规定了function关键字开头是函数声明，所以要想让函数变成函数表达式，我们必须得加点东西，最常见的做法是加括号。</p><pre><code>(function(){\n    var a;\n    //code\n}());\n\n\n(function(){\n    var a;\n    //code\n})();\n</code></pre><p>但是，括号有个缺点，那就是如果上一行代码不写分号，括号会被解释为上一行代码最末的函数调用，产生完全不符合预期，并且难以调试的行为，加号等运算符也有类似的问题。所以一些推荐不加分号的代码风格规范，会要求在括号前面加上分号。</p><pre><code>;(function(){\n    var a;\n    //code\n}())\n\n\n;(function(){\n    var a;\n    //code\n})()\n</code></pre><p>我比较推荐的写法是使用void关键字。也就是下面的这种形式。</p><pre><code>void function(){\n    var a;\n    //code\n}();\n</code></pre><p>这有效避免了语法问题，同时，语义上void运算表示忽略后面表达式的值，变成undefined，我们确实不关心IIFE的返回值，所以语义也更为合理。</p><p>值得特别注意的是，有时候var的特性会导致声明的变量和被赋值的变量是两个b，JavaScript中有特例，那就是使用with的时候：</p><pre><code>var b;\nvoid function(){\n    var env = {b:1};\n    b = 2;\n    console.log(&quot;In function b:&quot;, b);\n    with(env) {\n        var b = 3;\n        console.log(&quot;In with b:&quot;, b);\n    }\n}();\nconsole.log(&quot;Global b:&quot;, b);\n</code></pre><p>在这个例子中，我们利用立即执行的函数表达式（IIFE）构造了一个函数的执行环境，并且在里面使用了我们一开头的代码。</p><p>可以看到，在Global function with三个环境中，b的值都不一样，而在function环境中，并没有出现var b，这说明with内的var b作用到了function这个环境当中。</p><p>var b = {} 这样一句对两个域产生了作用，从语言的角度是个非常糟糕的设计，这也是一些人坚定地反对在任何场景下使用with的原因之一。</p><h3>let</h3><p>let是 ES6开始引入的新的变量声明模式，比起var的诸多弊病，let做了非常明确的梳理和规定。</p><p>为了实现let，JavaScript在运行时引入了块级作用域。也就是说，在let出现之前，JavaScript的 if for 等语句皆不产生作用域。</p><p>我简单统计了下，以下语句会产生let使用的作用域：</p><ul>\n<li>for；</li>\n<li>if；</li>\n<li>switch；</li>\n<li>try/catch/finally。</li>\n</ul><h3>Realm</h3><p>在最新的标准（9.0）中，JavaScript引入了一个新概念Realm，它的中文意思是“国度”“领域”“范围”。这个英文的用法就有点比喻的意思，几个翻译都不太适合JavaScript语境，所以这里就不翻译啦。</p><p>我们继续来看这段代码：</p><pre><code>var b = {}\n</code></pre><p>在 ES2016 之前的版本中，标准中甚少提及{}的原型问题。但在实际的前端开发中，通过iframe等方式创建多window环境并非罕见的操作，所以，这才促成了新概念Realm的引入。</p><p>Realm中包含一组完整的内置对象，而且是复制关系。</p><p>对不同Realm中的对象操作，会有一些需要格外注意的问题，比如 instanceOf 几乎是失效的。</p><p>以下代码展示了在浏览器环境中获取来自两个Realm的对象，它们跟本土的Object做instanceOf时会产生差异：</p><pre><code>var iframe = document.createElement(\'iframe\')\ndocument.documentElement.appendChild(iframe)\niframe.src=&quot;javascript:var b = {};&quot;\n\nvar b1 = iframe.contentWindow.b;\nvar b2 = {};\n\nconsole.log(typeof b1, typeof b2); //object object\n\nconsole.log(b1 instanceof Object, b2 instanceof Object); //false true\n</code></pre><p>可以看到，由于b1、 b2由同样的代码“ {} ”在不同的Realm中执行，所以表现出了不同的行为。</p><h2>结语</h2><p>在今天的课程中，我帮你梳理了一些概念：有编程语言的概念闭包，也有各个版本中的JavaScript标准中的概念：执行上下文、作用域、this值等等。</p><p>之后我们又从代码的角度，分析了一些执行上下文中所需要的信息，并从<code>var</code>、<code>let</code>、对象字面量等语法中，推导出了词法作用域、变量作用域、Realm\b的设计。</p><p>最后留给你一个问题：你喜欢使用let还是var？听过今天的课程，你的想法是否有改变呢？为什么？</p><p></p>',
        article_title: "JavaScript执行（二）：闭包和执行上下文到底是怎么回事？",
      },
      {
        title: "JavaScript执行（三）：你知道现在有多少种函数吗？",
        herf: "https://time.geekbang.org/column/article/83719",
        id: "83719",
        content:
          '<p>在前一篇文章中，我们大致了解了执行上下文是什么，也知道了任何语句的执行都会依赖特定的上下文。</p><p>一旦上下文被切换，整个语句的效果可能都会发生改变。那么，切换上下文的时机就显得非常重要了。</p><p>在JavaScript，切换上下文最主要的场景是函数调用。在这一课，我们就来讲讲函数调用切换上下文的事情。我们在讲函数调用之前，首先来认识一下函数家族。</p><h2>函数</h2><p>在ES2018中，函数已经是一个很复杂的体系了，我在这里整理了一下。</p><p><strong>第一种，普通函数：用function关键字定义的函数。</strong></p><p>示例：</p><pre><code>function foo(){\n    // code\n}\n</code></pre><p><strong>第二种，箭头函数：用 =&gt; 运算符定义的函数。</strong></p><p>示例:</p><pre><code>const foo = () =&gt; {\n    // code\n}\n</code></pre><p><strong>第三种，方法：在class中定义的函数。</strong></p><p>示例：</p><pre><code>class C {\n    foo(){\n        //code\n    }\n}\n</code></pre><p><strong>第四种，生成器函数：用function * 定义的函数。</strong></p><p>示例：</p><pre><code>function* foo(){\n    // code\n}\n</code></pre><p><strong>第五种，类：用class定义的类，实际上也是函数。</strong></p><p>示例：</p><pre><code>class Foo {\n    constructor(){\n        //code\n    }\n}\n</code></pre><p><strong>第六/七/八种，异步函数：普通函数、箭头函数和生成器函数加上async关键字。</strong></p><p>示例：</p><pre><code>async function foo(){\n    // code\n}\nconst foo = async () =&gt; {\n    // code\n}\nasync function foo*(){\n    // code\n}\n</code></pre><p>ES6以来，大量加入的新语法极大地方便了我们编程的同时，也增加了很多我们理解的心智负担。要想认识这些函数的执行上下文切换，我们必须要对它们行为上的区别有所了解。</p><!-- [[[read_end]]] --><p>对普通变量而言，这些函数并没有本质区别，都是遵循了“继承定义时环境”的规则，它们的一个行为差异在于this关键字。</p><p>那么，this关键字是什么呢，我们一起来看一看。</p><h2>this关键字的行为</h2><p>this是JavaScript中的一个关键字，它的使用方法类似于一个变量（但是this跟变量的行为有很多不同，上一节课我们讲了一些普通变量的行为和机制，也就是var声明和赋值、let的内容）。</p><p><strong>this是执行上下文中很重要的一个组成部分。同一个函数调用方式不同，得到的this值也不同</strong>，我们看一个例子：</p><pre><code>function showThis(){\n    console.log(this);\n}\n\nvar o = {\n    showThis: showThis\n}\n\nshowThis(); // global\no.showThis(); // o\n</code></pre><p>在这个例子中，我们定义了函数showThis，我们把它赋值给一个对象o的属性，然后尝试分别使用两个引用来调用同一个函数，结果得到了不同的this值。</p><p>普通函数的this值由“调用它所使用的引用”决定，其中奥秘就在于：我们获取函数的表达式，它实际上返回的并非函数本身，而是一个Reference类型（记得我们在类型一章讲过七种标准类型吗，正是其中之一）。</p><p>Reference类型由两部分组成：一个对象和一个属性值。不难理解 o.showThis 产生的Reference类型，即由对象o和属性“showThis”构成。</p><p>当做一些算术运算（或者其他运算时），Reference类型会被解引用，即获取真正的值（被引用的内容）来参与运算，而类似函数调用、delete等操作，都需要用到Reference类型中的对象。</p><p>在这个例子中，Reference类型中的对象被当作this值，传入了执行函数时的上下文当中。</p><p>至此，我们对this的解释已经非常清晰了：<strong>调用函数时使用的引用，决定了函数执行时刻的this值。</strong></p><p>实际上从运行时的角度来看，this跟面向对象毫无关联，它是与函数调用时使用的表达式相关。</p><p>这个设计来自JavaScript早年，通过这样的方式，巧妙地模仿了Java的语法，但是仍然保持了纯粹的“无类”运行时设施。</p><p>如果，我们把这个例子稍作修改，换成箭头函数，结果就不一样了：</p><pre><code>const showThis = () =&gt; {\n    console.log(this);\n}\n\nvar o = {\n    showThis: showThis\n}\n\nshowThis(); // global\no.showThis(); // global\n</code></pre><p><strong>我们看到，改为箭头函数后，不论用什么引用来调用它，都不影响它的this值。</strong></p><p>接下来我们看看“方法”，它的行为又不一样了：</p><pre><code>class C {\n    showThis() {\n        console.log(this);\n    }\n}\nvar o = new C();\nvar showThis = o.showThis;\n\nshowThis(); // undefined\no.showThis(); // o\n</code></pre><p>这里我们创建了一个类C，并且实例化出对象o，再把o的方法赋值给了变量showThis。</p><p>这时候，我们使用showThis这个引用去调用方法时，得到了undefined。</p><p>所以，在方法中，我们看到this的行为也不太一样，它得到了undefined的结果。</p><p>按照我们上面的方法，不难验证出：生成器函数、异步生成器函数和异步普通函数跟普通函数行为是一致的，异步箭头函数与箭头函数行为是一致的。</p><h2>this关键字的机制</h2><p>说完了this行为，我们再来简单谈谈在JavaScript内部，实现this这些行为的机制，让你对这部分知识有一个大概的认知。</p><p>函数能够引用定义时的变量，如上文分析，函数也能记住定义时的this，因此，函数内部必定有一个机制来保存这些信息。</p><p>在JavaScript标准中，为函数规定了用来保存定义时上下文的私有属性[[Environment]]。</p><p>当一个函数执行时，会创建一条新的执行环境记录，记录的外层词法环境（outer lexical environment）会被设置成函数的[[Environment]]。</p><p>这个动作就是<strong>切换上下文</strong>了，我们假设有这样的代码：</p><pre><code>var a = 1;\nfoo();\n\n在别处定义了foo：\n\nvar b = 2;\nfunction foo(){\n    console.log(b); // 2\n    console.log(a); // error\n}\n</code></pre><p>这里的foo能够访问b（定义时词法环境），却不能访问a（执行时的词法环境），这就是执行上下文的切换机制了。</p><p>JavaScript用一个栈来管理执行上下文，这个栈中的每一项又包含一个链表。如下图所示：</p><p><img src="https://static001.geekbang.org/resource/image/e8/31/e8d8e96c983a832eb646d6c17ff3df31.jpg" alt=""></p><p>当函数调用时，会入栈一个新的执行上下文，函数调用结束时，执行上下文被出栈。</p><p>而this则是一个更为复杂的机制，JavaScript标准定义了 [[thisMode]] 私有属性。</p><p>[[thisMode]] 私有属性有三个取值。</p><ul>\n<li>lexical：表示从上下文中找this，这对应了箭头函数。</li>\n<li>global：表示当this为undefined时，取全局对象，对应了普通函数。</li>\n<li>strict：当严格模式时使用，this严格按照调用时传入的值，可能为null或者undefined。</li>\n</ul><p>非常有意思的是，方法的行为跟普通函数有差异，恰恰是因为class设计成了默认按strict模式执行。</p><p>我们可以用strict达成与上一节中方法的例子一样的效果:</p><pre><code>&quot;use strict&quot;\nfunction showThis(){\n    console.log(this);\n}\n\nvar o = {\n    showThis: showThis\n}\n\nshowThis(); // undefined\no.showThis(); // o\n</code></pre><p>函数创建新的执行上下文中的词法环境记录时，会根据[[thisMode]]来标记新纪录的[[ThisBindingStatus]]私有属性。</p><p>代码执行遇到this时，会逐层检查当前词法环境记录中的[[ThisBindingStatus]]，当找到有this的环境记录时获取this的值。</p><p>这样的规则的实际效果是，嵌套的箭头函数中的代码都指向外层this，例如：</p><pre><code>var o = {}\no.foo = function foo(){\n    console.log(this);\n    return () =&gt; {\n        console.log(this);\n        return () =&gt; console.log(this);\n    }\n}\n\no.foo()()(); // o, o, o\n</code></pre><p>这个例子中，我们定义了三层嵌套的函数，最外层为普通函数，两层都是箭头函数。</p><p>这里调用三个函数，获得的this值是一致的，都是对象o。</p><p>JavaScript还提供了一系列函数的内置方法来操纵this值，下面我们来了解一下。</p><h2>操作this的内置函数</h2><p>Function.prototype.call 和 Function.prototype.apply 可以指定函数调用时传入的this值，示例如下：</p><pre><code>function foo(a, b, c){\n    console.log(this);\n    console.log(a, b, c);\n}\nfoo.call({}, 1, 2, 3);\nfoo.apply({}, [1, 2, 3]);\n</code></pre><p>这里call和apply作用是一样的，只是传参方式有区别。</p><p>此外，还有 Function.prototype.bind 它可以生成一个绑定过的函数，这个函数的this值固定了参数：</p><pre><code>function foo(a, b, c){\n    console.log(this);\n    console.log(a, b, c);\n}\nfoo.bind({}, 1, 2, 3)();\n</code></pre><p>有趣的是，call、bind和apply用于不接受this的函数类型如箭头、class都不会报错。</p><p>这时候，它们无法实现改变this的能力，但是可以实现传参。</p><h2>结语</h2><p>在这一节课程中，我们认识了ES2018中规定的各种函数，我一共简单介绍了8种函数。</p><p>我们围绕this这个中心，介绍了函数的执行上下文切换机制。同时我们还讲解了this中的一些相关知识。包括了操作this的内置函数。</p><p>最后，留给你一个问题，你在日常开发中用过哪些函数类型呢？欢迎给我留言，我们一起讨论。</p><hr></hr><h2>补充阅读：new与this</h2><p>我们在之前的对象部分已经讲过new的执行过程，我们再来看一下：</p><ul>\n<li>以构造器的 prototype 属性（注意与私有字段[[prototype]]的区分）为原型，创建新对象；</li>\n<li>将 this 和调用参数传给构造器，执行；</li>\n<li>如果构造器返回的是对象，则返回，否则返回第一步创建的对象。</li>\n</ul><p>显然，通过new调用函数，跟直接调用的this取值有明显区别。那么我们今天讲的这些函数跟new搭配又会产生什么效果呢？</p><p>这里我整理了一张表：</p><p><img src="https://static001.geekbang.org/resource/image/6a/da/6a9f0525b713a903c6c94f52afaea3da.png" alt=""></p><p>我们可以看到，仅普通函数和类能够跟new搭配使用，这倒是给我们省去了不少麻烦。</p><p></p>',
        article_title: "JavaScript执行（三）：你知道现在有多少种函数吗？",
      },
      {
        title: "JavaScript执行（四）：try里面放return，finally还会执行吗？",
        herf: "https://time.geekbang.org/column/article/83860",
        id: "83860",
        content:
          '<p>你好，我是winter。</p><p>在前面几篇文章中，我们已经了解了关于执行上下文、作用域、闭包之间的关系。</p><p>今天，我们则要说一说更为细节的部分：语句。</p><p>语句是任何编程语言的基础结构，与JavaScript对象一样，JavaScript语句同样具有“看起来很像其它语言，但是其实一点都不一样”的特点。</p><p>我们比较常见的语句包括变量声明、表达式、条件、循环等，这些都是大家非常熟悉的东西，对于它们的行为，我在这里就不赘述了。</p><p>为了了解JavaScript语句有哪些特别之处，首先我们要看一个不太常见的例子，我会通过这个例子，来向你介绍JavaScript语句执行机制涉及的一种基础类型：Completion类型。</p><h2>Completion类型</h2><p>我们来看一个例子。在函数foo中，使用了一组try语句。我们可以先来做一个小实验，在try中有return语句，finally中的内容还会执行吗？我们来看一段代码。</p><pre><code>function foo(){\n  try{\n    return 0;\n  } catch(err) {\n\n  } finally {\n    console.log(&quot;a&quot;)\n  }\n}\n\nconsole.log(foo());\n</code></pre><p>通过实际试验，我们可以看到，finally确实执行了，而且return语句也生效了，foo()返回了结果0。</p><p>虽然return执行了，但是函数并没有立即返回，又执行了finally里面的内容，这样的行为违背了很多人的直觉。</p><!-- [[[read_end]]] --><p>如果在这个例子中，我们在finally中加入return语句，会发生什么呢？</p><pre><code>function foo(){\n  try{\n    return 0;\n  } catch(err) {\n\n  } finally {\n    return 1;\n  }\n}\n\nconsole.log(foo());\n</code></pre><p>通过实际执行，我们看到，finally中的return “覆盖”了try中的return。在一个函数中执行了两次return，这已经超出了很多人的常识，也是其它语言中不会出现的一种行为。</p><p>面对如此怪异的行为，我们当然可以把它作为一个孤立的知识去记忆，但是实际上，这背后有一套机制在运作。</p><p>这一机制的基础正是JavaScript语句执行的完成状态，我们用一个标准类型来表示：Completion Record（我在类型一节提到过，Completion Record用于描述异常、跳出等语句执行过程）。</p><p>Completion Record 表示一个语句执行完之后的结果，它有三个字段：</p><ul>\n<li>[[type]] 表示完成的类型，有break continue return throw和normal几种类型；</li>\n<li>[[value]] 表示语句的返回值，如果语句没有，则是empty；</li>\n<li>[[target]] 表示语句的目标，通常是一个JavaScript标签（标签在后文会有介绍）。</li>\n</ul><p>JavaScript正是依靠语句的 Completion Record类型，方才可以在语句的复杂嵌套结构中，实现各种控制。接下来我们要来了解一下JavaScript使用Completion Record类型，控制语句执行的过程。</p><p>首先我们来看看语句有几种分类。</p><p><img src="https://static001.geekbang.org/resource/image/98/d5/98ce53be306344c018cddd6c083392d5.jpg" alt=""></p><h2>普通的语句</h2><p>在JavaScript中，我们把不带控制能力的语句称为普通语句。普通语句有下面几种。</p><ul>\n<li>声明类语句\n<ul>\n<li>var声明</li>\n<li>const声明</li>\n<li>let声明</li>\n<li>函数声明</li>\n<li>类声明</li>\n</ul>\n</li>\n<li>表达式语句</li>\n<li>空语句</li>\n<li>debugger语句</li>\n</ul><p>这些语句在执行时，从前到后顺次执行（我们这里先忽略var和函数声明的预处理机制），没有任何分支或者重复执行逻辑。</p><p>普通语句执行后，会得到 [[type]] 为 normal 的 Completion Record，JavaScript引擎遇到这样的Completion Record，会继续执行下一条语句。</p><p>这些语句中，只有表达式语句会产生 [[value]]，当然，从引擎控制的角度，这个value并没有什么用处。</p><p>如果你经常使用Chrome自带的调试工具，可以知道，输入一个表达式，在控制台可以得到结果，但是在前面加上var，就变成了undefined。</p><p><img src="https://static001.geekbang.org/resource/image/a3/67/a35801b1b82654d17e413e51b340d767.png" alt=""></p><p>Chrome控制台显示的正是语句的Completion Record的[[value]]。</p><h2>语句块</h2><p>介绍完了普通语句，我们再来介绍一个比较特殊的语句：语句块。</p><p>语句块就是拿大括号括起来的一组语句，它是一种语句的复合结构，可以嵌套。</p><p>语句块本身并不复杂，我们需要注意的是语句块内部的语句的Completion Record的[[type]] 如果不为 normal，会打断语句块后续的语句执行。</p><p>比如我们考虑，一个[[type]]为return的语句，出现在一个语句块中的情况。</p><p>从语句的这个type中，我们大概可以猜到它由哪些特定语句产生，我们就来说说最开始的例子中的 return。</p><p>return语句可能产生return或者throw类型的Completion Record。我们来看一个例子。</p><p>先给出一个内部为普通语句的语句块：</p><pre><code>{\n  var i = 1; // normal, empty, empty\n  i ++; // normal, 1, empty\n  console.log(i) //normal, undefined, empty\n} // normal, undefined, empty\n</code></pre><p>在每一行的注释中，我给出了语句的Completion Record。</p><p>我们看到，在一个block中，如果每一个语句都是normal类型，那么它会顺次执行。接下来我们加入return试试看。</p><pre><code>{\n  var i = 1; // normal, empty, empty\n  return i; // return, 1, empty\n  i ++; \n  console.log(i)\n} // return, 1, empty\n</code></pre><p>但是假如我们在block中插入了一条return语句，产生了一个非normal记录，那么整个block会成为非normal。这个结构就保证了非normal的完成类型可以穿透复杂的语句嵌套结构，产生控制效果。</p><p>接下来我们就具体讲讲控制类语句。</p><h2>控制型语句</h2><p>控制型语句带有 if、switch关键字，它们会对不同类型的Completion Record产生反应。</p><p>控制类语句分成两部分，一类是对其内部造成影响，如if、switch、while/for、try。</p><p>另一类是对外部造成影响如break、continue、return、throw，这两类语句的配合，会产生控制代码执行顺序和执行逻辑的效果，这也是我们编程的主要工作。</p><p>一般来说， for/while - break/continue 和 try - throw 这样比较符合逻辑的组合，是大家比较熟悉的，但是，实际上，我们需要控制语句跟break 、continue 、return 、throw四种类型与控制语句两两组合产生的效果。</p><p><img src="https://static001.geekbang.org/resource/image/77/d3/7760027d7ee09bdc8ec140efa9caf1d3.png" alt=""></p><p>通过这个表，我们不难发现知识的盲点，也就是我们最初的的case中的try和return的组合了。</p><p>因为finally中的内容必须保证执行，所以 try/catch执行完毕，即使得到的结果是非normal型的完成记录，也必须要执行finally。</p><p>而当finally执行也得到了非normal记录，则会使finally中的记录作为整个try结构的结果。</p><h2>带标签的语句</h2><p>前文我重点讲了type在语句控制中的作用，接下来我们重点来讲一下最后一个字段：target，这涉及了JavaScript中的一个语法，带标签的语句。</p><p>实际上，任何JavaScript语句是可以加标签的，在语句前加冒号即可：</p><pre><code>    firstStatement: var i = 1;\n</code></pre><p>大部分时候，这个东西类似于注释，没有任何用处。唯一有作用的时候是：与完成记录类型中的target相配合，用于跳出多层循环。</p><pre><code>    outer: while(true) {\n      inner: while(true) {\n          break outer;\n      }\n    }\n    console.log(&quot;finished&quot;)\n</code></pre><p>break/continue 语句如果后跟了关键字，会产生带target的完成记录。一旦完成记录带了target，那么只有拥有对应label的循环语句会消费它。</p><h2>结语</h2><p>我们以Completion Record类型为线索，为你讲解了JavaScript语句执行的原理。</p><p>因为JavaScript语句存在着嵌套关系，所以执行过程实际上主要在一个树形结构上进行， 树形结构的每一个节点执行后产生Completion Record，根据语句的结构和Completion Record，JavaScript实现了各种分支和跳出逻辑。</p><p>你遇到哪些语句中的执行的实际效果，是跟你想象的有所出入呢，你可以给我留言，我们一起讨论。</p><p></p>',
        article_title:
          "JavaScript执行（四）：try里面放return，finally还会执行吗？",
      },
      {
        title: "JavaScript词法：为什么12.toString会报错？",
        herf: "https://time.geekbang.org/column/article/86400",
        id: "86400",
        content:
          '<p>你好，我是winter。</p><p>在前面的文章中，我们已经从运行时的角度了解过JavaScript的知识内容，在接下来的几节课，我们来了解一下JavaScript的文法部分。</p><p>文法是编译原理中对语言的写法的一种规定，一般来说，文法分成词法和语法两种。</p><p>词法规定了语言的最小语义单元：token，可以翻译成“标记”或者“词”，在我的专栏文章中，我统一把token翻译成词。</p><p>从字符到词的整个过程是没有结构的，只要符合词的规则，就构成词，一般来说，词法设计不会包含冲突。词法分析技术上可以使用状态机或者正则表达式来进行，我们的课程主要是学习词法，关于它们实现的细节就不多谈了。</p><h2>概述</h2><p>我们先来看一看JavaScript的词法定义。JavaScript源代码中的输入可以这样分类：</p><ul>\n<li>WhiteSpace 空白字符</li>\n<li>LineTerminator 换行符</li>\n<li>Comment 注释</li>\n<li>Token 词\n<ul>\n<li>IdentifierName 标识符名称，典型案例是我们使用的变量名，注意这里关键字也包含在内了。</li>\n<li>Punctuator 符号，我们使用的运算符和大括号等符号。</li>\n<li>NumericLiteral 数字直接量，就是我们写的数字。</li>\n<li>StringLiteral 字符串直接量，就是我们用单引号或者双引号引起来的直接量。</li>\n<li>Template 字符串模板，用反引号<code>`</code> 括起来的直接量。</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><p>这个设计符合比较通用的编程语言设计方式，不过，JavaScript中有一些特别之处，我下面就来讲讲特别在哪里。</p><p>首先是除法和正则表达式冲突问题。我们都知道，JavaScript不但支持除法运算符“ / ”和“ /= ”，还支持用斜杠括起来的正则表达式“ /abc/ ”。</p><p>但是，这时候对词法分析来说，其实是没有办法处理的，所以JavaScript的解决方案是定义两组词法，然后靠语法分析传一个标志给词法分析器，让它来决定使用哪一套词法。</p><p>JavaScript词法的另一个特别设计是字符串模板，模板语法大概是这样的：</p><pre><code class="language-JavaScript">`Hello, ${name}`\n</code></pre><p>理论上，“ ${ } ”内部可以放任何JavaScript表达式代码，而这些代码是以“ } ” 结尾的，也就是说，这部分词法不允许出现“ } ”运算符。</p><p>是否允许“ } ”的两种情况，与除法和正则表达式的两种情况相乘就是四种词法定义，所以你在JavaScript标准中，可以看到四种定义：</p><ul>\n<li>InputElementDiv；</li>\n<li>InputElementRegExp；</li>\n<li>InputElementRegExpOrTemplateTail；</li>\n<li>InputElementTemplateTail。</li>\n</ul><p>为了解决这两个问题，标准中还不得不把除法、正则表达式直接量和“ } ”从token中单独抽出来，用词上，也把原本的 Token 改为 CommonToken。</p><p>但是我认为，从理解的角度上出发，我们不应该受到影响，所以在本课，我们依然把它们归类到token来理解。</p><p>对一般的语言的词法分析过程来说，都会丢弃除了token之外的输入，但是对JavaScript来说，不太一样，换行符和注释还会影响语法分析过程，这个我们将会在语法部分给你详细讲解（所以要实现JavaScript的解释器，词法分析和语法分析非常麻烦，需要来回传递信息）。</p><p>接下来我来给你详细介绍一下。</p><h3>空白符号 Whitespace</h3><p>说起空白符号，想必给大家留下的印象就是空格，但是实际上，JavaScript可以支持更多空白符号。</p><ul>\n<li>\n<p><code>&lt;HT&gt;</code>(或称<code>&lt;TAB&gt;</code>)是U+0009，是缩进TAB符，也就是字符串中写的 \\t 。</p>\n</li>\n<li>\n<p><code>&lt;VT&gt;</code>是U+000B，也就是垂直方向的TAB符 \\v，这个字符在键盘上很难打出来，所以很少用到。</p>\n</li>\n<li>\n<p><code>&lt;FF&gt;</code>是U+000C，Form Feed，分页符，字符串直接量中写作 \\f ，现代已经很少有打印源程序的事情发生了，所以这个字符在JavaScript源代码中很少用到。</p>\n</li>\n<li>\n<p><code>&lt;SP&gt;</code>是U+0020，就是最普通的空格了。</p>\n</li>\n<li>\n<p><code>&lt;NBSP&gt;</code>是U+00A0，非断行空格，它是SP的一个变体，在文字排版中，可以避免因为空格在此处发生断行，其它方面和普通空格完全一样。多数的JavaScript编辑环境都会把它当做普通空格（因为一般源代码编辑环境根本就不会自动折行……）。HTML中，很多人喜欢用的 <code>&amp;nbsp;</code> 最后生成的就是它了。</p>\n</li>\n<li>\n<p><code>&lt;ZWNBSP&gt;</code>(旧称<code>&lt;BOM&gt;</code>)是U+FEFF，这是ES5新加入的空白符，是Unicode中的零宽非断行空格，在以UTF格式编码的文件中，常常在文件首插入一个额外的U+FEFF，解析UTF文件的程序可以根据U+FEFF的表示方法猜测文件采用哪种UTF编码方式。这个字符也叫做“bit order mark”。</p>\n</li>\n</ul><p>此外，JavaScript支持所有的Unicode中的空格分类下的空格，我们可以看下表：</p><p><img src="https://static001.geekbang.org/resource/image/dd/60/dd26aa9599b61d26e7de807dee2c6360.png" alt=""></p><p>很多公司的编码规范要求JavaScript源代码控制在ASCII范围内，那么，就只有<code>&lt;TAB&gt;</code> <code>&lt;VT&gt;</code> <code>&lt;FF&gt;</code> <code>&lt;SP&gt;</code> <code>&lt;NBSP&gt;</code>五种空白可用了。</p><h3>换行符 LineTerminator</h3><p>接下来我们来看看换行符，JavaScript中只提供了4种字符作为换行符。</p><ul>\n<li><code>&lt;LF&gt;</code></li>\n<li><code>&lt;CR&gt;</code></li>\n<li><code>&lt;LS&gt;</code></li>\n<li><code>&lt;PS&gt;</code></li>\n</ul><p>其中，<code>&lt;LF&gt;</code>是U+000A，就是最正常换行符，在字符串中的<code>\\n</code>。</p><p><code>&lt;CR&gt;</code>是U+000D，这个字符真正意义上的“回车”，在字符串中是<code>\\r</code>，在一部分Windows风格文本编辑器中，换行是两个字符<code>\\r\\n</code>。</p><p><code>&lt;LS&gt;</code>是U+2028，是Unicode中的行分隔符。<code>&lt;PS&gt;</code>是U+2029，是Unicode中的段落分隔符。</p><p>大部分LineTerminator在被词法分析器扫描出之后，会被语法分析器丢弃，但是换行符会影响JavaScript的两个重要语法特性：自动插入分号和“no line terminator”规则。</p><h3>注释 Comment</h3><p>JavaScript的注释分为单行注释和多行注释两种：</p><pre><code class="language-JavaScript">/* MultiLineCommentChars */ \n// SingleLineCommentChars\n</code></pre><p>多行注释中允许自由地出现<code>MultiLineNotAsteriskChar</code>，也就是除了<code>*</code>之外的所有字符。而每一个<code>*</code>之后，不能出现正斜杠符<code>/</code>。</p><p>除了四种LineTerminator之外，所有字符都可以作为单行注释。</p><p>我们需要注意，多行注释中是否包含换行符号，会对JavaScript语法产生影响，对于“no line terminator”规则来说，带换行的多行注释与换行符是等效的。</p><h2>标识符名称 IdentifierName</h2><p><code>IdentifierName</code>可以以美元符“<code>$</code>”、下划线“<code>_</code>”或者Unicode字母开始，除了开始字符以外，<code>IdentifierName</code>中还可以使用Unicode中的连接标记、数字、以及连接符号。</p><p><code>IdentifierName</code>的任意字符可以使用JavaScript的Unicode转义写法，使用Unicode转义写法时，没有任何字符限制。</p><p><code>IdentifierName</code>可以是<code>Identifier</code>、<code>NullLiteral</code>、<code>BooleanLiteral</code>或者<code>keyword</code>，在<code>ObjectLiteral</code>中，<code>IdentifierName</code>还可以被直接当做属性名称使用。</p><p>仅当不是保留字的时候，<code>IdentifierName</code>会被解析为<code>Identifier</code>。</p><p>注意<code>&lt;ZWNJ&gt;</code>和<code>&lt;ZWJ&gt;</code>是ES5新加入的两个格式控制字符，它们都是0宽的。</p><p>我在前面提到了，关键字也属于这个部分，在JavaScript中，关键字有:</p><pre><code>await break case catch class const continue debugger default delete do else export extends finally for function if import instance of new return super switch this throw try typeof var void while with yield\n</code></pre><p>除了上述的内容之外，还有1个为了未来使用而保留的关键字:</p><pre><code>enum\n</code></pre><p>在严格模式下,有一些额外的为未来使用而保留的关键字:</p><pre><code>implements package protected interface private public\n</code></pre><p>除了这些之外，<code>NullLiteral</code>（<code>null</code>）和<code>BooleanLiteral</code>（<code>true false</code>）也是保留字，不能用于<code>Identifier</code>。</p><h3>符号 Punctuator</h3><p>因为前面提到的除法和正则问题, /和/=两个运算符被拆分为DivPunctuator，因为前面提到的字符串模板问题，<code>}</code>也被独立拆分。加在一起，所有符号为：</p><pre><code>{ ( ) [ ] . ... ; , &lt; &gt; &lt;= &gt;= == != === !== + - * % ** ++ -- &lt;&lt; &gt;&gt; &gt;&gt;&gt; &amp; | ^ ! ~ &amp;&amp; || ? : = += -= *= %= **= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= &amp;= |= ^= =&gt; / /= }\n</code></pre><h3>数字直接量 NumericLiteral</h3><p>我们来看看今天标题提出的问题，JavaScript规范中规定的数字直接量可以支持四种写法：十进制数、二进制整数、八进制整数和十六进制整数。</p><p>十进制的Number可以带小数，小数点前后部分都可以省略，但是不能同时省略，我们看几个例子：</p><pre><code class="language-javascript">.01\n12.\n12.01\n</code></pre><p>这都是合法的数字直接量。这里就有一个问题，也是我们标题提出的问题，我们看一段代码：</p><pre><code class="language-javascript">12.toString()\n</code></pre><p>这时候<code>12.</code> 会被当作省略了小数点后面部分的数字，而单独看成一个整体，所以我们要想让点单独成为一个token，就要加入空格，这样写：</p><pre><code class="language-javascript">12 .toString()\n</code></pre><p>数字直接量还支持科学计数法，例如：</p><pre><code class="language-javascript">10.24E+2\n10.24e-2\n10.24e2\n</code></pre><p>这里e后面的部分，只允许使用整数。当以<code>0x</code> <code>0b</code> 或者<code>0o</code> 开头时，表示特定进制的整数：</p><pre><code class="language-javascript">0xFA\n0o73\n0b10000\n</code></pre><p>上面这几种进制都不支持小数，也不支持科学计数法。</p><h3>字符串直接量 StringLiteral</h3><p>JavaScript中的StringLiteral支持单引号和双引号两种写法。</p><pre><code class="language-JavaScript">    " DoubleStringCharacters "\n    \' SingleStringCharacters \'\n</code></pre><p>单双引号的区别仅仅在于写法，在双引号字符串直接量中，双引号必须转义，在单引号字符串直接量中，单引号必须转义。字符串中其他必须转义的字符是<code>\\</code>和所有换行符。</p><p>JavaScript中支持四种转义形式，还有一种虽然标准没有定义，但是大部分实现都支持的八进制转义。</p><p>第一种是单字符转义。 即一个反斜杠<code>\\</code>后面跟一个字符这种形式。</p><p>有特别意义的字符包括有<code>SingleEscapeCharacter</code>所定义的9种，见下表：</p><p><img src="https://static001.geekbang.org/resource/image/02/75/022c2c77d0a3c846ad0d61b48c4e0e75.png" alt=""></p><p>除了这9种字符、数字、x和u以及所有的换行符之外，其它字符经过<code>\\</code>转义后都是自身。</p><h3>正则表达式直接量 RegularExpressionLiteral</h3><p>正则表达式由Body和Flags两部分组成，例如：</p><pre><code>/RegularExpressionBody/g\n</code></pre><p>其中Body部分至少有一个字符，第一个字符不能是*（因为/*跟多行注释有词法冲突）。</p><p>正则表达式有自己的语法规则，在词法阶段，仅会对它做简单解析。</p><p>正则表达式并非机械地见到<code>/</code>就停止，在正则表达式<code>[ ]</code>中的<code>/</code>就会被认为是普通字符。我们可以看一个例子：</p><pre><code class="language-javascript">/[/]/.test("/");\n</code></pre><p>除了<code>\\</code>、<code>/</code> 和<code>[</code> 三个字符之外，JavaScript正则表达式中的字符都是普通字符。</p><p>用\\和一个非换行符可以组成一个转义，<code>[ ]</code>中也支持转义。正则表达式中的flag在词法阶段不会限制字符。</p><p>虽然只有ig几个是有效的，但是任何IdentifierPart（Identifier中合法的字符）序列在词法阶段都会被认为是合法的。</p><h3>字符串模板 Template</h3><p>从语法结构上，Template是个整体，其中的 <code>${ }</code> 是并列关系。</p><p>但是实际上，在JavaScript词法中，包含 <code>${ }</code> 的 Template，是被拆开分析的，如：</p><pre><code class="language-javascript">`a${b}c${d}e`\n</code></pre><p>它在JavaScript中被认为是：</p><pre><code>`a${\nb\n}c${\nd\n}e`\n</code></pre><p>它被拆成了五个部分：</p><ul>\n<li><code>`a${</code> 这个被称为模板头</li>\n<li><code>}c${</code> 被称为模板中段</li>\n<li><code>}e`</code> 被称为模板尾</li>\n<li><code>b</code> 和 <code>d</code> 都是普通标识符</li>\n</ul><p>实际上，这里的词法分析过程已经跟语法分析深度耦合了。</p><p>不过我们学习的时候，大可不必按照标准和引擎工程师这样去理解，可以认为模板就是一个由反引号括起来的、可以在中间插入代码的字符串。</p><p>模板支持添加处理函数的写法，这时模板的各段会被拆开，传递给函数当参数：</p><pre><code class="language-javascript">function f(){\n    console.log(arguments);\n}\n\nvar a = "world"\nf`Hello ${a}!`; // [["Hello", "!"], world]\n</code></pre><p>模板字符串不需要关心大多数字符的转义，但是至少 <code>${</code> 和 <code>`</code> 还是需要处理的。</p><p>模板中的转义跟字符串几乎完全一样，都是使用 <code>\\</code>。</p><h2>总结</h2><p>今天我们一起学习JavaScript的词法部分，这部分的内容包括了空白符号、换行符、注释、标识符名称、符号、数字直接量、字符串直接量、正则表达式直接量、字符串模板。掌握词法对我们平时调试代码至关重要。</p><p>最后，给你留一个问题：用零宽空格和零宽连接符、零宽非连接符，写一段好玩的代码。你可以给我留言，我们一起讨论。</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "JavaScript词法：为什么12.toString会报错？",
      },
      {
        title: "（小实验）理解编译原理：一个四则运算的解释器",
        herf: "https://time.geekbang.org/column/article/86823",
        id: "86823",
        content:
          '<p>你好，我是winter。</p><p>在前面的课程中，我在JavaScript和CSS的部分，多次提到了编译原理相关的知识。这一部分的知识，如果我们从编译原理“龙书”等正规的资料中学习，就会耗费掉不少的时间，所以我在这里设计了一个小实验，帮助你快速理解编译原理相关的知识。</p><p>今天的内容比较特殊，我们来做一段详细的代码实验，详细的代码我放在了文章里，如果你正在收听音频，可以点击文章查看详情。</p><h2>分析</h2><p>按照编译原理相关的知识，我们来设计一下工作，这里我们分成几个步骤。</p><ul>\n<li>定义四则运算：产出四则运算的词法定义和语法定义。</li>\n<li>词法分析：把输入的字符串流变成token。</li>\n<li>语法分析：把token变成抽象语法树AST。</li>\n<li>解释执行：后序遍历AST，执行得出结果。</li>\n</ul><h2>定义四则运算</h2><p>四则运算就是加减乘除四种运算，例如：</p><pre><code>1 + 2 * 3\n</code></pre><p>首先我们来定义词法，四则运算里面只有数字和运算符，所以定义很简单，但是我们还要注意空格和换行符，所以词法定义大概是下面这样的。</p><ul>\n<li>Token\n<ul>\n<li>Number: <code>1</code> <code>2</code> <code>3</code> <code>4</code> <code>5</code> <code>6</code> <code>7</code> <code>8</code> <code>9</code> <code>0</code> 的组合</li>\n<li>Operator: <code>+</code> 、<code>-</code>、 <code>*</code>、 <code>/</code> 之一</li>\n</ul>\n</li>\n<li>Whitespace: <code>&lt;sp&gt;</code></li>\n<li>LineTerminator：<code>&lt;LF&gt;</code> <code>&lt;CR&gt;</code></li>\n</ul><p>这里我们对空白和换行符没有任何的处理，所以词法分析阶段会直接丢弃。</p><!-- [[[read_end]]] --><p>接下来我们来定义语法，语法定义多数采用BNF，但是其实大家写起来都是乱写的，比如JavaScript标准里面就是一种跟BNF类似的自创语法。</p><p>不过语法定义的核心思想不会变，都是几种结构的组合产生一个新的结构，所以语法定义也叫语法产生式。</p><p>因为加减乘除有优先级，所以我们可以认为加法是由若干个乘法再由加号或者减号连接成的：</p><pre><code>&lt;Expression&gt; ::= \n    &lt;AdditiveExpression&gt;&lt;EOF&gt;\n\n&lt;AdditiveExpression&gt; ::= \n    &lt;MultiplicativeExpression&gt;\n    |&lt;AdditiveExpression&gt;&lt;+&gt;&lt;MultiplicativeExpression&gt;\n    |&lt;AdditiveExpression&gt;&lt;-&gt;&lt;MultiplicativeExpression&gt;\n</code></pre><p>这种BNF的写法类似递归的原理，你可以理解一下，它表示一个列表。为了方便，我们把普通数字也得当成乘法的一种特例了。</p><pre><code>&lt;MultiplicativeExpression&gt; ::= \n    &lt;Number&gt;\n    |&lt;MultiplicativeExpression&gt;&lt;*&gt;&lt;Number&gt;\n    |&lt;MultiplicativeExpression&gt;&lt;/&gt;&lt;Number&gt;\n</code></pre><p>好了，这就是四则运算的定义了。</p><h2>词法分析：状态机</h2><p>词法分析部分，我们把字符流变成token流。词法分析有两种方案，一种是状态机，一种是正则表达式，它们是等效的，选择你喜欢的就好，这里我都会你介绍一下状态机。</p><p>根据分析，我们可能产生四种输入元素，其中只有两种token，我们状态机的第一个状态就是根据第一个输入字符来判断进入了哪种状态：</p><pre><code class="language-JavaScript">var token = [];\nconst start = char =&gt; {\n    if(char === \'1\' \n        || char === \'2\'\n        || char === \'3\'\n        || char === \'4\'\n        || char === \'5\'\n        || char === \'6\'\n        || char === \'7\'\n        || char === \'8\'\n        || char === \'9\'\n        || char === \'0\'\n    ) {\n        token.push(char);\n        return inNumber;   \n    }\n    if(char === \'+\' \n        || char === \'-\'\n        || char === \'*\'\n        || char === \'/\'\n    ) {\n        emmitToken(char, char);\n        return start\n    }\n    if(char === \' \') {\n        return start;\n    }\n    if(char === \'\\r\' \n        || char === \'\\n\'\n    ) {\n        return start;\n    }\n}\nconst inNumber = char =&gt; {\n    if(char === \'1\' \n        || char === \'2\'\n        || char === \'3\'\n        || char === \'4\'\n        || char === \'5\'\n        || char === \'6\'\n        || char === \'7\'\n        || char === \'8\'\n        || char === \'9\'\n        || char === \'0\'\n    ) {\n        token.push(char);\n        return inNumber;\n    } else {\n        emmitToken("Number", token.join(""));\n        token = [];\n        return start(char); // put back char\n    }\n}\n</code></pre><p>这个状态机非常简单，它只有两个状态，因为我们只有Number不是单字符的token。</p><p>这里我的状态机实现是非常经典的方式：用函数表示状态，用if表示状态的迁移关系，用return值表示下一个状态。</p><p>下面我们来运行一下这个状态机试试看：</p><pre><code class="language-JavaScript">\nfunction emmitToken(type, value) {\n    console.log(value);\n}\n\nvar input = "1024 + 2 * 256"\n\nvar state = start;\n\nfor(var c of input.split(\'\'))\n    state = state(c);\n\nstate(Symbol(\'EOF\'))\n\n</code></pre><p>运行后我们发现输出如下：</p><pre><code>1024\n+\n2\n*\n256\n</code></pre><p>这是我们想要的答案。</p><h2>语法分析：LL</h2><p>做完了词法分析，我们开始进行语法分析，LL语法分析根据每一个产生式来写一个函数，首先我们来写好函数名：</p><pre><code>function AdditiveExpression( ){\n\n\n}\nfunction MultiplicativeExpression(){\n    \n\n}\n</code></pre><p>为了便于理解，我们就不做流式处理了，实际上一般编译代码都应该支持流式处理。</p><p>所以我们假设token已经都拿到了：</p><pre><code class="language-JavaScript">var tokens = [{\n    type:"Number",\n    value: "1024"\n}, {\n    type:"+"\n    value: "+"\n}, {\n    type:"Number",\n    value: "2"\n}, {\n    type:"*"\n    value: "*"\n}, {\n    type:"Number",\n    value: "256"\n}, {\n    type:"EOF"\n}];\n</code></pre><p>每个产生式对应着一个函数，例如：根据产生式，我们的AdditiveExpression需要处理三种情况：</p><pre><code class="language-BNF">&lt;AdditiveExpression&gt; ::= \n    &lt;MultiplicativeExpression&gt;\n    |&lt;AdditiveExpression&gt;&lt;+&gt;&lt;MultiplicativeExpression&gt;\n    |&lt;AdditiveExpression&gt;&lt;-&gt;&lt;MultiplicativeExpression&gt;\n</code></pre><p>那么AddititveExpression中就要写三个if分支，来处理三种情况。</p><p>AdditiveExpression的写法是根传入的节点，利用产生式合成新的节点</p><pre><code class="language-JavaScript">function AdditiveExpression(source){\n    if(source[0].type === "MultiplicativeExpression") {\n        let node = {\n            type:"AdditiveExpression",\n            children:[source[0]]\n        }\n        source[0] = node;\n        return node;\n    } \n    if(source[0].type === "AdditiveExpression" &amp;&amp; source[1].type === "+") {\n        let node = {\n            type:"AdditiveExpression",\n            operator:"+",\n            children:[source.shift(), source.shift(), MultiplicativeExpression(source)]\n        }\n        source.unshift(node);\n    }\n    if(source[0].type === "AdditiveExpression" &amp;&amp; source[1].type === "-") {\n        let node = {\n            type:"AdditiveExpression",\n            operator:"-",\n            children:[source.shift(), source.shift(), MultiplicativeExpression(source)]\n        }\n        source.unshift(node);\n    }\n}\n</code></pre><p>那么下一步我们就把解析好的token传给我们的顶层处理函数Expression。</p><pre><code>Expression(tokens);\n</code></pre><p>接下来，我们看Expression该怎么处理它。</p><p>我们Expression收到第一个token，是个Number，这个时候，Expression就傻了，这是因为产生式只告诉我们，收到了 AdditiveExpression 怎么办。</p><p>这个时候，我们就需要对产生式的首项层层展开，根据所有可能性调用相应的处理函数，这个过程在编译原理中称为求“closure”。</p><pre><code class="language-JavaScript">function Expression(source){\n    if(source[0].type === "AdditiveExpression" &amp;&amp; source[1] &amp;&amp; source[1].type === "EOF" ) {\n        let node = {\n            type:"Expression",\n            children:[source.shift(), source.shift()]\n        }\n        source.unshift(node);\n        return node;\n    }\n    AdditiveExpression(source);\n    return Expression(source);\n}\nfunction AdditiveExpression(source){\n    if(source[0].type === "MultiplicativeExpression") {\n        let node = {\n            type:"AdditiveExpression",\n            children:[source[0]]\n        }\n        source[0] = node;\n        return AdditiveExpression(source);\n    } \n    if(source[0].type === "AdditiveExpression" &amp;&amp; source[1] &amp;&amp; source[1].type === "+") {\n        let node = {\n            type:"AdditiveExpression",\n            operator:"+",\n            children:[]\n        }\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        MultiplicativeExpression(source);\n        node.children.push(source.shift());\n        source.unshift(node);\n        return AdditiveExpression(source);\n    }\n    if(source[0].type === "AdditiveExpression" &amp;&amp; source[1] &amp;&amp; source[1].type === "-") {\n        let node = {\n            type:"AdditiveExpression",\n            operator:"-",\n            children:[]\n        }\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        MultiplicativeExpression(source);\n        node.children.push(source.shift());\n        source.unshift(node);\n        return AdditiveExpression(source);\n    }\n    if(source[0].type === "AdditiveExpression")\n        return source[0];\n    MultiplicativeExpression(source);\n    return AdditiveExpression(source);\n}\nfunction MultiplicativeExpression(source){\n    if(source[0].type === "Number") {\n        let node = {\n            type:"MultiplicativeExpression",\n            children:[source[0]]\n        }\n        source[0] = node;\n        return MultiplicativeExpression(source);\n    } \n    if(source[0].type === "MultiplicativeExpression" &amp;&amp; source[1] &amp;&amp; source[1].type === "*") {\n        let node = {\n            type:"MultiplicativeExpression",\n            operator:"*",\n            children:[]\n        }\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        source.unshift(node);\n        return MultiplicativeExpression(source);\n    }\n    if(source[0].type === "MultiplicativeExpression"&amp;&amp; source[1] &amp;&amp; source[1].type === "/") {\n        let node = {\n            type:"MultiplicativeExpression",\n            operator:"/",\n            children:[]\n        }\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        node.children.push(source.shift());\n        source.unshift(node);\n        return MultiplicativeExpression(source);\n    }\n    if(source[0].type === "MultiplicativeExpression")\n        return source[0];\n\n    return MultiplicativeExpression(source);\n};\n\nvar source = [{\n    type:"Number",\n    value: "3"\n}, {\n    type:"*",\n    value: "*"\n}, {\n    type:"Number",\n    value: "300"\n}, {\n    type:"+",\n    value: "+"\n}, {\n    type:"Number",\n    value: "2"\n}, {\n    type:"*",\n    value: "*"\n}, {\n    type:"Number",\n    value: "256"\n}, {\n    type:"EOF"\n}];\nvar ast = Expression(source);\n\nconsole.log(ast);\n</code></pre><h2>解释执行</h2><p>得到了AST之后，最困难的一步我们已经解决了。这里我们就不对这颗树做任何的优化和精简了，那么接下来，直接进入执行阶段。我们只需要对这个树做遍历操作执行即可。</p><p>我们根据不同的节点类型和其它信息，写if分别处理即可：</p><pre><code class="language-JavaScript">\nfunction evaluate(node) {\n    if(node.type === "Expression") {\n        return evaluate(node.children[0])\n    }\n    if(node.type === "AdditiveExpression") {\n        if(node.operator === \'-\') {\n            return evaluate(node.children[0]) - evaluate(node.children[2]);\n        }\n        if(node.operator === \'+\') {\n            return evaluate(node.children[0]) + evaluate(node.children[2]);\n        }\n        return evaluate(node.children[0])\n    }\n    if(node.type === "MultiplicativeExpression") {\n        if(node.operator === \'*\') {\n            return evaluate(node.children[0]) * evaluate(node.children[2]);\n        }\n        if(node.operator === \'/\') {\n            return evaluate(node.children[0]) / evaluate(node.children[2]);\n        }\n        return evaluate(node.children[0])\n    }\n    if(node.type === "Number") {\n        return Number(node.value);\n    }\n}\n</code></pre><h2>总结</h2><p>在这个小实验中，我们通过一个小实验学习了编译原理的基本知识，小实验的目的是帮助你理解JavaScript课程中涉及到的编译原理基本概念，它离真正的编译原理学习还有很大的差距。</p><p>通过实验，我们了解了产生式、词法分析、语法分析和解释执行的过程。</p><p>最后留给你一些挑战，你可以根据自己的水平选择：</p><ul>\n<li>补全emmitToken，使得我们的代码能完整工作起来。</li>\n<li>为四则运算加入小数。</li>\n<li>引入负数。</li>\n<li>添加括号功能。</li>\n</ul><p>欢迎写好的同学留言给我。</p><p></p>',
        article_title: "（小实验）理解编译原理：一个四则运算的解释器",
      },
      {
        title: "JavaScript语法（预备篇）：到底要不要写分号呢？",
        herf: "https://time.geekbang.org/column/article/87179",
        id: "87179",
        content:
          '<p>你好，我是winter。</p><p>在我们介绍JavaScript语法的全局结构之前，我们先要探讨一个语言风格问题：究竟要不要写分号。</p><p>这是一个非常经典的口水问题，“加分号”党和“不写分号”党之间的战争，可谓是经久不息。</p><p>实际上，行尾使用分号的风格来自于Java，也来自于C语言和C++，这一设计最初是为了降低编译器的工作负担。</p><p>但是，从今天的角度来看，行尾使用分号其实是一种语法噪音，恰好JavaScript语言又提供了相对可用的分号自动补全规则，所以，很多JavaScript的程序员都是倾向于不写分号。</p><p>这里要特意说一点，在今天的文章中，我并不希望去售卖自己的观点（其实我是属于“加分号”党），而是希望比较中立地给你讲清楚相关的知识，让你具备足够的判断力。</p><p>我们首先来了解一下自动插入分号的规则。</p><h2>自动插入分号规则</h2><p>自动插入分号规则其实独立于所有的语法产生式定义，它的规则说起来非常简单，只有三条。</p><ul>\n<li>要有换行符，且下一个符号是不符合语法的，那么就尝试插入分号。</li>\n<li>有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。</li>\n<li>源代码结束处，不能形成完整的脚本或者模块结构，那么就自动插入分号。</li>\n</ul><p>这样描述是比较难以理解的，我们一起看一些实际的例子进行分析：</p><!-- [[[read_end]]] --><pre><code class="language-JavaScript">let a = 1\nvoid function(a){\n    console.log(a);\n}(a);\n</code></pre><p>在这个例子中，第一行的结尾处有换行符，接下来void关键字接在1之后是不合法的，这命中了我们的第一条规则，因此会在void前插入分号。</p><pre><code class="language-JavaScript">var a = 1, b = 1, c = 1;\na\n++\nb\n++\nc\n</code></pre><p>这也是个著名的例子，我们看第二行的a之后，有换行符，后面遇到了++运算符，a后面跟++是合法的语法，但是我们看看JavaScript标准定义中，有[no LineTerminator here]这个字样，这是一个语法定义中的规则，你可以感受一下这个规则的内容（下一小节，我会给你详细介绍no LineTerminator here ）：</p><pre><code>UpdateExpression[Yield, Await]:\n    LeftHandSideExpression[?Yield, ?Await]\n    LeftHandSideExpression[?Yield, ?Await][no LineTerminator here]++\n    LeftHandSideExpression[?Yield, ?Await][no LineTerminator here]--\n    ++UnaryExpression[?Yield, ?Await]\n    --UnaryExpression[?Yield, ?Await]\n</code></pre><p>于是，这里a的后面就要插入一个分号了。所以这段代码最终的结果，b和c都变成了2，而a还是1。</p><pre><code class="language-JavaScript">(function(a){\n    console.log(a);\n})()\n(function(a){\n    console.log(a);\n})()\n</code></pre><p>这个例子是比较有实际价值的例子，这里两个function调用的写法被称作IIFE（立即执行的函数表达式），是个常见技巧。</p><p>这段代码意图上显然是形成两个IIFE。</p><p>我们来看第三行结束的位置，JavaScript引擎会认为函数返回的可能是个函数，那么，在后面再跟括号形成函数调用就是合理的，因此这里不会自动插入分号。</p><p>这是一些鼓励不写分号的编码风格会要求大家写IIFE时必须在行首加分号的原因。</p><pre><code class="language-JavaScript">function f(){\n    return/*\n        This is a return value.\n    */1;\n}\nf();\n</code></pre><p>在这个例子中，return和1被用注释分隔开了。</p><p>根据JavaScript自动插入分号规则，<strong>带换行符的注释也被认为是有换行符</strong>，而恰好的是，return也有[no LineTerminator here]规则的要求。所以这里会自动插入分号，f执行的返回值是undefined。</p><h2>no LineTerminator here 规则</h2><p>好了，到这里我们已经讲清楚了分号自动插入的规则，但是我们要想彻底掌握分号的奥秘，就必须要对JavaScript的语法定义做一些数据挖掘工作。</p><p>no LineTerminator here规则表示它所在的结构中的这一位置不能插入换行符。</p><p>自动插入分号规则的第二条：有换行符，且语法中规定此处不能有换行符，那么就自动插入分号。跟no LineTerminator here规则强相关，那么我们就找出JavaScript语法定义中的这些规则。</p><p><img src="https://static001.geekbang.org/resource/image/c3/ad/c3ffbc89e049ad1901d4108c8ad88aad.jpg" alt=""></p><p>为了方便你理解，我把产生式换成了实际的代码。</p><p>下面一段代码展示了，带标签的continue语句，不能在continue后插入换行。</p><pre><code class="language-JavaScript">outer:for(var j = 0; j &lt; 10; j++)\n    for(var i = 0; i &lt; j; i++)\n        continue /*no LineTerminator here*/ outter\n</code></pre><p>break跟continue是一样的，break后也不能插入换行：</p><pre><code class="language-JavaScript">outer:for(var j = 0; j &lt; 10; j++)\n    for(var i = 0; i &lt; j; i++)\n        break /*no LineTerminator here*/ outter\n</code></pre><p>我们前面已经提到过return和后自增、后自减运算符。</p><pre><code class="language-JavaScript">function f(){\n    return /*no LineTerminator here*/1;\n}\n</code></pre><pre><code class="language-JavaScript">i/*no LineTerminator here*/++\ni/*no LineTerminator here*/--\n</code></pre><p>以及，throw和Exception之间也不能插入换行符：</p><pre><code class="language-JavaScript">throw/*no LineTerminator here*/new Exception("error")\n</code></pre><p>凡是async关键字，后面都不能插入换行符：</p><pre><code class="language-JavaScript">async/*no LineTerminator here*/function f(){\n\n}\nconst f = async/*no LineTerminator here*/x =&gt; x*x\n</code></pre><p>箭头函数的箭头前，也不能插入换行：</p><pre><code class="language-JavaScript">const f = x/*no LineTerminator here*/=&gt; x*x\n</code></pre><p>yield之后，不能插入换行：</p><pre><code class="language-JavaScript">function *g(){\n    var i = 0;\n    while(true)\n        yield/*no LineTerminator here*/i++;\n}\n</code></pre><p>到这里，我已经整理了所有标准中的no LineTerminator here规则，实际上，no LineTerminator here规则的存在，多数情况是为了保证自动插入分号行为是符合预期的，但是令人遗憾的是，JavaScript在设计的最初，遗漏了一些重要的情况，所以有一些不符合预期的情况出现，需要我们格外注意。</p><h2>不写分号需要注意的情况</h2><p>下面我们来看几种不写分号容易造成错误的情况，你可以稍微注意一下，避免发生同样的问题。</p><h3>以括号开头的语句</h3><p>我们在前面的案例中，已经展示了一种情况，那就是以括号开头的语句：</p><pre><code class="language-JavaScript">(function(a){\n    console.log(a);\n})()/*这里没有被自动插入分号*/\n(function(a){\n    console.log(a);\n})()\n</code></pre><p>这段代码看似两个独立执行的函数表达式，但是其实第三组括号被理解为传参，导致抛出错误。</p><h3>以数组开头的语句</h3><p>除了括号，以数组开头的语句也十分危险：</p><pre><code class="language-JavaScript">var a = [[]]/*这里没有被自动插入分号*/\n[3, 2, 1, 0].forEach(e =&gt; console.log(e))\n</code></pre><p>这段代码本意是一个变量a赋值，然后对一个数组执行forEach，但是因为没有自动插入分号，被理解为下标运算符和逗号表达式，我这个例子展示的情况，甚至不会抛出错误，这对于代码排查问题是个噩梦。</p><h3>以正则表达式开头的语句</h3><p>正则表达式开头的语句也值得你去多注意一下。我们来看这个例子。</p><pre><code class="language-JavaScript">var x = 1, g = {test:()=&gt;0}, b = 1/*这里没有被自动插入分号*/\n/(a)/g.test("abc")\nconsole.log(RegExp.$1)\n</code></pre><p>这段代码本意是声明三个变量，然后测试一个字符串中是否含有字母a，但是因为没有自动插入分号，正则的第一个斜杠被理解成了除号，后面的意思就都变了。</p><p>注意，我构造的这个例子跟上面的例子一样，同样不会抛错，凡是这一类情况，都非常致命。</p><h3>以Template开头的语句</h3><p>以Template开头的语句比较少见，但是跟正则配合时，仍然不是不可能出现：</p><pre><code class="language-JavaScript">\nvar f = function(){\n  return "";\n}\nvar g = f/*这里没有被自动插入分号*/\n`Template`.match(/(a)/);\nconsole.log(RegExp.$1)\n</code></pre><p>这段代码本意是声明函数f，然后赋值给g，再测试Template中是否含有字母a。但是因为没有自动插入分号，函数f被认为跟Template一体的，进而被莫名其妙地执行了一次。</p><h2>总结</h2><p>这一节课，我们讨论了要不要加分号的问题。</p><p>首先我们介绍了自动插入分号机制，又对JavaScript语法中的no line terminator规则做了个整理，最后，我挑选了几种情况，为你介绍了不写分号需要注意的一些常见的错误。</p><p>最后留给你一个问题，请找一些开源项目，看看它们的编码规范是否要求加分号，欢迎留言讨论。</p>',
        article_title: "JavaScript语法（预备篇）：到底要不要写分号呢？",
      },
      {
        title: "JavaScript语法（一）：在script标签写export为什么会抛错？",
        herf: "https://time.geekbang.org/column/article/87808",
        id: "87808",
        content:
          '<p>你好，我是winter，今天我们进入到语法部分的学习。在讲解具体的语法结构之前，这一堂课我首先要给你介绍一下JavaScript语法的一些基本规则。</p><h2>脚本和模块</h2><p>首先，JavaScript有两种源文件，一种叫做脚本，一种叫做模块。这个区分是在ES6引入了模块机制开始的，在ES5和之前的版本中，就只有一种源文件类型（就只有脚本）。</p><p>脚本是可以由浏览器或者node环境引入执行的，而模块只能由JavaScript代码用import引入执行。</p><p>从概念上，我们可以认为脚本具有主动性的JavaScript代码段，是控制宿主完成一定任务的代码；而模块是被动性的JavaScript代码段，是等待被调用的库。</p><p>我们对标准中的语法产生式做一些对比，不难发现，实际上模块和脚本之间的区别仅仅在于是否包含import 和 export。</p><p>脚本是一种兼容之前的版本的定义，在这个模式下，没有import就不需要处理加载“.js”文件问题。</p><p>现代浏览器可以支持用script标签引入模块或者脚本，如果要引入模块，必须给script标签添加type=“module”。如果引入脚本，则不需要type。</p><pre><code class="language-HTML">&lt;script type="module" src="xxxxx.js"&gt;&lt;/script&gt;\n</code></pre><!-- [[[read_end]]] --><p>这样，就回答了我们标题中的问题，script标签如果不加<code>type=“module”</code>，默认认为我们加载的文件是脚本而非模块，如果我们在脚本中写了export，当然会抛错。</p><p>脚本中可以包含语句。模块中可以包含三种内容：import声明，export声明和语句。普通语句我们会在下一课专门给你讲解，下面我们就来讲讲import声明和export声明。</p><p><img src="https://static001.geekbang.org/resource/image/43/44/43fdb35c0300e73bb19c143431f50a44.jpg" alt=""></p><h3>import声明</h3><p>我们首先来介绍一下import声明，import声明有两种用法，一个是直接import一个模块，另一个是带from的import，它能引入模块里的一些信息。</p><pre><code class="language-JavaScript">import "mod"; //引入一个模块\nimport v from "mod";  //把模块默认的导出值放入变量v\n</code></pre><p>直接import一个模块，只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息的。</p><p>带from的import意思是引入模块中的一部分信息，可以把它们变成本地的变量。</p><p>带from的import细分又有三种用法，我们可以分别看下例子：</p><ul>\n<li><code>import x from "./a.js"</code> 引入模块中导出的默认值。</li>\n<li><code>import {a as x, modify} from "./a.js";</code> 引入模块中的变量。</li>\n<li><code>import * as x from "./a.js"</code> 把模块中所有的变量以类似对象属性的方式引入。</li>\n</ul><p>第一种方式还可以跟后两种组合使用。</p><ul>\n<li><code>import d, {a as x, modify} from "./a.js"</code></li>\n<li><code>import d, * as x from "./a.js"</code></li>\n</ul><p>语法要求不带as的默认值永远在最前。注意，这里的变量实际上仍然可以受到原来模块的控制。</p><p>我们看一个例子，假设有两个模块a和b。我们在模块a中声明了变量和一个修改变量的函数，并且把它们导出。我们用b模块导入了变量和修改变量的函数。</p><p><strong>模块a：</strong></p><pre><code class="language-JavaScript">\nexport var a = 1;\n\nexport function modify(){\n    a = 2;\n}\n\n</code></pre><p><strong>模块b：</strong></p><pre><code class="language-JavaScript">import {a, modify} from "./a.js";\n\nconsole.log(a);\n\nmodify();\n\nconsole.log(a);\n</code></pre><p>当我们调用修改变量的函数后，b模块变量也跟着发生了改变。这说明导入与一般的赋值不同，导入后的变量只是改变了名字，它仍然与原来的变量是同一个。</p><h3>export声明</h3><p>我们再来说说export声明。与import相对，export声明承担的是导出的任务。</p><p>模块中导出变量的方式有两种，一种是独立使用export声明，另一种是直接在声明型语句前添加export关键字。</p><p>独立使用export声明就是一个export关键字加上变量名列表，例如：</p><pre><code class="language-JavaScript">export {a, b, c};\n</code></pre><p>我们也可以直接在声明型语句前添加export关键字，这里的export可以加在任何声明性质的语句之前，整理如下：</p><ul>\n<li>var</li>\n<li>function (含async和generator)</li>\n<li>class</li>\n<li>let</li>\n<li>const</li>\n</ul><p>export还有一种特殊的用法，就是跟default联合使用。export default 表示导出一个默认变量值，它可以用于function和class。这里导出的变量是没有名称的，可以使用<code>import x from "./a.js"</code>这样的语法，在模块中引入。</p><p>export default 还支持一种语法，后面跟一个表达式，例如：</p><pre><code class="language-JavaScript">var a = {};\nexport default a;\n</code></pre><p>但是，这里的行为跟导出变量是不一致的，这里导出的是值，导出的就是普通变量a的值，以后a的变化与导出的值就无关了，修改变量a，不会使得其他模块中引入的default值发生改变。</p><p>在import语句前无法加入export，但是我们可以直接使用export from语法。</p><pre><code class="language-JavaScript">export a from "a.js"\n</code></pre><p>JavaScript引擎除了执行脚本和模块之外，还可以执行函数。而函数体跟脚本和模块有一定的相似之处，所以接下来，给你讲讲函数体的相关知识。</p><h2>函数体</h2><p>执行函数的行为通常是在JavaScript代码执行时，注册宿主环境的某些事件触发的，而执行的过程，就是执行函数体（函数的花括号中间的部分）。</p><p>我们先看一个例子，感性地理解一下：</p><pre><code class="language-JavaScript">setTimeout(function(){\n    console.log("go go go");\n}, 10000)\n</code></pre><p>这段代码通过setTimeout函数注册了一个函数给宿主，当一定时间之后，宿主就会执行这个函数。</p><p>你还记得吗，我们前面已经在运行时这部分讲过，宿主会为这样的函数创建宏任务。</p><p>当我们学习了语法之后，我们可以认为，宏任务中可能会执行的代码包括“脚本(script)”“模块（module）”和“函数体（function body）”。正因为这样的相似性，我们把函数体也放到本课来讲解。</p><p>函数体其实也是一个语句的列表。跟脚本和模块比起来，函数体中的语句列表中多了return语句可以用。</p><p>函数体实际上有四种，下面，我来分别介绍一下。</p><ul>\n<li>普通函数体，例如：</li>\n</ul><pre><code class="language-JavaScript">function foo(){\n    //Function body\n}\n</code></pre><ul>\n<li>异步函数体，例如：</li>\n</ul><pre><code class="language-JavaScript">async function foo(){\n    //Function body\n}\n</code></pre><ul>\n<li>生成器函数体，例如：</li>\n</ul><pre><code class="language-JavaScript">function *foo(){\n    //Function body\n}\n</code></pre><ul>\n<li>异步生成器函数体，例如：</li>\n</ul><pre><code class="language-JavaScript">async function *foo(){\n    //Function body\n}\n</code></pre><p>上面四种函数体的区别在于：能否使用await或者yield语句。</p><p>关于函数体、模块和脚本能使用的语句，我整理了一个表格，你可以参考一下：</p><p><img src="https://static001.geekbang.org/resource/image/0b/50/0b24e78625beb70e3346aad1e8cfff50.jpg" alt=""></p><p>讲完了三种语法结构，我再来介绍两个JavaScript语法的全局机制：预处理和指令序言。</p><p>这两个机制对于我们解释一些JavaScript的语法现象非常重要。不理解预处理机制我们就无法理解var等声明类语句的行为，而不理解指令序言，我们就无法解释严格模式。</p><h2>预处理</h2><p>JavaScript执行前，会对脚本、模块和函数体中的语句进行预处理。预处理过程将会提前处理var、函数声明、class、const和let这些语句，以确定其中变量的意义。</p><p>因为一些历史包袱，这一部分内容非常复杂，首先我们看一下var声明。</p><h3>var声明</h3><p>var声明永远作用于脚本、模块和函数体这个级别，在预处理阶段，不关心赋值的部分，只管在当前作用域声明这个变量。</p><p>我们还是从实例来进行学习。</p><pre><code class="language-JavaScript">var a = 1;\n\nfunction foo() {\n    console.log(a);\n    var a = 2;\n}\n\nfoo();\n</code></pre><p>这段代码声明了一个脚本级别的a，又声明了foo函数体级别的a，我们注意到，函数体级的<code>var</code>出现在console.log语句之后。</p><p>但是预处理过程在执行之前，所以有函数体级的变量a，就不会去访问外层作用域中的变量a了，而函数体级的变量a此时还没有赋值，所以是undefined。我们再看一个情况：</p><pre><code class="language-JavaScript">var a = 1;\n\nfunction foo() {\n    console.log(a);\n    if(false) {\n        var a = 2;\n    }\n}\n\nfoo();\n</code></pre><p>这段代码比上一段代码在<code>var a = 2</code>之外多了一段if，我们知道if(false)中的代码永远不会被执行，但是预处理阶段并不管这个，var的作用能够穿透一切语句结构，它只认脚本、模块和函数体三种语法结构。所以这里结果跟前一段代码完全一样，我们会得到undefined。</p><p>我们看下一个例子，我们在运行时部分讲过类似的例子。</p><pre><code class="language-JavaScript">var a = 1;\n\nfunction foo() {\n    var o= {a:3}\n    with(o) {\n        var a = 2;\n    }\n    console.log(o.a);\n    console.log(a);\n}\n\nfoo();\n</code></pre><p>在这个例子中，我们引入了with语句，我们用with(o)创建了一个作用域，并把o对象加入词法环境，在其中使用了<code>var a = 2;</code>语句。</p><p>在预处理阶段，只认<code>var</code>中声明的变量，所以同样为foo的作用域创建了a这个变量，但是没有赋值。</p><p>在执行阶段，当执行到<code>var a = 2</code>时，作用域变成了with语句内，这时候的a被认为访问到了对象o的属性a，所以最终执行的结果，我们得到了2和undefined。</p><p>这个行为是JavaScript公认的设计失误之一，一个语句中的a在预处理阶段和执行阶段被当做两个不同的变量，严重违背了直觉，但是今天，在JavaScript设计原则“don’t break the web”之下，已经无法修正了，所以你需要特别注意。</p><p>因为早年JavaScript没有let和const，只能用var，又因为var除了脚本和函数体都会穿透，人民群众发明了“立即执行的函数表达式（IIFE）”这一用法，用来产生作用域，例如：</p><pre><code class="language-JavaScript">\nfor(var i = 0; i &lt; 20; i ++) {\n    void function(i){\n        var div = document.createElement("div");\n        div.innerHTML = i;\n        div.onclick = function(){\n            console.log(i);\n        }\n        document.body.appendChild(div);\n    }(i);\n}\n\n</code></pre><p>这段代码非常经典，常常在实际开发中见到，也经常被用作面试题，为文档添加了20个div元素，并且绑定了点击事件，打印它们的序号。</p><p>我们通过IIFE在循环内构造了作用域，每次循环都产生一个新的环境记录，这样，每个div都能访问到环境中的i。</p><p>如果我们不用IIFE：</p><pre><code class="language-JavaScript">for(var i = 0; i &lt; 20; i ++) {\n    var div = document.createElement("div");\n    div.innerHTML = i;\n    div.onclick = function(){\n        console.log(i);\n    }\n    document.body.appendChild(div);\n}\n</code></pre><p>这段代码的结果将会是点每个div都打印20，因为全局只有一个i，执行完循环后，i变成了20。</p><h3>function声明</h3><p>function声明的行为原本跟var非常相似，但是在最新的JavaScript标准中，对它进行了一定的修改，这让情况变得更加复杂了。</p><p>在全局（脚本、模块和函数体），function声明表现跟var相似，不同之处在于，function声明不但在作用域中加入变量，还会给它赋值。</p><p>我们看一下function声明的例子：</p><pre><code class="language-JavaScript">console.log(foo);\nfunction foo(){\n\n}\n</code></pre><p>这里声明了函数foo，在声明之前，我们用console.log打印函数foo，我们可以发现，已经是函数foo的值了。</p><p>function声明出现在if等语句中的情况有点复杂，它仍然作用于脚本、模块和函数体级别，在预处理阶段，仍然会产生变量，它不再被提前赋值：</p><pre><code class="language-JavaScript">console.log(foo);\nif(true) {\n    function foo(){\n\n    }\n}\n</code></pre><p>这段代码得到undefined。如果没有函数声明，则会抛出错误。</p><p>这说明function在预处理阶段仍然发生了作用，在作用域中产生了变量，没有产生赋值，赋值行为发生在了执行阶段。</p><p>出现在if等语句中的function，在if创建的作用域中仍然会被提前，产生赋值效果，我们会在下一节课继续讨论。</p><h3>class声明</h3><p>class声明在全局的行为跟function和var都不一样。</p><p>在class声明之前使用class名，会抛错：</p><pre><code class="language-JavaScript">console.log(c);\nclass c{\n\n}\n</code></pre><p>这段代码我们试图在class前打印变量c，我们得到了个错误，这个行为很像是class没有预处理，但是实际上并非如此。</p><p>我们看个复杂一点的例子：</p><pre><code class="language-JavaScript">var c = 1;\nfunction foo(){\n    console.log(c);\n    class c {}\n}\nfoo();\n</code></pre><p>这个例子中，我们把class放进了一个函数体中，在外层作用域中有变量c。然后试图在class之前打印c。</p><p>执行后，我们看到，仍然抛出了错误，如果去掉class声明，则会正常打印出1，也就是说，出现在后面的class声明影响了前面语句的结果。</p><p>这说明，class声明也是会被预处理的，它会在作用域中创建变量，并且要求访问它时抛出错误。</p><p>class的声明作用不会穿透if等语句结构，所以只有写在全局环境才会有声明作用，这部分我们将会在下一节课讲解。</p><p>这样的class设计比function和var更符合直觉，而且在遇到一些比较奇怪的用法时，倾向于抛出错误。</p><p>按照现代语言设计的评价标准，及早抛错是好事，它能够帮助我们尽量在开发阶段就发现代码的可能问题。</p><h2>指令序言机制</h2><p>脚本和模块都支持一种特别的语法，叫做指令序言（Directive Prologs）。</p><p>这里的指令序言最早是为了use strict设计的，它规定了一种给JavaScript代码添加元信息的方式。</p><pre><code class="language-JavaScript">"use strict";\nfunction f(){\n    console.log(this);\n};\nf.call(null);\n</code></pre><p>这段代码展示了严格模式的用法，我这里定义了函数f，f中打印this值，然后用call的方法调用f，传入null作为this值，我们可以看到最终结果是null原封不动地被当做this值打印了出来，这是严格模式的特征。</p><p>如果我们去掉严格模式的指令需要，打印的结果将会变成global。</p><p><code>"use strict"</code>是JavaScript标准中规定的唯一一种指令序言，但是设计指令序言的目的是，留给JavaScript的引擎和实现者一些统一的表达方式，在静态扫描时指定JavaScript代码的一些特性。</p><p>例如，假设我们要设计一种声明本文件不需要进行lint检查的指令，我们可以这样设计：</p><pre><code class="language-JavaScript">"no lint";\n"use strict";\nfunction doSth(){\n    //......\n}\n//......\n</code></pre><p>JavaScript的指令序言是只有一个字符串直接量的表达式语句，它只能出现在脚本、模块和函数体的最前面。</p><p>我们看两个例子：</p><pre><code class="language-JavaScript">function doSth(){\n    //......\n}\n"use strict";\nvar a = 1;\n//......\n</code></pre><p>这个例子中，<code>"use strict"</code>没有出现在最前，所以不是指令序言。</p><pre><code class="language-JavaScript">\'use strict\';\nfunction doSth(){\n    //......\n}\nvar a = 1;\n//......\n</code></pre><p>这个例子中，<code>\'use strict\'</code>是单引号，这不妨碍它仍然是指令序言。</p><h2>结语</h2><p>今天，我们一起进入了JavaScript的语法部分，在开始学习之前，我先介绍了一部分语法的基本规则。</p><p>我们首先介绍了JavaScript语法的全局结构，JavaScript有两种源文件，一种叫做脚本，一种叫做模块。介绍完脚本和模块的基础概念，我们再来把它们往下分，脚本中可以包含语句。模块中可以包含三种内容：import声明，export声明和语句。</p><p>最后，我介绍了两个JavaScript语法的全局机制：预处理和指令序言。</p><p>最后，给你留一个小任务，我们试着用babel，分析一段JavaScript的模块代码，并且找出它中间的所有export的变量。</p><p></p>',
        article_title:
          "JavaScript语法（一）：在script标签写export为什么会抛错？",
      },
      {
        title: "JavaScript语法（二）：你知道哪些JavaScript语句？",
        herf: "https://time.geekbang.org/column/article/88538",
        id: "88538",
        content:
          '<p>你好，我是winter。</p><p>我们在上一节课中已经讲过了JavaScript语法的顶层设计，接下来我们进入到更具体的内容。</p><p>JavaScript遵循了一般编程语言的“语句-表达式”结构，多数编程语言都是这样设计的。我们在上节课讲的脚本，或者模块都是由语句列表构成的，这一节课，我们就来一起了解一下语句。</p><p>在JavaScript标准中，把语句分成了两种：声明和语句，不过，这里的区分逻辑比较奇怪，所以，这里我还是按照自己的思路给你整理一下。</p><p>普通语句：</p><p><img src="https://static001.geekbang.org/resource/image/81/55/8186219674547691cf59e5c095304d55.png" alt=""></p><p>声明型语句：</p><p><img src="https://static001.geekbang.org/resource/image/0e/38/0e5327528df12d1eaad52c4005efff38.jpg" alt=""></p><p>我们根据上面的分类，来遍历学习一下这些语句。</p><h2>语句块</h2><p>我们可以这样去简单理解，语句块就是一对大括号。</p><pre><code class="language-JavaScript">{\n    var x, y;\n    x = 10;\n    y = 20;\n}\n</code></pre><p>语句块的意义和好处在于：让我们可以把多行语句视为同一行语句，这样，if、for等语句定义起来就比较简单了。不过，我们需要注意的是，语句块会产生作用域，我们看一个例子：</p><pre><code class="language-JavaScript">{\n    let x = 1;\n}\nconsole.log(x); // 报错\n</code></pre><p>这里我们的let声明，仅仅对语句块作用域生效，于是我们在语句块外试图访问语句块内的变量x就会报错。</p><h2>空语句</h2><p>空语句就是一个独立的分号，实际上没什么大用。我们来看一下：</p><pre><code class="language-JavaScript">;\n</code></pre><p>空语句的存在仅仅是从语言设计完备性的角度考虑，允许插入多个分号而不抛出错误。</p><!-- [[[read_end]]] --><h2>if语句</h2><p>if语句是条件语句。我想，对多数人来说，if语句都是熟悉的老朋友了，也没有什么特别需要注意的用法，但是为了我们课程的完备性，这里还是要讲一下。</p><p>if语句示例如下：</p><pre><code class="language-JavaScript">if(a &lt; b)\n    console.log(a);\n</code></pre><p>if语句的作用是，在满足条件时执行它的内容语句，这个语句可以是一个语句块，这样就可以实现有条件地执行多个语句了。</p><p>if语句还有else结构，用于不满足条件时执行，一种常见的用法是，利用语句的嵌套能力，把if和else连写成多分支条件判断：</p><pre><code class="language-JavaScript">if(a &lt; 10) {\n    //...\n} else if(a &lt; 20) {\n    //...\n} else if(a &lt; 30) {\n    //...\n} else {\n    //...\n}\n</code></pre><p>这段代码表示四个互斥的分支，分别在满足a&lt;10、a&lt;20、a&lt;30和其它情况时执行。</p><h2>switch语句</h2><p>switch语句继承自Java，Java中的switch语句继承自C和C++，原本switch语句是跳转的变形，所以我们如果要用它来实现分支，必须要加上break。</p><p>其实switch原本的设计是类似goto的思维。我们看一个例子：</p><pre><code class="language-JavaScript">switch(num) {\ncase 1:\n    print(1);\ncase 2:\n    print 2;\ncase 3:\n    print 3;\n}\n</code></pre><p>这段代码当num为1时输出1 2 3，当num为2时输出2 3，当num为3时输出3。如果我们要把它变成分支型，则需要在每个case后加上break。</p><pre><code class="language-JavaScript">switch(num) {\ncase 1:\n    print 1;\n    break;\ncase 2:\n    print 2;\n    break;\ncase 3:\n    print 3;\n    break;\n}\n</code></pre><p>在C时代，switch生成的汇编代码性能是略优于if else的，但是对JavaScript来说，则无本质区别。我个人的看法是，现在switch已经完全没有必要使用了，应该用if else结构代替。</p><h2>循环语句</h2><p>循环语句应该也是你所熟悉的语句了，这里我们把重点放在一些新用法上。</p><h3>while循环和do while循环</h3><p>这两个都是历史悠久的JavaScript语法了，示例大概如下：</p><pre><code class="language-JavaScript">let a = 100\nwhile(a--) {\n    console.log("*");\n}\n</code></pre><pre><code class="language-JavaScript">let a = 101;\ndo {\n    console.log(a);\n} while(a &lt; 100)\n</code></pre><p>注意，这里do while循环无论如何至少会执行一次。</p><h3>普通for循环</h3><p>首先我们来看看普通的for循环。</p><pre><code class="language-JavaScript">\nfor(i = 0; i &lt; 100; i++)\n    console.log(i);\n\nfor(var i = 0; i &lt; 100; i++)\n    console.log(i);\n\nfor(let i = 0; i &lt; 100; i++)\n    console.log(i);\n\nvar j = 0;\nfor(const i = 0; j &lt; 100; j++)\n    console.log(i);\n\n</code></pre><p>这里为了配合新语法，加入了允许let和const，实际上，const在这里是非常奇葩的东西，因为这里声明和初始化的变量，按惯例是用于控制循环的，但是它如果是const就没法改了。</p><p>我想，这一点可能是从保持let和const一致性的角度考虑的吧。</p><h3>for in循环</h3><p>for in 循环枚举对象的属性，这里体现了属性的enumerable特征。</p><pre><code class="language-JavaScript">let o = { a: 10, b: 20}\nObject.defineProperty(o, "c", {enumerable:false, value:30})\n\nfor(let p in o)\n    console.log(p);\n\n</code></pre><p>这段代码中，我们定义了一个对象o，给它添加了不可枚举的属性c，之后我们用for in循环枚举它的属性，我们会发现，输出时得到的只有a和b。</p><p>如果我们定义c这个属性时，enumerable为true，则for in循环中也能枚举到它。</p><h3>for of循环和for await of循环</h3><p>for of循环是非常棒的语法特性。</p><p>我们先看下基本用法，它可以用于数组：</p><pre><code class="language-JavaScript">for(let e of [1, 2, 3, 4, 5])\n    console.log(e);\n</code></pre><p>但是实际上，它背后的机制是iterator机制。</p><p>我们可以给任何一个对象添加iterator，使它可以用于for of语句，看下示例：</p><pre><code class="language-JavaScript">let o = {  \n    [Symbol.iterator]:() =&gt; ({\n        _value: 0,\n        next(){\n            if(this._value == 10)\n                return {\n                    done: true\n                }\n            else return {\n                value: this._value++,\n                done: false\n            };\n        }\n    })\n}\nfor(let e of o)\n    console.log(e);\n\n</code></pre><p>这段代码展示了如何为一个对象添加iterator。但是，在实际操作中，我们一般不需要这样定义iterator，我们可以使用generator function。</p><pre><code class="language-JavaScript">function* foo(){\n    yield 0;\n    yield 1;\n    yield 2;\n    yield 3;\n}\nfor(let e of foo())\n    console.log(e);\n</code></pre><p>这段代码展示了generator function和foo的配合。</p><p>此外，JavaScript还为异步生成器函数配备了异步的for of，我们来看一个例子：</p><pre><code class="language-JavaScript">function sleep(duration) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(resolve,duration);\n    })\n}\nasync function* foo(){\n    i = 0;\n    while(true) {\n        await sleep(1000);\n        yield i++;\n    }\n        \n}\nfor await(let e of foo())\n    console.log(e);\n</code></pre><p>这段代码定义了一个异步生成器函数，异步生成器函数每隔一秒生成一个数字，这是一个无限的生成器。</p><p>接下来，我们使用for await of来访问这个异步生成器函数的结果，我们可以看到，这形成了一个每隔一秒打印一个数字的无限循环。</p><p>但是因为我们这个循环是异步的，并且有时间延迟，所以，这个无限循环的代码可以用于显示时钟等有意义的操作。</p><h2>return</h2><p>return语句用于函数中，它终止函数的执行，并且指定函数的返回值，这是大家非常熟悉语句了，也没有什么特殊之处。</p><pre><code class="language-JavaScript">function squre(x){\n    return x * x;\n}\n</code></pre><p>这段代码展示了return的基本用法。它后面可以跟一个表达式，计算结果就是函数返回值。</p><h2>break语句和continue语句</h2><p>break语句用于跳出循环语句或者switch语句，continue语句用于结束本次循环并继续循环。</p><p>这两个语句都属于控制型语句，用法也比较相似，所以我们就一起讲了。需要注意的是，它们都有带标签的用法。</p><pre><code class="language-JavaScript">outer:for(let i = 0; i &lt; 100; i++)\n    inner:for(let j = 0; j &lt; 100; j++)\n        if( i == 50 &amp;&amp; j == 50)\n            break outer;\nouter:for(let i = 0; i &lt; 100; i++)\n    inner:for(let j = 0; j &lt; 100; j++)\n        if( i &gt;= 50 &amp;&amp; j == 50)\n            continue outer;\n</code></pre><p>带标签的break和continue可以控制自己被外层的哪个语句结构消费，这可以跳出复杂的语句结构。</p><h2>with语句</h2><p>with语句是个非常巧妙的设计，但它把JavaScript的变量引用关系变得不可分析，所以一般都认为这种语句都属于糟粕。</p><p>但是历史无法改写，现在已经无法去除with了。我们来了解一下它的基本用法即可。</p><pre><code class="language-JavaScript">let o = {a:1, b:2}\nwith(o){\n    console.log(a, b);\n}\n</code></pre><p>with语句把对象的属性在它内部的作用域内变成变量。</p><h2>try语句和throw语句</h2><p>try语句和throw语句用于处理异常。它们是配合使用的，所以我们就放在一起讲了。在大型应用中，异常机制非常重要。</p><pre><code class="language-JavaScript">try {\n    throw new Error("error");\n} catch(e) {\n    console.log(e);\n} finally {\n    console.log("finally");\n}\n\n</code></pre><p>一般来说，throw用于抛出异常，但是单纯从语言的角度，我们可以抛出任何值，也不一定是异常逻辑，但是为了保证语义清晰，不建议用throw表达任何非异常逻辑。</p><p>try语句用于捕获异常，用throw抛出的异常，可以在try语句的结构中被处理掉：try部分用于标识捕获异常的代码段，catch部分则用于捕获异常后做一些处理，而finally则是用于执行后做一些必须执行的清理工作。</p><p>catch结构会创建一个局部的作用域，并且把一个变量写入其中，需要注意，在这个作用域，不能再声明变量e了，否则会出错。</p><p>在catch中重新抛出错误的情况非常常见，在设计比较底层的函数时，常常会这样做，保证抛出的错误能被理解。</p><p>finally语句一般用于释放资源，它一定会被执行，我们在前面的课程中已经讨论过一些finally的特征，即使在try中出现了return，finally中的语句也一定要被执行。</p><h2>debugger语句</h2><p>debugger语句的作用是：通知调试器在此断点。在没有调试器挂载时，它不产生任何效果。</p><p>介绍完普通语句，我们再来看看声明型语句。声明型语句跟普通语句最大区别就是声明型语句响应预处理过程，普通语句只有执行过程。</p><h2>var</h2><p>var声明语句是古典的JavaScript中声明变量的方式。而现在，在绝大多数情况下，let和const都是更好的选择。</p><p>我们在上一节课已经讲解了var声明对全局作用域的影响，它是一种预处理机制。</p><p>如果我们仍然想要使用var，我的个人建议是，把它当做一种“保障变量是局部”的逻辑，遵循以下三条规则：</p><ul>\n<li>声明同时必定初始化；</li>\n<li>尽可能在离使用的位置近处声明；</li>\n<li>不要在意重复声明。</li>\n</ul><p>例如：</p><pre><code class="language-JavaScript">var x = 1, y = 2;\ndoSth(x, y);\n\nfor(var x = 0; x &lt; 10; x++)\n    doSth2(x);\n</code></pre><p>这个例子中，两次声明了变量x，完成了两段逻辑，这两个x意义上可能不一定相关，这样，不论我们把代码复制粘贴在哪里，都不会出错。</p><p>当然，更好的办法是使用let改造，我们看看如何改造：</p><pre><code class="language-JavaScript">{\n    let x = 1, y = 2;\n    doSth(x, y);\n}\n\nfor(let x = 0; x &lt; 10; x++)\n    doSth2(x);\n</code></pre><p>这里我用代码块限制了第一个x的作用域，这样就更难发生变量命名冲突引起的错误了。</p><h2>let和const</h2><p>let和const是都是变量的声明，它们的特性非常相似，所以我们放在一起讲了。let和const是新设计的语法，所以没有什么硬伤，非常地符合直觉。let和const的作用范围是if、for等结构型语句。</p><p>我们看下基本用法：</p><pre><code class="language-JavaScript">const a = 2;\nif(true){\n    const a = 1;\n    console.log(a);\n}\nconsole.log(a);\n</code></pre><p>这里的代码先在全局声明了变量a，接下来又在if内声明了a，if内构成了一个独立的作用域。</p><p>const和let语句在重复声明时会抛错，这能够有效地避免变量名无意中冲突：</p><pre><code class="language-JavaScript">let a = 2\nconst a = 1;\n</code></pre><p>这段代码中，先用let声明了a，接下来又试图使用const声明变量a，这时，就会产生错误。</p><p>let和const声明虽然看上去是执行到了才会生效，但是实际上，它们还是会被预处理。如果当前作用域内有声明，就无法访问到外部的变量。我们来看这段代码：</p><pre><code class="language-JavaScript">const a = 2;\nif(true){\n    console.log(a); //抛错\n    const a = 1;   \n}\n</code></pre><p>这里在if的作用域中，变量a声明执行到之前，我们访问了变量a，这时会抛出一个错误，这说明const声明仍然是有预处理机制的。</p><p>在执行到const语句前，我们的JavaScript引擎就已经知道后面的代码将会声明变量a，从而不允许我们访问外层作用域中的a。</p><h2>class声明</h2><p>我们在之前的课程中，已经了解过class相关的用法。这里我们再从语法的角度来看一遍：</p><pre><code class="language-JavaScript">class a {\n\n}\n</code></pre><p>class最基本的用法只需要class关键字、名称和一对大括号。它的声明特征跟const和let类似，都是作用于块级作用域，预处理阶段则会屏蔽外部变量。</p><pre><code class="language-JavaScript">const a = 2;\nif(true){\n    console.log(a); //抛错\n    class a {\n\n    }\n}\n</code></pre><p>class内部，可以使用constructor关键字来定义构造函数。还能定义getter/setter和方法。</p><pre><code class="language-JavaScript">class Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get area() {\n    return this.calcArea();\n  }\n  // Method\n  calcArea() {\n    return this.height * this.width;\n  }\n}\n</code></pre><p>这个例子来自MDN，它展示了构造函数、getter和方法的定义。</p><p>以目前的兼容性，class中的属性只能写在构造函数中，相关标准正在TC39讨论。</p><p>需要注意，class默认内部的函数定义都是strict模式的。</p><h2>函数声明</h2><p>函数声明使用 function 关键字。</p><p>在上一节课中，我们已经讨论过函数声明对全局作用域的影响了。这一节课，我们来看看函数声明具体的内容，我们先看一下函数声明的几种类型。</p><pre><code class="language-JavaScript">\nfunction foo(){\n\n}\n\nfunction* foo(){\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\nasync function foo(){\n    await sleep(3000);\n    \n}\n\nasync function* foo(){\n    await sleep(3000);\n    yield 1;\n}\n\n</code></pre><p>带*的函数是generator，我们在前面的部分已经见过它了。生成器函数可以理解为返回一个序列的函数，它的底层是iterator机制。</p><p>async函数是可以暂停执行，等待异步操作的函数，它的底层是Promise机制。异步生成器函数则是二者的结合。</p><p>函数的参数，可以只写形参名，现在还可以写默认参数和指定多个参数，看下例子：</p><pre><code class="language-JavaScript">\nfunction foo(a = 1, ...other) {\n    console.log(a, other)\n}\n</code></pre><p>这个形式可以代替一些对参数的处理代码，表意会更加清楚。</p><h2>结语</h2><p>今天我们一起学习了语句家族，语句分成了普通语句和声明型语句。</p><p>普通语句部分，建议你把重点放在循环语句上面。声明型语句我觉得都很重要，尤其是它们的行为。熟练掌握了它们，我们就可以在工作中去综合运用它们，从而减少代码中的错误。新特性大多可以帮助我们发现代码中的错误。</p><p>最后留一个小作业，请你找出所有具有Symbol.iterator的原生对象，并且看看它们的for of遍历行为。</p><p></p>',
        article_title: "JavaScript语法（二）：你知道哪些JavaScript语句？",
      },
      {
        title: "JavaScript语法（三）：什么是表达式语句？",
        herf: "https://time.geekbang.org/column/article/88827",
        id: "88827",
        content:
          '<p>你好，我是winter。</p><p>不知道你有没有注意到，我们在语句部分，讲到了很多种语句类型，但是，其实最终产生执行效果的语句不多。</p><p>事实上，真正能干活的就只有表达式语句，其它语句的作用都是产生各种结构，来控制表达式语句执行，或者改变表达式语句的意义。</p><p>今天的课程，我们就深入到表达式语句中来学习一下。</p><h2>什么是表达式语句</h2><p>表达式语句实际上就是一个表达式，它是由运算符连接变量或者直接量构成的（关于直接量我们在下一节详细讲解）。</p><p>一般来说，我们的表达式语句要么是函数调用，要么是赋值，要么是自增、自减，否则表达式计算的结果没有任何意义。</p><p>但是从语法上，并没有这样的限制，任何合法的表达式都可以当做表达式语句使用。比如我们看下面的例子。</p><pre><code class="language-JavaScript">a + b;\n</code></pre><p>这句代码计算了a和b相加的值，但是不会显示出来，也不会产生任何执行效果（除非a和b是getter），但是不妨碍它符合语法也能够被执行。</p><p>下面我们就一起来了解下都有哪些表达式，我们从粒度最小到粒度最大了解一下。</p><h2>PrimaryExpression 主要表达式</h2><p>首先我们来给你讲解一下表达式的原子项：Primary Expression。它是表达式的最小单位，它所涉及的语法结构也是优先级最高的。</p><!-- [[[read_end]]] --><p>Primary Expression包含了各种“直接量”，直接量就是直接用某种语法写出来的具有特定类型的值。我们已经知道，在运行时有各种值，比如数字123，字符串Hello world，所以通俗地讲，直接量就是在代码中把它们写出来的语法。</p><p>我们在类型部分，已经介绍过一些基本类型的直接量。比如，我们当时用null关键字获取null值，这个用法就是null直接量，这里我们仅仅把它们简单回顾一下：</p><pre><code class="language-JavaScript">"abc";\n123;\nnull;\ntrue;\nfalse;\n</code></pre><p>除这些之外，JavaScript还能够直接量的形式定义对象，针对函数、类、数组、正则表达式等特殊对象类型，JavaScript提供了语法层面的支持。</p><pre><code class="language-JavaScript">({});\n(function(){});\n(class{ });\n[];\n/abc/g;\n</code></pre><p>需要注意，在语法层面，function、{ 和class开头的表达式语句与声明语句有语法冲突，所以，我们要想使用这样的表达式，必须加上括号来回避语法冲突。</p><p>在JavaScript标准中，这些结构有的被称作直接量（Literal），有的被称作表达式（**Expression），在我看来，把它们都理解成直接量比较合适。</p><p>Primary Expression还可以是this或者变量，在语法上，把变量称作“标识符引用”。</p><pre><code class="language-JavaScript">this;\nmyVar;\n</code></pre><p>任何表达式加上圆括号，都被认为是Primary Expression，这个机制使得圆括号成为改变运算优先顺序的手段。</p><pre><code class="language-JavaScript">(a + b);\n</code></pre><p>这就是Primary Expression的几种形式了，接下来，我们讲讲由Primary Expression构成的更复杂的表达式：Member Expression。</p><h2>MemberExpression 成员表达式</h2><p>Member Expression通常是用于访问对象成员的。它有几种形式：</p><pre><code class="language-JavaScript">a.b;\na["b"];\nnew.target;\nsuper.b;\n</code></pre><p>前面两种用法都很好理解，就是用标识符的属性访问和用字符串的属性访问。而new.target是个新加入的语法，用于判断函数是否是被new调用，super则是构造函数中，用于访问父类的属性的语法。</p><p>从名字就可以看出，Member Expression最初设计是为了属性访问的，不过从语法结构需要，以下两种在JavaScript标准中当做Member Expression：</p><pre><code class="language-JavaScript">f`a${b}c`;\n</code></pre><p>这是一个是带函数的模板，这个带函数名的模板表示把模板的各个部分算好后传递给一个函数。</p><pre><code class="language-JavaScript">new Cls();\n</code></pre><p>另一个是带参数列表的new运算，注意，不带参数列表的new运算优先级更低，不属于Member Expression。</p><p>实际上，这两种被放入Member Expression，仅仅意味着它们跟属性运算属于同一优先级，没有任何语义上的关联。接下来我们看看Member Expression能组成什么。</p><h2>NewExpression NEW表达式</h2><p>这种非常简单，Member Expression加上new就是New Expression（当然，不加new也可以构成New Expression，JavaScript中默认独立的高优先级表达式都可以构成低优先级表达式）。</p><p>注意，这里的New Expression特指没有参数列表的表达式。我们看个稍微复杂的例子：</p><pre><code class="language-JavaScript">new new Cls(1);\n</code></pre><p>直观看上去，它可能有两种意思：</p><pre><code class="language-JavaScript">new (new Cls(1));\n</code></pre><pre><code class="language-JavaScript">new (new Cls)(1);\n</code></pre><p>实际上，它等价于第一种。我们可以用以下代码来验证：</p><pre><code class="language-JavaScript">class Cls{\n  constructor(n){\n    console.log("cls", n);\n    return class {\n      constructor(n) {\n        console.log("returned", n);\n      }\n    }\n  }\n}\n\nnew (new Cls(1));\n</code></pre><p>这段代码最后得到了下面这样的结果。</p><pre><code>cls 1\nreturned undefined\n</code></pre><p>这里就说明了，1被当做调用Cls时的参数传入了。</p><h2>CallExpression 函数调用表达式</h2><p>除了New Expression，Member Expression还能构成Call Expression。它的基本形式是Member Expression后加一个括号里的参数列表，或者我们可以用上super关键字代替Member Expression。</p><pre><code class="language-JavaScript">a.b(c);\nsuper();\n</code></pre><p>这看起来很简单，但是它有一些变体。比如：</p><pre><code class="language-JavaScript">a.b(c)(d)(e);\na.b(c)[3];\na.b(c).d;\na.b(c)`xyz`;\n</code></pre><p>这些变体的形态，跟Member Expression几乎是一一对应的。实际上，我们可以理解为，Member Expression中的某一子结构具有函数调用，那么整个表达式就成为了一个Call Expression。</p><p>而Call Expression就失去了比New Expression优先级高的特性，这是一个主要的区分。</p><h2>LeftHandSideExpression 左值表达式</h2><p>接下来，我们需要理解一个概念：New Expression 和 Call Expression 统称LeftHandSideExpression，左值表达式。</p><p>我们直观地讲，左值表达式就是可以放到等号左边的表达式。JavaScript语法则是下面这样。</p><pre><code class="language-JavaScript">a() = b;\n</code></pre><p>这样的用法其实是符合语法的，只是，原生的JavaScript函数，返回的值都不能被赋值。因此多数时候，我们看到的赋值将会是Call Expression的其它形式，如：</p><pre><code class="language-JavaScript">a().c = b;\n</code></pre><p>另外，根据JavaScript运行时的设计，不排除某些宿主会提供返回引用类型的函数，这时候，赋值就是有效的了。</p><p>左值表达式最经典的用法是用于构成赋值表达式，但是其实如果你翻一翻JavaScript标准，你会发现它出现在各种场合，凡是需要“可以被修改的变量”的位置，都能见到它的身影。</p><p>那么接下来我们就讲讲 AssignmentExpression 赋值表达式。</p><h2>AssignmentExpression 赋值表达式</h2><p>AssignmentExpression 赋值表达式也有多种形态，最基本的当然是使用等号赋值：</p><pre><code class="language-JavaScript">a = b\n</code></pre><p>这里需要理解的一个稍微复杂的概念是，这个等号是可以嵌套的：</p><pre><code class="language-JavaScript">a = b = c = d\n</code></pre><p>这样的连续赋值，是右结合的，它等价于下面这种：</p><pre><code class="language-JavaScript">a = (b = (c = d))\n</code></pre><p>也就是说，先把d的结果赋值给c，再把整个表达式的结果赋值给b，再赋值给a。</p><p><strong>当然，这并非一个很好的代码风格，我们讲解语法是为了让你理解这样的用法，而不是推荐你这样写代码。</strong></p><p>赋值表达式的使用，还可以结合一些运算符，例如：</p><pre><code class="language-JavaScript">a += b;\n</code></pre><p>相当于</p><pre><code class="language-JavaScript">a = a + b;\n</code></pre><p>能有这样用的运算符有下面这几种：</p><p><code>*=</code>、<code>/=</code>、<code>%=</code>、<code>+=</code>、<code>-=</code>、<code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&gt;&gt;&gt;=</code>、<code>&amp;=</code>、<code>^=</code>、<code>|=</code>、<code>**=</code></p><p>我想你已经注意到了，赋值表达式的等号左边和右边能用的表达式类型不一样，在这一课，我们已经关注完了表达式的左边部分（左值表达式）的语法结构，下一节课，我们将会给你重点讲解表达式的右边部分。</p><h2>Expression 表达式</h2><p>赋值表达式可以构成Expression表达式的一部分。在JavaScript中，表达式就是用逗号运算符连接的赋值表达式。</p><p>在JavaScript中，比赋值运算优先级更低的就是逗号运算符了。我们可以把逗号可以理解为一种小型的分号。</p><pre><code class="language-JavaScript">a = b, b = 1, null;\n</code></pre><p>逗号分隔的表达式会顺次执行，就像不同的表达式语句一样。“整个表达式的结果”就是“最后一个逗号后的表达式结果”。比如我们文中的例子，整个<code>“a = b, b = 1, null;”</code>表达式的结果就是<code>“，”</code>后面的<code>null</code>。</p><p>在很多场合，都不允许使用带逗号的表达式，比如我们在前面课程中提到，export后只能跟赋值表达式，意思就是表达式中不能含有逗号。</p><h2>结语</h2><p>这节课我们开始讲解了运算符和表达式的一些相关知识，这节课上，我们已经学习了赋值表达式和赋值表达式的左边部分。下节课，我们将会讲一讲赋值表达式的右边部分。</p><p>最后给你留一个作业，把今天讲到的所有运算符按优先级排列成一个表格，下节课我们会补完剩下的部分。</p><p></p>',
        article_title: "JavaScript语法（三）：什么是表达式语句？",
      },
      {
        title: "JavaScript语法（四）：新加入的**运算符，哪里有些不一样呢？",
        herf: "https://time.geekbang.org/column/article/89151",
        id: "89151",
        content:
          '<p>你好，我是winter。</p><p>上一节课我们已经给你介绍了表达式的一些结构，其中关于赋值表达式，我们讲完了它的左边部分，而留下了它右边部分，那么，我们这节课一起来详细讲解。</p><p>在一些通用的计算机语言设计理论中，能够出现在赋值表达式右边的叫做：右值表达式（RightHandSideExpression），而在JavaScript标准中，规定了在等号右边表达式叫做条件表达式（ConditionalExpression），不过，在JavaScript标准中，从未出现过右值表达式字样。</p><p>JavaScript标准也规定了左值表达式同时都是条件表达式（也就是右值表达式），此外，左值表达式也可以通过跟一定的运算符组合，逐级构成更复杂的结构，直到成为右值表达式。</p><p>关于这块的知识，我们有时会看到按照运算符来组织的讲解形式。</p><p>这样讲解形式是因为：对运算符来说的“优先级”，如果从我们语法的角度来看，那就是“表达式的结构”。讲“乘法运算的优先级高于加法”，从语法的角度看就是“乘法表达式和加号运算符构成加法表达式”。</p><p>对于右值表达式来说，我们可以理解为以左值表达式为最小单位开始构成的，接下来我们就来看看左值表达式是如何一步步构成更为复杂的语法结构。</p><!-- [[[read_end]]] --><h2>更新表达式 UpdateExpression</h2><p>左值表达式搭配 <code>++</code> <code>--</code> 运算符，可以形成更新表达式。</p><pre><code class="language-JavaScript">-- a;\n++ a;\na --\na ++\n</code></pre><p>更新表达式会改变一个左值表达式的值。分为前后自增，前后自减一共四种。</p><p>我们要注意一下，这里在ES2018中，跟早期版本有所不同，前后自增自减运算被放到了同一优先级。</p><h2>一元运算表达式 UnaryExpression</h2><p>更新表达式搭配一元运算符，可以形成一元运算表达式，我们看下例子：</p><pre><code class="language-JavaScript">delete a.b;\nvoid a;\ntypeof a;\n- a;\n~ a;\n! a;\nawait a;\n</code></pre><p>它的特点就是一个更新表达式搭配了一个一元运算符。</p><h2>乘方表达式 ExponentiationExpression</h2><p>乘方表达式也是由更新表达式构成的。它使用<code>**</code>号。</p><pre><code class="language-JavaScript">++i ** 30\n2 ** 30 //正确\n-2 ** 30 //报错\n</code></pre><p>我们看一下例子，-2这样的一元运算表达式，是不可以放入乘方表达式的，如果需要表达类似的逻辑，必须加括号。</p><p>这里我们需要注意一下结合性，**运算是右结合的，这跟其它正常的运算符（也就是左结合运算符）都不一样。</p><p>我们来看一个例子。</p><pre><code class="language-JavaScript">4 ** 3 ** 2\n</code></pre><p>事实上，它是这样被运算的：</p><pre><code class="language-JavaScript">4 ** (3 ** 2)\n</code></pre><p>而不是这样被运算的：</p><pre><code class="language-JavaScript">(4 ** 3) ** 2\n</code></pre><p>我们来实际在代码中执行一下试试。最终结果是262144， 而不是4096。</p><h2>乘法表达式 MultiplicativeExpression</h2><p>到这里，我们进入了比较熟悉的表达式类型，乘方表达式可以构成乘法表达式，用乘号或者除号、取余符号连接就可以了，我们看看例子：</p><pre><code class="language-JavaScript">x * 2;\n</code></pre><p>乘法表达式有三种运算符：</p><pre><code>*\n/\n%\n</code></pre><p>它们分别表示乘、除和取余。它们的优先级是一样的，所以统一放在乘法运算表达式中。</p><h2>加法表达式 AdditiveExpression</h2><p>加法表达式是由乘法表达式用加号或者减号连接构成的。我们看下例子:</p><pre><code class="language-JavaScript">a + b * c\n</code></pre><p>加法表达式有加号和减号两种运算符。</p><pre><code>+ \n-\n</code></pre><p>这就是我们小学学的加法和减法的意思了。不过要注意，加号还能表示字符串连接，这也比较符合一般的直觉。</p><h2>移位表达式 ShiftExpression</h2><p>移位表达式由加法表达式构成，移位是一种位运算，分成三种：</p><pre><code>&lt;&lt; 向左移位\n&gt;&gt; 向右移位\n&gt;&gt;&gt; 无符号向右移位\n</code></pre><p>移位运算把操作数看做二进制表示的整数，然后移动特定位数。所以左移n位相当于乘以2的n次方，右移n位相当于除以2取整n次。</p><p>普通移位会保持正负数。无符号移位会把减号视为符号位1，同时参与移位：</p><pre><code>-1 &gt;&gt;&gt; 1\n</code></pre><p>这个会得到2147483647，也就是2的31次方，跟负数的二进制表示法相关，这里就不详细讲解了。</p><p>在JavaScript中，二进制操作整数并不能提高性能，移位运算这里也仅仅作为一种数学运算存在，这些运算存在的意义也仅仅是照顾C系语言用户的习惯了。</p><h2>关系表达式 RelationalExpression</h2><p>移位表达式可以构成关系表达式，这里的关系表达式就是大于、小于、大于等于、小于等于等运算符号连接，统称为关系运算。</p><pre><code>&lt;=\n&gt;=\n&lt;\n&gt;\ninstanceof \nin\n</code></pre><p>需要注意，这里的&lt;= 和 &gt;= 关系运算，完全是针对数字的，所以 &lt;= 并不等价于 &lt; 或 ==。例如：</p><pre><code class="language-JavaScript">null &lt;= undefined\n//false\nnull == undefined\n//true\n</code></pre><p>请你务必不要用数学上的定义去理解这些运算符。</p><h2>相等表达式 EqualityExpression</h2><p>在语法上，相等表达式是由关系表达式用相等比较运算符（如 <code>==</code>）连接构成的。所以我们可以像下面这段代码一样使用，而不需要加括号。</p><pre><code>a instanceof &quot;object&quot; == true\n</code></pre><p>相等表达式由四种运算符和关系表达式构成，我们来看一下运算符：</p><ul>\n<li><code>==</code></li>\n<li><code>!=</code></li>\n<li><code>===</code></li>\n<li><code>!==</code></li>\n</ul><p>相等表达式又包含一个JavaScript中著名的设计失误，那就是 <code>==</code> 的行为。</p><p>一些编程规范甚至要求完全避免使用 <code>==</code> 运算，我觉得这样规定是比较合理的，但是这里我还是尽量解释一下 <code>==</code> 的行为。</p><p>虽然标准中写的<code>==</code>十分复杂，但是归根结底，类型不同的变量比较时<code>==</code>运算只有三条规则：</p><ul>\n<li>undefined与null相等；</li>\n<li>字符串和bool都转为数字再比较；</li>\n<li>对象转换成primitive类型再比较。</li>\n</ul><p>这样我们就可以理解一些不太符合直觉的例子了，比如：</p><ul>\n<li><code>false == \'0\'</code> true</li>\n<li><code>true == \'true\'</code> false</li>\n<li><code>[] == 0</code> true</li>\n<li><code>[] == false</code> true</li>\n<li><code>new Boolean(\'false\') == false</code> false</li>\n</ul><p>这里不太符合直觉的有两点：</p><ul>\n<li>一个是即使字符串与boolean比较，也都要转换成数字；</li>\n<li>另一个是对象如果转换成了primitive类型跟等号另一边类型恰好相同，则不需要转换成数字。</li>\n</ul><p>此外，<code>==</code> 的行为也经常跟if的行为（转换为boolean）混淆。总之，我建议，仅在确认 <code>==</code> 发生在Number和String类型之间时使用，比如：</p><pre><code class="language-JavaScript">document.getElementsByTagName(\'input\')[0].value == 100\n</code></pre><p>在这个例子中，等号左边必然是string，右边的直接量必然是number，这样使用 == 就没有问题了。</p><h2>位运算表达式</h2><p>位运算表达式含有三种：</p><ul>\n<li>按位与表达式 BitwiseANDExpression</li>\n<li>按位异或表达式 BitwiseANDExpression</li>\n<li>按位或表达式 BitwiseORExpression。</li>\n</ul><p>位运算表达式关系比较紧密，我们这里放到一起来讲。</p><p>按位与表达式由按位与运算符（<code>&amp;</code>）连接按位异或表达式构成，按位与表达式把操作数视为二进制整数，然后把两个操作数按位做与运算。</p><p>按位异或表达式由按位异或运算符（<code>^</code>）连接按位与表达式构成，按位异或表达式把操作数视为二进制整数，然后把两个操作数按位做异或运算。异或两位相同时得0，两位不同时得1。</p><p>异或运算有个特征，那就是两次异或运算相当于取消。所以有一个异或运算的小技巧，就是用异或运算来交换两个整数的值。</p><pre><code class="language-JavaScript">\nlet a = 102, b = 324;\n\na = a ^ b;\nb = a ^ b;\na = a ^ b;\n\nconsole.log(a, b);\n</code></pre><p>按位或表达式由按位或运算符（<code>|</code>）连接相等表达式构成，按位或表达式把操作数视为二进制整数，然后把两个操作数按位做或运算。</p><p>按位或运算常常被用在一种叫做Bitmask的技术上。Bitmask相当于使用一个整数来当做多个布尔型变量，现在已经不太提倡了。不过一些比较老的API还是会这样设计，比如我们在DOM课程中，提到过的Iterator API，我们看下例子：</p><pre><code class="language-JavaScript">var iterator = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_COMMENT, null, false);\nvar node;\nwhile(node = iterator.nextNode())\n{\n    console.log(node);\n}\n</code></pre><p>这里的第二个参数就是使用了Bitmask技术，所以必须配合位运算表达式才能方便地传参。</p><h2>逻辑与表达式和逻辑或表达式</h2><p>逻辑与表达式由按位或表达式经过逻辑与运算符连接构成，逻辑或表达式则由逻辑与表达式经逻辑或运算符连接构成。</p><p>这里需要注意的是，这两种表达式都不会做类型转换，所以尽管是逻辑运算，但是最终的结果可能是其它类型。</p><p>比如：</p><pre><code class="language-JavaScript">false || 1;\n</code></pre><p>这句将会得到结果 1。</p><pre><code class="language-JavaScript">false &amp;&amp; undefined;\n</code></pre><p>这句将会得到undefined。</p><p>另外还有一点，就是逻辑表达式具有短路的特性，例如：</p><pre><code class="language-JavaScript">true || foo();\n</code></pre><p>这里的foo将不会被执行，这种中断后面表达式执行的特性就叫做短路。</p><h2>条件表达式 ConditionalExpression</h2><p>条件表达式由逻辑或表达式和条件运算符构成，条件运算符又称三目运算符，它有三个部分，由两个运算符<code>?</code>和<code>:</code>配合使用。</p><pre><code class="language-JavaScript">condition ? branch1 : branch2\n</code></pre><p>这里需要注意，条件表达式也像逻辑表达式一样，可能忽略后面表达式的计算。这一点跟C语言的条件表达式是不一样的。</p><p>条件表达式实际上就是JavaScript中的右值表达式了 RightHandSideExpression，是可以放到赋值运算后面的表达式。</p><h2>总结</h2><p>今天我们讲解了表达式的右边部分，讲到了包括更新表达式、一元运算表达式、乘方表达式、乘法表达式、移位表达式等14种表达式。至此为止，我们已经讲全了表达式。你如果有不熟悉的地方，可以随时回头查阅。</p><p>留一个小任务，我们试着总结下JavaScript中所有的运算符优先级和结合性。例如：</p><p><img src="https://static001.geekbang.org/resource/image/4c/ca/4cb75eb863d5dffe7e9b6b0fb1161aca.jpg" alt=""></p><p></p>',
        article_title:
          "JavaScript语法（四）：新加入的**运算符，哪里有些不一样呢？",
      },
    ],
  },
  {
    chapterTitle: "模块二：HTML和CSS (16讲)",
    children: [
      {
        title: "HTML语义：div和span不是够用了吗？",
        herf: "https://time.geekbang.org/column/article/78158",
        id: "78158",
        content:
          '<p>你好，我是winter。</p><p>今天这篇是我们正式开篇的第一篇文章，我想和你聊聊HTML。</p><p>我猜屏幕那一边的你估计会说：“HTML我很熟悉了，每天写，这不是初级程序员才学的内容么，这我还能不会吗？”</p><p>其实在我看来，HTML并不简单，它是典型的“入门容易，精通困难”的一部分知识。深刻理解HTML是成为优秀的前端工程师重要的一步。</p><p>我们在上一篇文章中讲到了，HTML的标签可以分为很多种，比如head里面的元信息类标签，又比如img、video、audio之类的替换型媒体标签。我今天要讲的标签是：语义类标签。</p><h2>语义类标签是什么，使用它有什么好处？</h2><p>语义类标签也是大家工作中经常会用到的一类标签，它们的特点是视觉表现上互相都差不多，主要的区别在于它们表示了不同的语义，比如大家会经常见到的section、nav、p，这些都是语义类的标签。</p><p>语义是我们说话表达的意思，多数的语义实际上都是由文字来承载的。语义类标签则是纯文字的补充，比如标题、自然段、章节、列表，这些内容都是纯文字无法表达的，我们需要依靠语义标签代为表达。</p><p>在讲语义之前，我们来说说为什么要用语义。</p><p>现在我们很多的前端工程师写起代码来，多数都不用复杂的语义标签， 只靠div 和 span 就能走天下了。</p><!-- [[[read_end]]] --><p>这样做行不行呢？毫无疑问答案是行。那这样做好不好呢？按照正确的套路，我应该说不好，但是在很多情况下，答案其实是好。</p><p>这是因为在现代互联网产品里，HTML用于描述“软件界面”多过于“富文本”，而软件界面里的东西，实际上几乎是没有语义的。比如说，我们做了一个购物车功能，我们一定要给每个购物车里的商品套上ul吗？比如说，加入购物车这个按钮，我们一定要用Button吗？</p><p>实际上我觉得没必要，因为这个场景里面，跟文本中的列表，以及表单中的Button，其实已经相差很远了，所以，我支持在任何“软件界面”的场景中，直接使用div和span。</p><p><strong>不过，在很多工作场景里，语义类标签也有它们自己无可替代的优点。正确地使用语义标签可以带来很多好处。</strong></p><ul>\n<li>语义类标签对开发者更为友好，使用语义类标签增强了可读性，即便是在没有CSS的时候，开发者也能够清晰地看出网页的结构，也更为便于团队的开发和维护。</li>\n<li>除了对人类友好之外，语义类标签也十分适宜机器阅读。它的文字表现力丰富，更适合搜索引擎检索（SEO），也可以让搜索引擎爬虫更好地获取到更多有效信息，有效提升网页的搜索量，并且语义类还可以支持读屏软件，根据文章可以自动生成目录等等。</li>\n</ul><p>不过，不恰当地使用语义标签，反而会造成负面作用。这里我们举一个常见的误区作为例子。我们都知道ul是无序列表，ol是有序列表，所以很多接触过语义这个概念，半懂不懂的前端工程师，特别喜欢给所有并列关系的元素都套上ul。</p><p>实际上， ul 是长成下面的这种样子的(以下来自HTML标准)。</p><p>I have lived in the following countries:</p><ul>\n<li>Switzerland</li>\n<li>Norway</li>\n<li>United Kingdom</li>\n<li>United States</li>\n</ul><p>ul多数出现正在行文中间，它的上文多数在提示：要列举某些项。但是，如果所有并列关系都用ul，会造成大量冗余标签。</p><p>错误地使用语义标签，会给机器阅读造成混淆、增加嵌套，给CSS编写加重负担。</p><p>所以，对于语义标签，<strong>我的态度是：“用对”比“不用”好，“不用”比“用错”好。当然了，我觉得有理想的前端工程师还是应该去追求“用对”它们。</strong></p><hr></hr><p>与JavaScript这样严格的编程语言相比，HTML中语义标签的使用更接近我们平常说话用的自然语言。我们说话并没有唯一的标准措辞，语义标签的使用也是一样。下面，我挑选了几种（我认为）比较重要的语义标签使用场景，来为你介绍一下。</p><h2>作为自然语言延伸的语义类标签</h2><p>其实语义问题不仅仅属于理科，它还是个文科问题。</p><p><strong>所以我们这里讲语义标签的使用的第一个场景，也是最自然的使用场景，就是：作为自然语言和纯文本的补充，用来表达一定的结构或者消除歧义。</strong></p><p>我们先来看看“表达一定的结构”这个场景。</p><p>在日语中，有一个语法现象叫做：ルビ，它的读音是ruby（著名的ruby语言就是据此命名的），它中文的意思大约类似于注音或者意思的注解，它的形式可以看下图：</p><p><img src="https://static001.geekbang.org/resource/image/d4/45/d464f16955d1629b9911699e99d03f45.png" alt=""></p><p>图中的例子选自动画片《某科学的超电磁炮》第二季第一话。图中把teleport放在空间移动上方的用法，就是日文中ruby的用法。“空间移动”是动画中白井黑子的技能，这里动画字幕上写的是“空间移动”，动画里的台词则用了英文发音“Teleport”，这里就形成了一个使用ruby的场景。</p><p>ruby的这个形式，在中国的网友中间最近被玩出了新花样，比如表情包。</p><p><img src="https://static001.geekbang.org/resource/image/67/15/67e0027f9a35eac8170b758f420ff815.jpeg" alt=""></p><p>有时候微信聊天，不能用ruby这样的东西真的是好急啊，只好用括号代替，效果真是差了不少。</p><p>在HTML5中，就引入了这个表示ruby的标签，它由ruby、rt、rp三个标签来实现。</p><p>所以说，这些情况里存在的语义，其实原本就存在了，只是我们用纯文字是没法表达的，HTML作为一种“超文本”语言，支持这些文字表达就是必要的了。</p><p><strong>还有一种情况是，HTML的有些标签实际上就是必要的，甚至必要的程度可以达到：如果没有这个标签，文字会产生歧义的程度。</strong></p><p>这里我们可以介绍一下em标签。</p><pre><code>今天我吃了一个苹果.\n</code></pre><p>我们看看这句话，看上去它很清楚，但是实际上，这句话放到不同上下文中，可能表达完全不同的意思。</p><pre><code>昨天我吃了一个香蕉。\n今天我吃了一个苹果。\n</code></pre><p>再比如：</p><pre><code>昨天我吃了两个苹果。\n今天我吃了一个苹果。\n</code></pre><p>试着读一读，这两段里面的“今天我吃了一个苹果”，你是不是发现读音不自觉地发生了变化？</p><p>实际上，不仅仅是读音，这里的意思也发生了变化。前一段中，表示我今天吃的是苹果，而不是别的什么东西，后一段中，则表示我今天只吃了一个苹果，没有多吃。</p><p>当没有上下文时，如何消除歧义呢？这就要用到我们的em标签了。em表示重音：</p><pre><code>今天我吃了一个&lt;em&gt;苹果&lt;/em&gt;。\n今天我吃了&lt;em&gt;一个&lt;/em&gt;苹果。\n</code></pre><p>通过em标签，我们可以消除这样的歧义。</p><p>一些文章常常会拿em和strong做对比，实际上，我们只要理解了em的真正意思，它和strong可谓天差地别，并没有任何混淆的可能。</p><h2>作为标题摘要的语义类标签</h2><p>介绍完自然语言的语义场景后，我想介绍的另一个语义重要使用场景，就是文章的结构。中国古代小说就形成了“章-回”的概念，西方的戏剧也有幕的区分，所以人类的自然语言作品也是如出一辙。</p><p>HTML也应该支持这样的需求。HTML语义标签中，有不少是用于支持这样的结构的标签。</p><p>语义化的HTML能够支持自动生成目录结构，HTML标准中还专门规定了生成目录结构的算法，即使我们并不打算深入实践语义，也应该尽量在大的层面上保证这些元素的语义化使用。</p><p>首先我们需要形成一个概念，一篇文档会有一个树形的目录结构，它由各个级别的标题组成。这个树形结构可能不会跟HTML元素的嵌套关系一致。</p><pre><code>例如：\n\n&lt;h1&gt;HTML语义&lt;/h1&gt;\n&lt;p&gt;balah balah balah balah&lt;/p&gt;\n&lt;h2&gt;弱语义&lt;/h2&gt;\n&lt;p&gt;balah balah&lt;/p&gt;\n&lt;h2&gt;结构性元素&lt;/h2&gt;\n&lt;p&gt;balah balah&lt;/p&gt;\n......\n</code></pre><p>这段HTML几乎是平铺的元素，但是它的标题结构是：</p><ul>\n<li>HTML语义\n<ul>\n<li>弱语义</li>\n<li>结构性元素</li>\n<li>……</li>\n</ul>\n</li>\n</ul><p>h1-h6是最基本的标题，它们表示了文章中不同层级的标题。有些时候，我们会有副标题，为了避免副标题产生额外的一个层级，我们使用hgroup标签。</p><p>我们来看下有/无hgroup的对比：</p><pre><code>&lt;h1&gt;JavaScript对象&lt;/h1&gt;\n&lt;h2&gt;我们需要模拟类吗？&lt;/h2&gt;\n&lt;p&gt;balah balah&lt;/p&gt;\n......\n</code></pre><p>此段生成以下标题结构：</p><ul>\n<li>JavaScript对象\n<ul>\n<li>我们需要模拟类吗？</li>\n<li>…</li>\n</ul>\n</li>\n</ul><pre><code>&lt;hgroup&gt;\n&lt;h1&gt;JavaScript对象&lt;/h1&gt;\n&lt;h2&gt;我们需要模拟类吗？&lt;/h2&gt;\n&lt;/hgroup&gt;\n&lt;p&gt;balah balah&lt;/p&gt;\n......\n</code></pre><p>这一段生成以下标题结构：</p><ul>\n<li>JavaScript对象——我们需要模拟类吗？\n<ul>\n<li>…</li>\n</ul>\n</li>\n</ul><p>我们通过两个效果的对比就可以知道，在hgroup中的h1-h6被视为同一标题的不同组成部分。</p><p>从HTML 5开始，我们有了section标签，这个标签可不仅仅是一个“有语义的div”，它会改变h1-h6的语义。section的嵌套会使得其中的h1-h6下降一级，因此，在HTML5以后，我们只需要section和h1就足以形成文档的树形结构：</p><pre><code>&lt;section&gt;\n    &lt;h1&gt;HTML语义&lt;/h1&gt;\n    &lt;p&gt;balah balah balah balah&lt;/p&gt;\n    &lt;section&gt;\n        &lt;h1&gt;弱语义&lt;/h1&gt;\n        &lt;p&gt;balah balah&lt;/p&gt;\n    &lt;/section&gt;\n    &lt;section&gt;\n        &lt;h1&gt;结构性元素&lt;/h1&gt;\n        &lt;p&gt;balah balah&lt;/p&gt; \n    &lt;/section&gt;\n......\n&lt;/section&gt;\n</code></pre><p>这段代码同样会形成前面例子的标题结构：</p><ul>\n<li>HTML语义\n<ul>\n<li>弱语义</li>\n<li>结构性元素</li>\n<li>……</li>\n</ul>\n</li>\n</ul><h2>作为整体结构的语义类标签</h2><p>我们想介绍的最后一个场景是，随着越来越多的浏览器推出“阅读模式”，以及各种非浏览器终端的出现，语义化的HTML适合机器阅读的特性变得越来越重要。</p><p>应用了语义化结构的页面，可以明确地提示出页面信息的主次关系，它能让浏览器很好地支持“阅读视图功能”，还可以让搜索引擎的命中率提升，同时，它也对视障用户的读屏软件更友好。</p><p>我们正确使用整体结构类的语义标签，可以让页面对机器更友好。比如，这里一个典型的body类似这样：</p><pre><code>&lt;body&gt;\n    &lt;header&gt;\n        &lt;nav&gt;\n            ……\n        &lt;/nav&gt;\n    &lt;/header&gt;\n    &lt;aside&gt;\n        &lt;nav&gt;\n            ……\n        &lt;/nav&gt;\n    &lt;/aside&gt;\n    &lt;section&gt;……&lt;/section&gt;\n    &lt;section&gt;……&lt;/section&gt;\n    &lt;section&gt;……&lt;/section&gt;\n    &lt;footer&gt;\n        &lt;address&gt;……&lt;/address&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n</code></pre><p>在body下面，有一个header，header里面是一个nav，跟header同级的有一个aside，aside里面也有一个nav。接下来是文章的整体，也就是一个一个的section。section里面可能还有嵌套，但是我们就不管了，最后是一个footer，这个footer里面可能有address这样的内容。</p><p>除此之外，还有article，article是一种特别的结构，它表示具有一定独立性质的文章。所以，article和body具有相似的结构，同时，一个HTML页面中，可能有多个article存在。</p><p>一个典型的场景是多篇新闻展示在同一个新闻专题页面中，这种类似报纸的多文章结构适合用article来组织。</p><pre><code>&lt;body&gt;\n    &lt;header&gt;……&lt;/header&gt;\n    &lt;article&gt;\n        &lt;header&gt;……&lt;/header&gt;\n        &lt;section&gt;……&lt;/section&gt;\n        &lt;section&gt;……&lt;/section&gt;\n        &lt;section&gt;……&lt;/section&gt;\n        &lt;footer&gt;……&lt;/footer&gt;\n    &lt;/article&gt;\n    &lt;article&gt;\n        ……\n    &lt;/article&gt;\n    &lt;article&gt;\n        ……\n    &lt;/article&gt;\n    &lt;footer&gt;\n        &lt;address&gt;&lt;/address&gt;\n    &lt;/footer&gt;\n&lt;/body&gt;\n</code></pre><p>body里面有自己的header和footer，然后里面是竖篇的article，每一个article里面都有自己的header、section、footer。这是一个典型的多文章结构。</p><p>在这个结构里，我们看到了一些新标签，我也来逐个介绍一下。</p><ul>\n<li>header，如其名，通常出现在前部，表示导航或者介绍性的内容。</li>\n<li>footer，通常出现在尾部，包含一些作者信息、相关链接、版权信息等。</li>\n</ul><p>header和footer一般都是放在article或者body的直接子元素，但是标准中并没有明确规定，footer也可以和aside，nav，section相关联（header不存在关联问题）。</p><ul>\n<li>aside表示跟文章主体不那么相关的部分，它可能包含导航、广告等工具性质的内容。</li>\n</ul><p>aside很容易被理解为侧边栏，实际上二者是包含关系，侧边栏是aside，aside不一定是侧边栏。</p><p>aside和header中都可能出现导航（nav标签），二者的区别是，header中的导航多数是到文章自己的目录，而aside中的导航多数是到关联页面或者是整站地图。</p><p>最后footer中包含address，这是个非常容易被误用的标签。address并非像date一样，表示一个给机器阅读的地址，而是表示“文章（作者）的联系方式”，address明确地只关联到article和body。</p><h2>总结</h2><p>本篇中我们介绍了一些基本原则和HTML文档的整体结构，从整体上了解了HTML语义。</p><p>至此，我们可以回答是否要语义化的问题：我们应该分开一些场景来看语义，把它用在合适的场景下，可以获得额外的效果。本篇文中，我们至少涉及了三个明确的场景：</p><ul>\n<li>自然语言表达能力的补充；</li>\n<li>文章标题摘要；</li>\n<li>适合机器阅读的整体结构。</li>\n</ul><p>下一篇中，我们会继续深入到更细致的结构中，进一步了解语义。你在工作中是否在使用语义化的标签开发？学习过本篇之后，答案有没有变化呢？你可以给我留言，我们一起讨论。</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "HTML语义：div和span不是够用了吗？",
      },
      {
        title: "HTML语义：如何运用语义类标签来呈现Wiki网页？",
        herf: "https://time.geekbang.org/column/article/78168",
        id: "78168",
        content:
          '<p>你好，我是winter，今天我们继续来聊聊HTML模块的语义类标签。</p><p>在上一篇文章中，我花了大量的篇幅和你解释了正确使用语义类标签的好处和一些场景。那么，哪些场景适合用到语义类标签呢，又如何运用语义类标签呢？</p><p>不知道你还记不记得在大学时代，你被导师逼着改毕业论文格式的情景，如果你回想一下，你在论文中使用的那些格式，你会发现其实它们都是可以用HTML里的语义标签来表示的。</p><p>这正是因为HTML最初的设计场景就是“超文本”，早期HTML工作组的专家都是出版界书籍排版的专家。</p><p>所以，在这一部分，我们找了个跟论文很像的案例：Wikipedia文章，这种跟论文相似的网站比较适合用来学习语义类标签。通过分析一篇Wiki的文章用到的语义类标签，来进一步帮你理解语义的概念。</p><p>你可以在电脑上，打开这个页面：</p><ul>\n<li><a href="https://en.wikipedia.org/wiki/World_Wide_Web">https://en.wikipedia.org/wiki/World_Wide_Web</a></li>\n</ul><p><span class="reference">为了防止这个页面被修改，我们保存了一个副本：</span></p><ul>\n<li><a href="http://static001.geekbang.org/static/time/quote/World_Wide_Web-Wikipedia.html">http://static001.geekbang.org/static/time/quote/World_Wide_Web-Wikipedia.html</a></li>\n</ul><p>这是一篇我们选择的Wiki文章，虽然在原本的Wikipedia网站中，也是大量使用了div和span来完成功能。在这里，我们来尝试分析一下，应该如何用语义类标签来呈现这样的一个页面/文章。</p><!-- [[[read_end]]] --><p>我们看一下这个页面。</p><h2>aside</h2><p><img src="https://static001.geekbang.org/resource/image/b6/da/b692ade1e78d295de52ffe01edaa11da.png" alt=""></p><p>首先我们来看下，左侧侧边栏，根据上一篇文章中提到的语义定义，这里属于aside内容。是导航性质的工具内容。</p><h2>article</h2><p><img src="https://static001.geekbang.org/resource/image/cf/aa/cfc9a6542e0fc973e6e871043e7e42aa.jpeg" alt=""></p><p>我们来到文章主体部分，因为主体部分具有明确的独立性，所以可以用article来包裹。</p><h2>hgroup, h1, h2</h2><p><img src="https://static001.geekbang.org/resource/image/7d/48/7ddad196e7734fd32bfc577b3a459c48.jpeg" alt=""></p><p>在语义的上一篇文章中，我们介绍过hgroup和h1-h6的作用，hgroup是标题组，h1是一级标题，h2是二级标题。这里，World Wide Web 是文章的大标题，适合h1元素。</p><p>接下来出现了一个副标题。From Wikipedia, the free encyclopedia。这个地方适合使用h2，跟h1组成一个hgroup，所以代码可能是类似这样的:</p><pre><code class="language-html">&lt;hgroup&gt;\n&lt;h1&gt;World Wide Web &lt;/h1&gt;\n&lt;h2&gt;From Wikipedia, the free encyclopedia&lt;/h2&gt;\n&lt;/hgroup&gt;\n</code></pre><h2>abbr</h2><p><img src="https://static001.geekbang.org/resource/image/13/72/139b1603d3851b11e9ee4ed955aec972.png" alt=""></p><p>abbr标签表示缩写。考虑到WWW是World Wide Web的缩写，所以文中所有出现的WWW，都应该使用abbr标签。</p><pre><code class="language-html">&lt;abbr title="World Wide Web"&gt;WWW&lt;/abbr&gt;.\n</code></pre><h2>hr</h2><p><img src="https://static001.geekbang.org/resource/image/3e/1e/3e3fca7df41dd824da47efca4aa2731e.jpeg" alt=""></p><p>细心的同学会发现，在Wiki的界面中，出现了一条很长的横线，大家都知道hr标签表示横向分隔线，那么这个地方是不是应该用hr呢？</p><p>答案是不用。我们读一下标准的定义就知道了，hr表示故事走向的转变或者话题的转变，显然此处两个标题并非这种关系，所以我们应该使用CSS的border来把它当作纯视觉效果来实现，所以这里是不需要用hr的。</p><h2>p</h2><p><img src="https://static001.geekbang.org/resource/image/a5/d4/a5c22955f87e2861cadfa3fdb15565d4.jpeg" alt=""></p><p>接下来一段，我们看到了三段“note”，也就是注记。它在文章中用作额外注释。</p><blockquote>\n<p>“WWW” and “The Web” redirect here. For other uses of WWW, see WWW (disambiguation). For other uses of web, see Web (disambiguation).</p>\n<p>For the first web software, see WorldWideWeb.</p>\n<p>Not to be confused with the Internet.</p>\n</blockquote><p>HTML中并没有note相关的语义，所以，我们用普通的p标签，加上<code>class="note"</code>来实现。后面的多数自然段都是普通的段落，我们用p标签来实现。</p><h2>strong</h2><p><img src="https://static001.geekbang.org/resource/image/d7/a1/d7f8b1f98df1488813c3fc2d6b06d5a1.jpeg" alt=""></p><p>注意，这里 “World Wide Web (WWW)” 和 “the Web” 使用了黑体呈现，从上下文来看，这里表示这个词很重要，所以我们使用strong标签。</p><pre><code>&lt;p&gt; \nA global map of the web index for countries in 2014\n&lt;strong&gt;The World Wide Web (WWW)&lt;/strong&gt;, also called &lt;strong&gt;the Web&lt;/strong&gt;,\n......\n</code></pre><h2>blockquote, q, cite</h2><p><img src="https://static001.geekbang.org/resource/image/e5/1a/e516e5e00ecc5b6b0b743dd2a8d65d1a.png" alt=""></p><p>接下来我们看到了一个论文中很常见的用法“引述”。</p><blockquote>\n<p>interlinked by hypertext links, and accessible via the Internet.[1]</p>\n</blockquote><p>注意看这里的[1]，当我们把鼠标放上去的时候，出现了引述的相关信息：</p><blockquote>\n<p>“What is the difference between the Web and the Internet?”. W3C Help and FAQ. W3C. 2009. Archived from the original on 9 July 2015. Retrieved 16 July 2015.</p>\n</blockquote><p>在HTML中，有三个跟引述相关的标签blockquote表示段落级引述内容，q表示行内的引述内容，cite表示引述的作品名。</p><p>这里的作品名称 “What is the difference between the Web and the Internet?”，应当使用cite标签。</p><pre><code>&lt;cite&gt;&quot;What is the difference between the Web and the Internet?&quot;&lt;/cite&gt;. W3C Help and FAQ. W3C. 2009. Archived from the original on 9 July 2015. Retrieved 16 July 2015.\n</code></pre><p>在文章的结尾处，有对应的 References 一节，这一节中所有的作品名称也应该加入cite标签。</p><p><img src="https://static001.geekbang.org/resource/image/31/45/31246e3ebf6426bfd6b1373a0644b245.png" alt=""></p><p>这里我们看看引用的原文就可以知道，Wiki文章中的信息并非直接引用，如果是直接引用的内容，那么，我们还应该加上blockquote或者q标签。</p><h2>time</h2><p><img src="https://static001.geekbang.org/resource/image/95/b6/9573647112ae3812013b37c29aa7d2b6.png" alt=""></p><p>这里除了引用的文章外，还出现了日期，为了让机器阅读更加方便，可以加上time标签：</p><pre><code>&lt;cite&gt;&quot;What is the difference between the Web and the Internet?&quot;&lt;/cite&gt;. W3C Help and FAQ. W3C. 2009. Archived from the original on &lt;time datetime=&quot;2015-07-09&quot;&gt;9 July 2015&lt;/time&gt;. Retrieved &lt;time datetime=&quot;2015-07-16&quot;&gt;16 July 2015&lt;/time&gt;.\n</code></pre><h2>figure, figcaption</h2><p><img src="https://static001.geekbang.org/resource/image/6d/72/6d473b6fb734ea85a8cc209bc1716b72.png" alt=""></p><p>我们注意一下文章的右侧，出现了几张图片，这种出现在文中的图片，不仅仅是一个img标签，它和下面的文字组成了一个figure的语法现象，figure也是我们的一种标签（用于表示与主文章相关的图像、照片等流内容）。</p><pre><code>&lt;figure&gt;\n &lt;img src=&quot;https://.....440px-NeXTcube_first_webserver.JPG&quot;/&gt;\n &lt;figcaption&gt;The NeXT Computer used by Tim Berners-Lee at CERN.&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre><p>这种插入文章中的内容，不仅限图片，代码、表格等，只要是具有一定自包含性（类似独立句子）的内容，都可以用figure。这里面，我们用figcaption表示内容的标题，当然，也可以没有标题。</p><h2>dfn</h2><p><img src="https://static001.geekbang.org/resource/image/b7/19/b7ae53127450b496729edd459cbc0619.png" alt=""></p><p>然后我们继续往下看，来注意这一句：</p><blockquote>\n<p>The terms Internet and World Wide Web are often used without much distinction. However, the two are not the same. The Internet is a global system of interconnected computer networks. In contrast, the World Wide Web is a global collection of documents and other resources, linked by hyperlinks and URIs.</p>\n</blockquote><p>这里分别定义了Internet和World Wide Web，我们应该使用dfn标签。</p><pre><code>\nThe terms Internet and World Wide Web are often used without much distinction. However, the two are not the same. \nThe &lt;dfn&gt;Internet&lt;/dfn&gt; is a global system of interconnected computer networks.\nIn contrast, the &lt;dfn&gt;World Wide Web&lt;/dfn&gt; is a global collection of documents and other resources, linked by hyperlinks and URIs. \n\n</code></pre><p>代码中你可以看见，你需要在你要定义的词前后放上dfn标签，所以我们知道了，dfn标签是用来包裹被定义的名词。</p><h2>nav, ol, ul</h2><p><img src="https://static001.geekbang.org/resource/image/c1/f6/c12c129af98f6aa99b7dcdbdef1f62f6.png" alt=""></p><p>接下来，几个普通的段落之后，我们看到了文章的目录。这里的目录链接到文章的各个章节，我们可以使用nav标签。因为这里的目录顺序不可随意变化，所以我们这里使用多级的ol结构。</p><pre><code>&lt;nav&gt;\n  &lt;h2&gt;Contents&lt;/h2&gt;\n  &lt;ol&gt;\n    &lt;li&gt;&lt;a href=&quot;...&quot;&gt;History&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=&quot;...&quot;&gt;Function&lt;/a&gt;\n      &lt;ol&gt;\n        &lt;li&gt;&lt;a href=&quot;...&quot;&gt;Linking&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=&quot;...&quot;&gt;Dynamic updates of web pages&lt;/a&gt;&lt;/li&gt;\n        ...\n      &lt;/ol&gt;\n    &lt;/li&gt;\n    ...\n  &lt;/ol&gt;\n&lt;/nav&gt;\n</code></pre><p>我们这里必须要指出，ol和ul的区分是内容是否有顺序关系，每一项的前面不论是数字还是点，都不会影响语义的判断。所以，你可以注意一下这里，不要因为视觉表现效果，而改变语义的使用。</p><h2>pre, samp, code</h2><p><img src="https://static001.geekbang.org/resource/image/ab/ed/ab5be608e3b4d2bd15b79c5b8885a2ed.png" alt=""></p><p>继续往下，我们来到了这里，我们看见这篇文章有一个很重要的特色，文章中嵌入了一些代码和一些预先编写好的段落。我们看到在“Function”小节中有一段背景色是灰色的文字。</p><pre><code>GET /home.html HTTP/1.1\nHost: www.example.org\n</code></pre><p>这是一段HTTP协议的内容描述，因为这段内容的换行是非常严格的，所以我们不需要浏览器帮我们做自动换行，因此我们使用了pre标签，表示这部分内容是预先排版过的，不需要浏览器进行排版。</p><p>又因为这是一段计算机程序的示例输出，所以我们可以使用samp标签：</p><pre><code>&lt;pre&gt;&lt;samp&gt;\nGET /home.html HTTP/1.1\nHost: www.example.org\n&lt;/samp&gt;&lt;/pre&gt;\n</code></pre><p>接下来Wiki中的内容出现了一段HTML代码，我们同样不希望浏览器做自动换行。</p><pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Example.org – The World Wide Web&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;The World Wide Web, abbreviated as WWW and commonly known ...&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>因为同时是代码，我们还需要加上code标签。最后的代码是pre标签包裹了code标签，code标签包裹了HTML代码。</p><pre><code>&lt;pre&gt;&lt;code&gt;\n&amp;lt;html&amp;gt;\n  &amp;lt;head&amp;gt;\n    &amp;lt;title&amp;gt;Example.org – The World Wide Web&amp;lt;/title&amp;gt;\n  &amp;lt;/head&amp;gt;\n  &amp;lt;body&amp;gt;\n    &amp;lt;p&amp;gt;The World Wide Web, abbreviated as WWW and commonly known ...&amp;lt;/p&amp;gt;\n  &amp;lt;/body&amp;gt;\n&amp;lt;/html&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre><p>在后面的代码中，还有一些在行内的code，比如 title和 p括起来的内容，这些也都应该使用code标签。</p><h3>总结</h3><p>在这一篇Wiki文章中，已经涉及了大部分语义标签，可见HTML工作组对语义标签的增加是非常谨慎和保守的。</p><p>当然了，我们选择的案例不可能刚巧覆盖所有的标签，还有些没讲到的标签，我们这里稍微做一下简要的补充说明。</p><p><img src="https://static001.geekbang.org/resource/image/96/9e/9684130e423b6734b23652f4f0b6359e.jpg" alt=""></p><p>（长按点击大图查看）</p><p>实际上，HTML这种语言，并不像严谨的编程语言一样，有一条非此即彼的线。一些语义的使用其实会带来争议，所以我的建议是：你可以尽量只用自己熟悉的语义标签，并且只在有把握的场景引入语义标签。这样，我们才能保证语义标签不被滥用，造成更多的问题。</p><p>你最擅长使用哪些语义标签，会把它们用在哪些场景里呢？欢迎留言告诉我，我们一起讨论。</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "HTML语义：如何运用语义类标签来呈现Wiki网页？",
      },
      {
        title: "CSS语法：除了属性和选择器，你还需要知道这些带@的规则",
        herf: "https://time.geekbang.org/column/article/80042",
        id: "80042",
        content:
          '<p>你好，我是winter。</p><p>今天我们进入CSS的学习。CSS是前端工程师几乎每天都要用的技术了，不过CSS的学习资料却是最糟糕的，这是因为CSS并没有像HTML和JavaScript那样的一份标准文档。</p><p>如果我们到W3C的网站上搜索看看，可以得到一些信息：</p><ul>\n<li><a href="https://www.w3.org/TR/?title=css">https://www.w3.org/TR/?title=css</a></li>\n</ul><p>在这里，我们一共看到了98份CSS相关的标准，它们各自从一些角度规定了CSS的特性。</p><p>这里我们暂且去掉Working Draft状态的标准，可以得到22份候选标准和6份推荐标准。</p><p>既然我们的专栏内容强调去系统性学习CSS，于是，面对这22+6份标准，我们就又需要一条线索，才能把这些离散的标准组织成易于理解和记忆的形式。</p><p>在这样的需求下，我找到的线索就是CSS语法，任何CSS的特性都必须通过一定的语法结构表达出来，所以语法可以帮助我们发现大多数CSS特性。</p><p>CSS语法的最新标准，你可以戳这里查看：</p><ul>\n<li><a href="https://www.w3.org/TR/css-syntax-3/">https://www.w3.org/TR/css-syntax-3/</a></li>\n</ul><p>这篇文档的阅读体验其实是非常糟糕的，它对CSS语法的描述使用了类似LL语法分析的伪代码，而且没有描述任何具体的规则。</p><p>这里你就不必自己去阅读了，我来把其中一些有用的关键信息抽取出来描述一下，我们一起来看看。</p><!-- [[[read_end]]] --><p>我们拿到这份标准可以看到，去除空格、HTML注释等无效信息，<strong>CSS的顶层样式表由两种规则组成的规则列表构成，一种被称为 at-rule，也就是at 规则，另一种是 qualified rule，也就是普通规则。</strong></p><p>at-rule由一个 @ 关键字和后续的一个区块组成，如果没有区块，则以分号结束。这些at-rule在开发中使用机会远远小于普通的规则，所以它的大部分内容，你可能会感觉很陌生。</p><p>这些at规则正是掌握CSS的一些高级特性所必须的内容。qualified rule则是指普通的CSS规则，也就是我们所熟识的，由选择器和属性指定构成的规则。</p><h2>at 规则</h2><p>好了，现在我们已经知道了，CSS语法的整体结构，接下来我们要做的是一个体力活，从所有的CSS标准里找到所有可能的 at-rule（不用谢，我已经帮你找好了，如果页面定位不准，你可以打开页面搜索关键字）。</p><ul>\n<li>@charset ： <a href="https://www.w3.org/TR/css-syntax-3/">https://www.w3.org/TR/css-syntax-3/</a></li>\n<li>@import ：<a href="https://www.w3.org/TR/css-cascade-4/">https://www.w3.org/TR/css-cascade-4/</a></li>\n<li>@media ：<a href="https://www.w3.org/TR/css3-conditional/">https://www.w3.org/TR/css3-conditional/</a></li>\n<li>@page ： <a href="https://www.w3.org/TR/css-page-3/">https://www.w3.org/TR/css-page-3/</a></li>\n<li>@counter-style ：<a href="https://www.w3.org/TR/css-counter-styles-3">https://www.w3.org/TR/css-counter-styles-3</a></li>\n<li>@keyframes ：<a href="https://www.w3.org/TR/css-animations-1/">https://www.w3.org/TR/css-animations-1/</a></li>\n<li>@fontface ：<a href="https://www.w3.org/TR/css-fonts-3/">https://www.w3.org/TR/css-fonts-3/</a></li>\n<li>@supports ：<a href="https://www.w3.org/TR/css3-conditional/">https://www.w3.org/TR/css3-conditional/</a></li>\n<li>@namespace ：<a href="https://www.w3.org/TR/css-namespaces-3/">https://www.w3.org/TR/css-namespaces-3/</a></li>\n</ul><p>这里的每一种@规则背后，都是一组CSS的知识。在我们的课程中，有些会重点介绍，不过，为了先给你建立起一个整体的认知，我们这里会给所有的@规则提供一些简单的例子和介绍。</p><h3>@charset</h3><p>@charset用于提示CSS文件使用的字符编码方式，它如果被使用，必须出现在最前面。这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。</p><pre><code class="language-CSS">@charset "utf-8";\n</code></pre><h3>@import</h3><p>@import用于引入一个CSS文件，除了@charset规则不会被引入，@import可以引入另一个文件的全部内容。</p><pre><code class="language-CSS">@import "mystyle.css";\n@import url("mystyle.css");\n</code></pre><pre><code>@import [ &lt;url&gt; | &lt;string&gt; ]\n        [ supports( [ &lt;supports-condition&gt; | &lt;declaration&gt; ] ) ]?\n        &lt;media-query-list&gt;? ;\n</code></pre><p>通过代码，我们可以看出，import还支持 supports 和media query形式。</p><h3>@media</h3><p>media就是大名鼎鼎的media query使用的规则了，它能够对设备的类型进行一些判断。在media的区块内，是普通规则列表。</p><pre><code class="language-CSS">@media print {\n    body { font-size: 10pt }\n}\n</code></pre><h3>@page</h3><p>page用于分页媒体访问网页时的表现设置，页面是一种特殊的盒模型结构，除了页面本身，还可以设置它周围的盒。</p><pre><code class="language-CSS">@page {\n  size: 8.5in 11in;\n  margin: 10%;\n\n  @top-left {\n    content: "Hamlet";\n  }\n  @top-right {\n    content: "Page " counter(page);\n  }\n}\n</code></pre><h3>@ counter-style</h3><p>counter-style产生一种数据，用于定义列表项的表现。</p><pre><code class="language-CSS">@counter-style triangle {\n  system: cyclic;\n  symbols: ‣;\n  suffix: " ";\n}\n</code></pre><h3>@ key-frames</h3><p>keyframes产生一种数据，用于定义动画关键帧。</p><pre><code class="language-CSS">@keyframes diagonal-slide {\n\n  from {\n    left: 0;\n    top: 0;\n  }\n\n  to {\n    left: 100px;\n    top: 100px;\n  }\n\n}\n</code></pre><h3>@ fontface</h3><p>fontface用于定义一种字体，icon font技术就是利用这个特性来实现的。</p><pre><code>@font-face {\n  font-family: Gentium;\n  src: url(http://example.com/fonts/Gentium.woff);\n}\n\np { font-family: Gentium, serif; }\n</code></pre><h3>@ support</h3><p>support检查环境的特性，它与media比较类似。</p><h3>@ namespace</h3><p>用于跟XML命名空间配合的一个规则，表示内部的CSS选择器全都带上特定命名空间。</p><h3>@ viewport</h3><p>用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被HTML的meta代替。</p><h3>其它</h3><p>除了以上这些，还有些目前不太推荐使用的at规则。</p><ul>\n<li>@color-profile 是 SVG1.0 引入的CSS特性，但是实现状况不怎么好。</li>\n<li>@document 还没讨论清楚，被推迟到了CSS4中。</li>\n<li>@font-feature-values 。</li>\n</ul><h2>普通规则</h2><p>接下来我们进入qualified rule，也就是普通规则的部分，看看这里有什么需要我们记住的内容。</p><p>qualified rule主要是由选择器和声明区块构成。声明区块又由属性和值构成。我在下面的列表中，介绍了这部分语法的组成要点。</p><ul>\n<li>普通规则\n<ul>\n<li>选择器</li>\n<li>声明列表\n<ul>\n<li>属性</li>\n<li>值\n<ul>\n<li>值的类型</li>\n<li>函数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><h3>选择器</h3><p>我们先来看看选择器，它有一份独立的标准，我们可以参考这个网址：</p><p><a href="https://www.w3.org/TR/selectors-4/">https://www.w3.org/TR/selectors-4/</a></p><p>这份标准不在我们前面的过滤条件中，它属于CSS和HTML共用的标准。</p><p>关于选择器的叠加规则等知识我们后文会专门的一节课程来讲，这里我们就从语法的角度介绍一下选择器。</p><p>在选择器标准的最后，附有一张选择器的语法表，从这份语法表，我们可以理清楚记忆选择器的思路。</p><p>我们从语法结构可以看出，任何选择器，都是由几个符号结构连接的：空格、大于号、加号、波浪线、双竖线，这里需要注意一下，空格，即为后代选择器的优先级较低。</p><p>然后对每一个选择器来说，如果它不是伪元素的话，由几个可选的部分组成，标签类型选择器，id、class、属性和伪类，它们中只要出现一个，就构成了选择器。</p><p>如果它是伪元素，则在这个结构之后追加伪元素。只有伪类可以出现在伪元素之后。我在下面用一个列表（不太严谨地）整理了选择器的语法结构：<br>\n<img src="https://static001.geekbang.org/resource/image/4f/67/4fa32e5cf47c72a58f7a8211d4e8fc67.png" alt=""></p><p>我们在这里可以参考一个示例图：</p><p><img src="https://static001.geekbang.org/resource/image/8b/7c/8bdd0a249ab1dbf8b854b2decd7eb87c.png" alt=""></p><p>（语法结构分析示例）<br>\n看完了选择器，我们继续来看看声明部分的语法。</p><h2>声明：属性和值</h2><p>声明部分是一个由“属性:值”组成的序列。</p><p><strong>属性</strong>是由中划线、下划线、字母等组成的标识符，CSS还支持使用反斜杠转义。我们需要注意的是：属性不允许使用连续的两个中划线开头，这样的属性会被认为是CSS变量。</p><p>在<a href="https://www.w3.org/TR/css-variables/">CSS Variables标准</a>中，以双中划线开头的属性被当作变量，与之配合的则是 var 函数：</p><pre><code>:root {\n  --main-color: #06c;\n  --accent-color: #006;\n}\n/* The rest of the CSS file */\n#foo h1 {\n  color: var(--main-color);\n}\n</code></pre><p><strong>值</strong>的部分，主要<a href="https://www.w3.org/TR/css-values-4/">在标准 CSS Values and Unit</a>，根据每个CSS属性可以取到不同的值，这里的值可能是字符串、标识符。</p><p>CSS属性值可能是以下类型。</p><ul>\n<li>CSS范围的关键字：initial，unset，inherit，任何属性都可以的关键字。</li>\n<li>字符串：比如content属性。</li>\n<li>URL：使用url() 函数的URL值。</li>\n<li>整数/实数：比如flex属性。</li>\n<li>维度：单位的整数/实数，比如width属性。</li>\n<li>百分比：大部分维度都支持。</li>\n<li>颜色：比如background-color属性。</li>\n<li>图片：比如background-image属性。</li>\n<li>2D位置：比如background-position属性。</li>\n<li>函数：来自函数的值，比如transform属性。</li>\n</ul><p>这里我们要重点介绍一下函数。一些属性会要求产生函数类型的值，比如easing-function会要求cubic-bezier()函数的值：</p><p>CSS支持一批特定的计算型函数：</p><ul>\n<li>calc()</li>\n<li>max()</li>\n<li>min()</li>\n<li>clamp()</li>\n<li>toggle()</li>\n<li>attr()</li>\n</ul><p><strong>calc()</strong>函数是基本的表达式计算，它支持加减乘除四则运算。在针对维度进行计算时，calc()函数允许不同单位混合运算，这非常的有用。</p><p>例如：</p><pre><code class="language-CSS">section {\n  float: left;\n  margin: 1em; border: solid 1px;\n  width: calc(100%/3 - 2*1em - 2*1px);\n}\n</code></pre><p><strong>max()、min()和clamp()</strong>则是一些比较大小的函数，max()表示取两数中较大的一个，min()表示取两数之中较小的一个，clamp()则是给一个值限定一个范围，超出范围外则使用范围的最大或者最小值。</p><p>toggle()函数在规则选中多于一个元素时生效，它会在几个值之间来回切换，比如我们要让一个列表项的样式圆点和方点间隔出现，可以使用下面代码：</p><pre><code class="language-CSS">ul { list-style-type: toggle(circle, square); }\n</code></pre><p>attr()函数允许CSS接受属性值的控制。</p><h2>总结</h2><p>在这一部分，我们介绍了CSS语法的总体结构，CSS的语法总体结构是由两种规则列表构成，一种是at 规则，另一种是普通规则。</p><p>在at规则中，我举了13个以上的例子，并逐个进行了简单的介绍。而在普通规则的部分，我介绍了选择器和声明区块是普通规则的主要组成部分。</p><p>并且，我给出了一个（不太严谨）的选择器语法结构，声明区块则由属性和值构成，这一部分我们重点介绍了函数。</p><p>从整体上去掌握内容，再去定位到单个细节，这对于我们学习CSS有非常重要的提示作用。</p><p>最后，给你留一个思考问题，CSS的函数有很多，本文也提到了不少，请你也一起查阅资料，试着总结一下，你能找到多少种CSS函数？</p><p></p>',
        article_title: "CSS语法：除了属性和选择器，你还需要知道这些带@的规则",
      },
      {
        title: "HTML元信息类标签：你知道head里一共能写哪几种标签吗？",
        herf: "https://time.geekbang.org/column/article/82711",
        id: "82711",
        content:
          "<p>你好，我是winter。</p><p>我们在前面的HTML部分的课程中，已经学习了语义标签。这些标签涵盖了我们日常开发用到的多数标签，也是我们编写代码时最常用的一批标签。</p><p>但是我们今天要讲的标签，重要性丝毫不弱于语义类标签，这就是页面元信息类标签。</p><p>我们可以先来了解一下什么是元信息类标签。所谓元信息，是指描述自身的信息，元信息类标签，就是HTML用于描述文档自身的一类标签，它们通常出现在head标签中，一般都不会在页面被显示出来（与此相对，其它标签，如语义类标签，描述的是业务）。</p><p>元信息多数情况下是给浏览器、搜索引擎等机器阅读的，有时候这些信息会在页面之外显示给用户，有时候则不会。</p><p>元信息类标签数量不多，我在这里就逐一为你介绍一下。</p><h2>head标签</h2><p>首先我们先来了解一下head标签，head标签本身并不携带任何信息，它主要是作为盛放其它语义类标签的容器使用。</p><p>head标签规定了自身必须是html标签中的第一个标签，它的内容必须包含一个title，并且最多只能包含一个base。如果文档作为iframe，或者有其他方式指定了文档标题时，可以允许不包含title标签。</p><h2>title标签</h2><p>title标签表示文档的标题，从字面上就非常容易理解。这里我就讲讲需要注意的地方。</p><!-- [[[read_end]]] --><p>你还记得吗，我们的语义类标签中也有一组表示标题的标签：h1-h6。</p><p>heading 和 title 两个英文单词意义区分十分微妙，在中文中更是找不到对应的词汇来区分。但是实际使用中，两者确实有一定区别。</p><p>在HTML标准中，特意讨论了这个问题。我们思考一下，假设有一个介绍蜜蜂跳舞求偶仪式的科普页面，我们试着把以下两个文字分别对应到title和h1。</p><ul>\n<li>蜜蜂求偶仪式舞蹈</li>\n<li>舞蹈</li>\n</ul><p>在听/看正确答案前，你不妨先想想，自己的答案是什么呢？为什么？</p><p>好了，思考之后，我们来看看正确答案。正确答案是“蜜蜂求偶仪式舞蹈”放入title，“舞蹈”放入h1。</p><p>我来讲一讲为什么要这样放呢？这主要是考虑到title作为元信息，可能会被用在浏览器收藏夹、微信推送卡片、微博等各种场景，这时侯往往是上下文缺失的，所以title应该是完整地概括整个网页内容的。</p><p>而h1则仅仅用于页面展示，它可以默认具有上下文，并且有链接辅助，所以可以简写，即便无法概括全文，也不会有很大的影响。</p><h2>base标签</h2><p>base标签实际上是个历史遗留标签。它的作用是给页面上所有的URL相对地址提供一个基础。</p><p>base标签最多只有一个，它改变全局的链接地址，它是一个非常危险的标签，容易造成跟JavaScript的配合问题，所以在实际开发中，我比较建议你使用JavaScript来代替base标签。</p><h2>meta标签</h2><p>meta标签是一组键值对，它是一种通用的元信息表示标签。</p><p>在head中可以出现任意多个meta标签。一般的meta标签由name和content两个属性来定义。name表示元信息的名，content则用于表示元信息的值。</p><p>它基本用法是下面这样的，你也可以自己动手尝试一下：</p><pre><code>  &lt;meta name=application-name content=&quot;lsForums&quot;&gt;\n</code></pre><p>这个标签表示页面所在的web-application，名为IsForums。</p><p>这里的name是一种比较自由的约定，HTTP标准规定了一些name作为大家使用的共识，也鼓励大家发明自己的name来使用。</p><p>除了基本用法，meta标签还有一些变体，主要用于简化书写方式或者声明自动化行为。下面我就挑几种重点的内容来分别讲解一下。</p><h3>具有charset属性的meta</h3><p>从HTML5开始，为了简化写法，meta标签新增了charset属性。添加了charset属性的meta标签无需再有name和content。</p><pre><code>  &lt;meta charset=&quot;UTF-8&quot; &gt;\n</code></pre><p>charset型meta标签非常关键，它描述了HTML文档自身的编码形式。因此，我建议这个标签放在head的第一个。</p><pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n……\n</code></pre><p>这样，浏览器读到这个标签之前，处理的所有字符都是ASCII字符，众所周知，ASCII字符是UTF-8和绝大多数字符编码的子集，所以，在读到meta之前，浏览器把文档理解多数编码格式都不会出错，这样可以最大限度地保证不出现乱码。</p><p>一般情况下，HTTP服务端会通过http头来指定正确的编码方式，但是有些特殊的情况如使用file协议打开一个HTML文件，则没有http头，这种时候，charset meta就非常重要了。</p><h2>具有http-equiv属性的meta</h2><p>具有http-equiv属性的meta标签，表示执行一个命令，这样的meta标签可以不需要name属性了。</p><p>例如，下面一段代码，相当于添加了content-type这个http头，并且指定了http编码方式。</p><pre><code>&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;\n</code></pre><p>除了content-type，还有以下几种命令：</p><ul>\n<li>content-language 指定内容的语言；</li>\n<li>default-style 指定默认样式表；</li>\n<li>refresh 刷新；</li>\n<li>set-cookie 模拟http头set-cookie，设置cookie；</li>\n<li>x-ua-compatible 模拟http头x-ua-compatible，声明ua兼容性；</li>\n<li>content-security-policy 模拟http头content-security-policy，声明内容安全策略。</li>\n</ul><h3>name为viewport的meta</h3><p>实际上，meta标签可以被自由定义，只要写入和读取的双方约定好name和content的格式就可以了。</p><p>我们来介绍一个meta类型，它没有在HTML标准中定义，却是移动端开发的事实标准：它就是name为viewport的meta。</p><p>这类meta的name属性为viewport，它的content是一个复杂结构，是用逗号分隔的键值对，键值对的格式是key=value。</p><p>例如：</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=500, initial-scale=1&quot;&gt;\n</code></pre><p>这里只指定了两个属性，宽度和缩放，实际上viewport能控制的更多，它能表示的全部属性如下：</p><ul>\n<li>width：页面宽度，可以取值具体的数字，也可以是device-width，表示跟设备宽度相等。</li>\n<li>height：页面高度，可以取值具体的数字，也可以是device-height，表示跟设备高度相等。</li>\n<li>initial-scale：初始缩放比例。</li>\n<li>minimum-scale：最小缩放比例。</li>\n<li>maximum-scale：最大缩放比例。</li>\n<li>user-scalable：是否允许用户缩放。</li>\n</ul><p>对于已经做好了移动端适配的网页，应该把用户缩放功能禁止掉，宽度设为设备宽度，一个标准的meta如下：</p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;\n</code></pre><h2>其它预定义的meta</h2><p>在HTML标准中，还定义了一批meta标签的name，可以视为一种有约定的meta，我在这里列出来，你可以简单了解一下。</p><p>application-name：如果页面是Web application，用这个标签表示应用名称。</p><ul>\n<li>author: 页面作者。</li>\n<li>description：页面描述，这个属性可能被用于搜索引擎或者其它场合。</li>\n<li>generator: 生成页面所使用的工具，主要用于可视化编辑器，如果是手写HTML的网页，不需要加这个meta。</li>\n<li>keywords: 页面关键字，对于SEO场景非常关键。</li>\n<li>referrer: 跳转策略，是一种安全考量。</li>\n<li>theme-color: 页面风格颜色，实际并不会影响页面，但是浏览器可能据此调整页面之外的UI（如窗口边框或者tab的颜色）。</li>\n</ul><h2>结语</h2><p>在本课，我们又学习了一批标签，它们是文档用于描述自身的元信息类标签。一些元信息标签可以产生实际的行为，掌握它们对于我们编写代码是必须的。</p><p>另一些元信息仅仅是对页面的描述，掌握它们可以使我们编写的页面跟各种浏览器、搜索引擎等结合地更好。</p><p>主要包括下面这些内容。</p><ul>\n<li>head：元信息的容器。</li>\n<li>title：文档标题。</li>\n<li>base：页面的基准URL。</li>\n<li>meta: 元信息通用标签。</li>\n</ul><p>我们还展开介绍了几种重要的meta标签，charset表示页面编码，http-equiv表示命令，还介绍了一些有约定的meta名称。</p><p>最后，给你留一个问题，你还见过哪些meta标签的用法？欢迎留言告诉我。</p><p></p>",
        article_title: "HTML元信息类标签：你知道head里一共能写哪几种标签吗？",
      },
      {
        title: "CSS 选择器：如何选中svg里的a元素？",
        herf: "https://time.geekbang.org/column/article/84365",
        id: "84365",
        content:
          '<p>你好，我是winter。</p><p>我们在之前CSS语法课程中，已经介绍了关于选择器的一部分基础知识。在今天的这一课里，我们来系统学习一下CSS选择器。</p><p>在CSS语法课程中，我们已经见过一些选择器了，但在进入到具体的选择器介绍之前，我们首先要对选择器有一个整体的认识。</p><p>我先来讲讲选择器是什么，选择器是由CSS最先引入的一个机制（但随着document.querySelector等API的加入，选择器已经不仅仅是CSS的一部分了）。我们今天这一课，就重点讲讲CSS选择器的一些机制。</p><p><strong>选择器的基本意义是：根据一些特征，选中元素树上的一批元素。</strong></p><p>我们把选择器的结构分一下类，那么由简单到复杂可以分成以下几种。</p><ul>\n<li>简单选择器：针对某一特征判断是否选中元素。</li>\n<li>复合选择器：连续写在一起的简单选择器，针对元素自身特征选择单个元素。</li>\n<li>复杂选择器：由“（空格）”“ &gt;”“ ~”“ +”“ ||”等符号连接的复合选择器，根据父元素或者前序元素检查单个元素。</li>\n<li>选择器列表：由逗号分隔的复杂选择器，表示“或”的关系。</li>\n</ul><p>我们可以看到，选择器是由简单选择器逐级组合而成的结构，那么我们就来首先看一下简单选择器。</p><h2>简单选择器</h2><p>我们在前面说过，简单选择器是针对某一特征判断是否为选中元素。今天我会为你介绍一系列常见的简单选择器，我们把相似的简单选择器放在一起，这样更易于你去记忆。</p><!-- [[[read_end]]] --><p><img src="https://static001.geekbang.org/resource/image/4c/ce/4c9ac78870342dc802137ea9c848c0ce.png" alt=""></p><h2>类型选择器和全体选择器</h2><p>我们要介绍的第一个简单选择器就是类型选择器，它根据一个元素的标签名来选中元素。</p><p>比如：</p><pre><code>   div {\n\n   }\n</code></pre><p>这看上去非常简单，但是实际上，我们还必须要考虑HTML或者XML元素的命名空间问题。</p><p>比如我们的svg元素，实际上在： <a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a> 命名空间之下。</p><p>svg和HTML中都有a元素，我们若要想区分选择svg中的a和HTML中的a，就必须用带命名空间的类型选择器。</p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=&quot;utf-8&quot;&gt;\n  &lt;title&gt;JS Bin&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;svg width=&quot;100&quot; height=&quot;28&quot; viewBox=&quot;0 0 100 28&quot; version=&quot;1.1&quot;\n     xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;\n  &lt;desc&gt;Example link01 - a link on an ellipse\n  &lt;/desc&gt;\n  &lt;a xlink:href=&quot;http://www.w3.org&quot;&gt;\n    &lt;text y=&quot;100%&quot;&gt;name&lt;/text&gt;\n  &lt;/a&gt;\n&lt;/svg&gt;\n&lt;br/&gt;\n&lt;a href=&quot;javascript:void 0;&quot;&gt;name&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n@namespace svg url(http://www.w3.org/2000/svg);\n@namespace html url(http://www.w3.org/1999/xhtml);\nsvg|a {\n  stroke:blue;\n  stroke-width:1;\n}\n\nhtml|a {\n  font-size:40px\n}\n</code></pre><p>这里有一个特殊的选择器，就是“ * ” ，它称为全体选择器，可以选中任意元素。它的用法跟类型选择器是完全一致的，这里就把它们放到一起介绍了。</p><h2>id选择器与class选择器</h2><p>id选择器和class选择器都是针对特定属性的选择器。id选择器是“#”号后面跟随id名，class选择器是“.”后面跟随class名。我们来看看基本用法：</p><pre><code>#myid {\n  stroke:blue;\n  stroke-width:1;\n}\n\n.mycls {\n  font-size:40px\n}\n</code></pre><p>这两个选择器都是在属性选择器之前就设计出来的选择器，属性选择器出来了以后，理论上可以一定程度上替代它们。但是要注意，class选择器识别的是：用空格分隔的class语法。</p><pre><code>&lt;a class=&quot;a b c&quot;&gt;xxx&lt;/a&gt;\n.a {\n    color:red;\n}\n</code></pre><p>在这个例子中，我们使用了用空格分隔的class属性，使用“.a”“.b”或者“.c”都能够选中元素，也可以使用多个class选择器来要求元素具有多个类。</p><h2>属性选择器</h2><p>属性选择器根据HTML元素的属性来选中元素。属性选择器有四种形态。</p><ul>\n<li>第一种，[att]</li>\n</ul><p>直接在方括号中放入属性名，是检查元素是否具有这个属性，只要元素有这个属性，不论属性是什么值，都可以被选中。</p><ul>\n<li>第二种，[att=val]</li>\n</ul><p>精确匹配，检查一个元素属性的值是否是val。</p><ul>\n<li>第三种，[att~=val]</li>\n</ul><p>多种匹配，检查一个元素的值是否是若干值之一，这里的val不是一个单一的值了，可以是用空格分隔的一个序列。</p><ul>\n<li>第四种，[att|=val]</li>\n</ul><p>开头匹配，检查一个元素的值是否是以val开头，它跟精确匹配的区别是属性只要以val开头即可，后面内容不管。</p><p>有些HTML属性含有特殊字符，这个时候，可以把val用引号括起来，形成一个CSS字符串。CSS字符串允许使用单双引号来规避特殊字符，也可以用反斜杠转义，这样，就可以表示出任意属性值啦。</p><h2>伪类选择器</h2><p>接下来我们开始介绍伪类选择器，伪类选择器是一系列由CSS规定好的选择器，它们以冒号开头。伪类选择器有普通型和函数型两种。</p><p>我们首先来介绍一下伪类中最常用的部分：树结构关系伪类。</p><h3>树结构关系伪类选择器</h3><p>:root 伪类表示树的根元素，在选择器是针对完整的HTML文档情况，我们一般用HTML标签即可选中根元素。但是随着scoped css和shadow root等场景出现，选择器可以针对某一子树来选择，这时候就很需要root伪类了。</p><ul>\n<li>:empty 伪类表示没有子节点的元素，这里有个例外就是子节点为空白文本节点的情况。</li>\n<li>:nth-child 和 :nth-last-child 这是两个函数型的伪类，CSS的An+B语法设计的是比较复杂的，我们这里仅仅介绍基本用法。我们还是看几个例子：</li>\n</ul><p><img src="https://static001.geekbang.org/resource/image/1e/a9/1ebdba2978a22c13844d108318b271a9.png" alt=""></p><ul>\n<li>:nth-last-child的区别仅仅是从后往前数。</li>\n<li>:first-child :last-child 分别表示第一个和最后一个元素。</li>\n<li>:only-child 按字面意思理解即可，选中唯一一个子元素。</li>\n</ul><p>of-type系列，是一个变形的语法糖，S:nth-of-type(An+B)是:nth-child(|An+B| of S)的另一种写法。</p><p>以此类推，还有nth-last-of-type、first-of-type、last-of-type、only-of-type。</p><h3>链接与行为伪类选择器</h3><p>链接与行为是第一批设计出来的伪类，也是最常用的一批。</p><ul>\n<li>:any-link 表示任意的链接，包括a、area和link标签都可能匹配到这个伪类。</li>\n<li>:link 表示未访问过的链接， :visited 表示已经访问过的链接。</li>\n<li>:hover 表示鼠标悬停在上的元素。</li>\n<li>:active 表示用户正在激活这个元素，如用户按下按钮，鼠标还未抬起时，这个按钮就处于激活状态。</li>\n<li>:focus 表示焦点落在这个元素之上。</li>\n<li>:target 用于选中浏览器URL的hash部分所指示的元素。</li>\n</ul><p>在Selector Level 4草案中，还引入了 target-within、focus-within 等伪类，用于表示target或者focus的父容器。</p><h3>逻辑伪类选择器</h3><p>我们这里介绍一个逻辑伪类 —— :not 伪类。</p><p>这个伪类是个函数型伪类，它的作用时选中内部的简单选择器命中的元素。</p><pre><code>*|*:not(:hover)\n</code></pre><p>选择器3级标准中，not只支持简单选择器，在选择器4级标准，则允许not接受一个选择器列表，这意味着选择器支持嵌套，仅靠not即可完成选择器的一阶真值逻辑完备，但目前还没有看到浏览器实现它。</p><p>在Selector Level 4草案中，还引入了:is :where :has 等逻辑伪类，但是它们有一些违背了选择器匹配DOM树不回溯的原则，所以这部分设计最终的命运如何还不太确定。</p><h3>其它伪类选择器</h3><p>还有一些草案中或者不常用的选择器，你仅做大概了解即可。</p><ul>\n<li>\n<p>国际化：用于处理国际化和多语言问题。</p>\n<ul>\n<li>dir</li>\n<li>lang</li>\n</ul>\n</li>\n<li>\n<p>音频/视频：用于区分音视频播放状态。</p>\n<ul>\n<li>play</li>\n<li>pause</li>\n</ul>\n</li>\n<li>\n<p>时序：用于配合读屏软件等时序性客户端的伪类。</p>\n<ul>\n<li>current</li>\n<li>past</li>\n<li>future</li>\n</ul>\n</li>\n<li>\n<p>表格：用于处理table的列的伪类。</p>\n<ul>\n<li>nth-col</li>\n<li>nth-last-col</li>\n</ul>\n</li>\n</ul><p>伪类是很大的一类简单选择器，它是选择器能力的一种补充。在实际使用中，我还是建议你尽量通过合适的id和class来标识元素，约束伪类的使用。最好只在不得不使用伪类的场景使用伪类，这对于CSS代码的性能和可读性都有好处。</p><h2>结语</h2><p>这一节课程中，我们介绍了CSS选择器的整体结构，并且介绍了一系列简单选择器。它们包括了下面这些内容。</p><ul>\n<li>类型选择器：根据一个元素的标签名来选中元素。</li>\n<li>全体选择器：与类型选择器类似，选择任意元素。</li>\n<li>id选择器：#后面跟随id名。</li>\n<li>class选择器：.后面跟随class名。</li>\n<li>伪类选择器：一系列由CSS规定好的选择器，它们以冒号开头，伪类有普通型和函数型。</li>\n</ul><p>在下一节课，我们开始进入到更复杂的情况，我们将会介绍选择器的组合使用方式和选择器的一些机制。</p><p>今天留给你的思考题是：用JavaScript实现一个能够处理所有简单选择器的querySelector（行为伪类除外），你可以把你的答案分享出来，我们一起来探讨吧。</p><p></p>',
        article_title: "CSS 选择器：如何选中svg里的a元素？",
      },
      {
        title: "CSS选择器：伪元素是怎么回事儿？",
        herf: "https://time.geekbang.org/column/article/84633",
        id: "84633",
        content:
          '<p>你好，我是winter。</p><p>在上一篇文章中，我已经给你介绍了一些简单选择器，这一节课我会继续给你介绍选择器的几个机制：选择器的组合、选择器的优先级和伪元素。</p><h2>选择器的组合</h2><p>在CSS规则中，选择器部分是一个选择器列表。</p><p>选择器列表是用逗号分隔的复杂选择器序列；复杂选择器则是用空格、大于号、波浪线等符号连接的复合选择器；复合选择器则是连写的简单选择器组合。</p><p>根据选择器列表的语法，选择器的连接方式可以理解为像四则运算一样有优先级。</p><ul>\n<li>\n<p>第一优先级</p>\n<ul>\n<li>无连接符号</li>\n</ul>\n</li>\n<li>\n<p>第二优先级</p>\n<ul>\n<li>“空格”</li>\n<li>“~”</li>\n<li>“+”</li>\n<li>“&gt;”</li>\n<li>“||”</li>\n</ul>\n</li>\n<li>\n<p>第三优先级</p>\n<ul>\n<li>“,”</li>\n</ul>\n</li>\n</ul><p>例如以下选择器：</p><pre><code>.c,.a&gt;.b.d {\n    /*......*/\n}\n</code></pre><p>我们应该理解为这样的结构。</p><ul>\n<li>.c,.a&gt;.b.d\n<ul>\n<li>.c</li>\n<li>.a&gt;.b.d\n<ul>\n<li>.a</li>\n<li>.b.d\n<ul>\n<li>.b</li>\n<li>.d</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><p>复合选择器表示简单选择器中“且”的关系，例如，例子中的“ .b.d ”，表示选中的元素必须同时具有b和d两个class。</p><p>复杂选择器是针对节点关系的选择，它规定了五种连接符号。</p><ul>\n<li><strong>“空格”</strong>：后代，表示选中所有符合条件的后代节点， 例如“ .a .b ”表示选中所有具有class为a的后代节点中class为b的节点。</li>\n<li><strong>“&gt;”</strong> ：子代，表示选中符合条件的子节点，例如“ .a&gt;.b ”表示：选中所有“具有class为a的子节点中，class为b的节点”。</li>\n<li><strong>“~” </strong>: 后继，表示选中所有符合条件的后继节点，后继节点即跟当前节点具有同一个父元素，并出现在它之后的节点，例如“ .a~.b ”表示选中所有具有class为a的后继中，class为b的节点。</li>\n<li><strong>“+”</strong>：直接后继，表示选中符合条件的直接后继节点，直接后继节点即nextSlibling。例如 “.a+.b ”表示选中所有具有class为a的下一个class为b的节点。</li>\n<li><strong>“||”</strong>：列选择器，表示选中对应列中符合条件的单元格。</li>\n</ul><!-- [[[read_end]]] --><p>我们在实际使用时，比较常用的连接方式是“空格”和“&gt;”。</p><p>工程实践中一般会采用设置合理的class的方式，来避免过于复杂的选择器结构，这样更有利于维护和性能。</p><p>空格和子代选择器通常用于组件化场景，当组件是独立开发时，很难完全避免class重名的情况，如果为组件的最外层容器元素设置一个特别的class名，生成CSS规则时，则全部使用后代或者子代选择器，这样可以有效避免CSS规则的命名污染问题。</p><p>逗号表示“或”的关系，实际上，可以把它理解为“两条内容一样的CSS规则”的一种简写。如我们开头的例子，可以理解成与下面的代码等效：</p><pre><code>.c {\n    /*......*/\n}\n.a&gt;.b.d {\n    /*......*/\n}\n</code></pre><p>到这里，我们就讲完了如何用简单选择器组合成复合选择器和复杂选择器，形成选择器列表，这能够帮助我们应对各种复杂的需求。</p><p>CSS选择器是基于规则生效的，同一个元素命中多条规则是非常常见的事情。不同规则指定同一个属性为不同值时，就需要一个机制来解决冲突。这个机制，就是接下来我们要讲的选择器优先级。</p><h2>选择器的优先级</h2><p>CSS标准用一个三元组 (a, b, c) 来构成一个复杂选择器的优先级。</p><ul>\n<li>id选择器的数目记为a；</li>\n<li>伪类选择器和class选择器的数目记为b；</li>\n<li>伪元素选择器和标签选择器数目记为c；</li>\n<li>“*” 不影响优先级。</li>\n</ul><p>CSS标准建议用一个足够大的进制，获取“ a-b-c ”来表示选择器优先级。</p><p>即：</p><pre><code>specificity = base * base * a + base * b + c\n\n</code></pre><p>其中，base是一个“足够大”的正整数。关于base，历史中有些趣闻，早年IE6采用256进制，于是就产生“256个class优先级等于一个id”这样的奇葩问题，后来扩大到65536，基本避免了类似的问题。</p><p>现代浏览器多采用了更大的数量，我们正常编写的CSS规则数量不太可能达到数万，因此我们可以认为这样的base就足够大了。</p><p>行内属性的优先级永远高于CSS规则，浏览器提供了一个“口子”，就是在选择器前加上“!import”。</p><p>这个用法非常危险，因为它相当于一个新的优先级，而且此优先级会高于行内属性。</p><p>同一优先级的选择器遵循“后面的覆盖前面的”原则，我们可以看一个例子：</p><pre><code class="language-HTML">&lt;div id="my" class="x y"&gt;text&lt;div&gt;\n</code></pre><pre><code class="language-CSS">.x {\n    background-color:lightblue;\n}\n.y {\n    background-color:lightgreen;\n}\n</code></pre><p>调换“.x”和“.y”我们可以得到不同的显示效果。选择器的优先级是针对单条规则的，多条规则的选择器同时命中元素，优先级不会发生叠加。</p><pre><code class="language-HTML">&lt;div id="my" class="x y z"&gt;text&lt;div&gt;\n</code></pre><pre><code class="language-CSS">.x {\n    background-color:lightblue;\n}\n.z {\n    background-color:lightblue;\n}\n.y {\n    background-color:lightgreen;\n}\n</code></pre><p>在这个例子中，“.x ”和“.z ”都指定了背景色为浅蓝色，但是因为“.y ”规则在最后，所以最终显示结果为浅绿色。另外一个需要注意的是，选择器的优先级是针对复杂选择器的优先级，选择器列表不会合并计算优先级。</p><p>我们看一个例子：</p><pre><code>&lt;div id=&quot;my&quot; class=&quot;x y z&quot;&gt;text&lt;div&gt;\n</code></pre><pre><code>.x, .z {\n    background-color:lightblue;\n}\n.y {\n    background-color:lightgreen;\n}\n</code></pre><p>这里选择器列表“ .x, .z”命中了div，但是它的两项分别计算优先级，所以最终优先级仍跟“ .y” 规则相同。</p><p>以上就是选择器优先级的相关规则了，虽然我们这里介绍了详细的计算方式，但是我认为选择器的使用上，如果产生复杂的优先级计算，代码的可读性一定是有问题的。</p><p>所以实践中，建议你“根据 id 选单个元素”“class和class的组合选成组元素”“tag选择器确定页面风格”这样的简单原则来使用选择器，不要搞出过于复杂的选择器。</p><h2>伪元素</h2><p>在上一课，我们有意忽略了一种重要的简单选择器：伪元素。</p><p>我之所以没有把它放在简单选择器中，是因为伪元素本身不单单是一种选择规则，它还是一种机制。</p><p>所以本节课，我就来讲一讲伪元素机制。伪元素的语法跟伪类相似，但是实际产生的效果却是把不存在的元素硬选出来。</p><p>目前兼容性达到可用的伪元素有以下几种。</p><ul>\n<li>::first-line</li>\n<li>::first-letter</li>\n<li>::before</li>\n<li>::after</li>\n</ul><p>下面我们就来分别讲讲它们。</p><p><strong>::first-line 和 ::first-letter 是比较类似的伪元素</strong>，其中一个表示元素的第一行，一个表示元素的第一个字母。</p><p>我们可以看一个示例：</p><pre><code>&lt;p&gt;This is a somewhat long HTML\nparagraph that will be broken into several\nlines. The first line will be identified\nby a fictional tag sequence. The other lines\nwill be treated as ordinary lines in the\nparagraph.&lt;/p&gt;\n</code></pre><pre><code>p::first-line { \n    text-transform: uppercase \n}\n</code></pre><p>这一段代码把段落的第一行字母变为大写。注意这里的第一行指的是排版后显示的第一行，跟HTML代码中的换行无关。</p><p>::first-letter 则指第一个字母。首字母变大并向左浮动是一个非常常见的排版方式。</p><pre><code>&lt;p&gt;This is a somewhat long HTML\nparagraph that will be broken into several\nlines. The first line will be identified\nby a fictional tag sequence. The other lines\nwill be treated as ordinary lines in the\nparagraph.&lt;/p&gt;\n</code></pre><pre><code>p::first-letter { \n    text-transform: uppercase;\n    font-size:2em;\n    float:left; \n}\n</code></pre><p>虽然听上去很简单，但是实际上，我们遇到的HTML结构要更为复杂，一旦元素中不是纯文本，规则就变得复杂了。</p><p>CSS标准规定了first-line必须出现在最内层的块级元素之内。因此，我们考虑以下代码。</p><pre><code class="language-HTML">&lt;div&gt;\n  &lt;p id=a&gt;First paragraph&lt;/p&gt;\n  &lt;p&gt;Second paragraph&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><pre><code class="language-CSS">div&gt;p#a {\n    color:green;\n}\n\ndiv::first-line { \n    color:blue; \n}\n</code></pre><p>这段代码最终结果第一行是蓝色，因为p是块级元素，所以伪元素出现在块级元素之内，所以内层的color覆盖了外层的color属性。</p><p>如果我们把p换成span，结果就是相反的。</p><pre><code>&lt;div&gt;\n  &lt;span id=a&gt;First paragraph&lt;/span&gt;&lt;br/&gt;\n  &lt;span&gt;Second paragraph&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><pre><code>div&gt;span#a {\n    color:green;\n}\n\ndiv::first-line { \n    color:blue; \n}\n</code></pre><p>这段代码的最终结果是绿色，这说明伪元素在span之外。</p><p>::first-letter的行为又有所不同，它的位置在所有标签之内，我们把前面的代码换成::first-letter。</p><pre><code>&lt;div&gt;\n  &lt;span id=a&gt;First paragraph&lt;/span&gt;&lt;br/&gt;\n  &lt;span&gt;Second paragraph&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><pre><code>div&gt;span#a {\n    color:green;\n}\n\ndiv::first-letter { \n    color:blue; \n}\n</code></pre><p>执行这段代码，我们可以看到，首字母变成了蓝色，这说明伪元素出现在span之内。</p><p>CSS标准只要求 ::first-line 和 ::first-letter 实现有限的几个CSS属性，都是文本相关，这些属性是下面这些。</p><p><img src="https://static001.geekbang.org/resource/image/6e/48/6e050ee9f7a0b1657388271cceb0c548.png" alt=""></p><p><strong>接下来我们说说 ::before 和 ::after 伪元素。</strong></p><p>这两个伪元素跟前面两个不同的是，它不是把已有的内容套上一个元素，而是真正的无中生有，造出一个元素。</p><p>::before 表示在元素内容之前插入一个虚拟的元素，::after 则表示在元素内容之后插入。</p><p>这两个伪元素所在的CSS规则必须指定content属性才会生效，我们看下例子：</p><pre><code>&lt;p class=&quot;special&quot;&gt;I\'m real element&lt;/p&gt;\n</code></pre><pre><code>p.special::before {\n    display: block;\n    content: &quot;pseudo! &quot;;\n}\n</code></pre><p>这里要注意一点，::before 和 ::after 还支持content为counter，如：</p><pre><code>&lt;p class=&quot;special&quot;&gt;I\'m real element&lt;/p&gt;\np.special::before {\n    display: block;\n    content: counter(chapno, upper-roman) &quot;. &quot;;\n}\n</code></pre><p>这对于实现一些列表样式是非常有用的。</p><p>::before 和 ::after 中支持所有的CSS属性。实际开发中，这两个伪元素非常有用，有了这两个伪元素，一些修饰性元素，可以使用纯粹的CSS代码添加进去，这能够很好地保持HTML代码中的语义，既完成了显示效果，又不会让DOM中出现很多无语义的空元素。</p><h2>结语</h2><p>这一课，我们讲了CSS选择器的三种机制：选择器的组合、选择器优先级、以及伪元素。</p><p>在选择器组合这一部分，我们讲到了，选择器的连接方式像四则运算一样有优先级。</p><p>第一优先级是无连接符号；第二优先级是：“空格”“~”“+”“&gt;”“||”；第三优先级是“,”。</p><p>然后我们又介绍了选择器优先级的计算方式。</p><p>最后我们介绍了伪元素，我们逐次讲解了：</p><ul>\n<li>::first-line</li>\n<li>::first-letter</li>\n<li>::before</li>\n<li>::after</li>\n</ul><p>四种伪元素。伪元素的语法跟伪类相似，但是实际产生的效果是把不存在的元素硬选出来。这一点就与伪类不太一样了。</p><p>结合上一节课我们讲的简单选择器，对它们灵活运用，就能够满足大部分CSS的使用场景的需求了。</p><p>最后，留给你一个问题，你所在的团队，如何规定CSS选择器的编写规范？你觉得它好吗？</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "CSS选择器：伪元素是怎么回事儿？",
      },
      {
        title: "HTML链接：除了a标签，还有哪些标签叫链接？",
        herf: "https://time.geekbang.org/column/article/85341",
        id: "85341",
        content:
          '<p>你好，我是winter。</p><p>在前面的课程中，我讲到了HTML的语义和元信息标签，今天这一课，我们来讲另一类HTML元素：链接。</p><p>链接这种元素可以说是占据了整个互联网。也正是因为无处不在的超链接，才让我们的万维网如此繁荣。没有了超链接的HTML，最多可以称为富文本，没法称作超文本（hyper text）。</p><p>我想，作为互联网从业者，我们一定对链接都非常熟悉了。链接能够帮助我们从一个网页跳转到另一个网页。</p><p>不过，除了肉眼可见的这些链接，其实HTML里面还规定了一些不可见链接的类型，这节课，我就来给你介绍链接家族的全员，让你对它们有一个完整的认识。</p><p>链接是HTML中的一种机制，它是HTML文档和其它文档或者资源的连接关系，在HTML中，链接有两种类型。一种是超链接型标签，一种是外部资源链接。</p><p>链接的家族中有a标签、area标签和link标签。今天，我会逐一对它们进行介绍。</p><p><img src="https://static001.geekbang.org/resource/image/ca/51/caab7832c425b3af2b3adae747e6f551.png" alt=""></p><h2>link 标签</h2><p>提到链接，我们都知道a标签可以成为超链接，但是我们今天的内容，要从一个大家不太熟悉的标签开始，也就是link标签。</p><p>我们已经介绍过元信息类标签。实际上，我们并没有介绍完全，有些link标签也是元信息类标签的一种。</p><p>我们已经讲过，HTML标准并没有规定浏览器如何使用元信息，我们还讲到了元信息中有不少是被设计成“无需被浏览器识别，而是专门用于搜索引擎看的”。</p><!-- [[[read_end]]] --><p>link标签也是元信息的一种，在很多时候，它也是不会对浏览器产生任何效果的，这也是很多人会忽略link标签学习的原因。</p><p>link标签会生成一个链接，它可能生成超链接，也可能生成外部资源链接。</p><p>一些link标签会生成超链接，这些超链接又不会像a标签那样显示在网页中。这就是超链接型的link标签。</p><p>这意味着多数浏览器中，这些link标签不产生任何作用。但是，这些link标签能够被搜索引擎和一些浏览器插件识别，从而产生关键性作用。</p><p>比如，到页面RSS的link标签，能够被浏览器的RSS订阅插件识别，提示用户当前页面是可以RSS订阅的。</p><p>另外一些link标签则会把外部的资源链接到文档中，也就是说，会实际下载这些资源，并且做出一些处理，比如我们常见的用link标签引入样式表。</p><p>除了元信息的用法之外，多数外部资源型的link标签还能够被放在body中使用，从而起到把外部资源链接进文档的作用。</p><p>link标签的链接类型主要通过rel属性来区分，在本篇文章中，我们提到xx型link即表示属性rel为xx的link，其代码类似下面：</p><pre><code>&lt;link rel=&quot;xx&quot; ...&gt;\n</code></pre><p>下面我们先来看看超链接型link标签。</p><h2>超链接类link标签</h2><p>超链接型link标签是一种被动型链接，在用户不操作的情况下，它们不会被主动下载。</p><p>link标签具有特定的rel属性，会成为特定类型的link标签。产生超链接的link标签包括：具有 rel=“canonical” 的link、具有 rel="alternate"的link、具有rel=“prev” rel="next"的link等等。</p><h3>canonical型link</h3><p>这种link的代码写法是这样：</p><pre><code>&lt;link rel=&quot;canonical&quot; href=&quot;...&quot;&gt;\n</code></pre><p>这个标签提示页面它的主URL，在网站中常常有多个URL指向同一页面的情况，搜索引擎访问这类页面时会去掉重复的页面，这个link会提示搜索引擎保留哪一个URL。</p><h2>alternate型link</h2><p>这种link的代码写法是这样：</p><pre><code>&lt;link rel=&quot;alternate&quot; href=&quot;...&quot;&gt;\n</code></pre><p>这个标签提示页面它的变形形式，这个所谓的变形可能是当前页面内容的不同格式、不同语言或者为不同的设备设计的版本，这种link通常也是提供给搜索引擎来使用的。</p><p>alternate型的link的一个典型应用场景是，页面提供rss订阅时，可以用这样的link来引入：</p><pre><code>&lt;link rel=&quot;alternate&quot; type=&quot;application/rss+xml&quot; title=&quot;RSS&quot; href=&quot;...&quot;&gt;\n</code></pre><p>除了搜索引擎外，很多浏览器插件都能识别这样的link。</p><h3>prev型link和next型link</h3><p>在互联网应用中，很多网页都属于一个序列，比如分页浏览的场景，或者图片展示的场景，每个网页是序列中的一个项。</p><p>这种时候，就适合使用prev和next型的link标签，来告诉搜索引擎或者浏览器它的前一项和后一项，这有助于页面的批量展示。</p><p>因为next型link告诉浏览器“这是很可能访问的下一个页面”，HTML标准还建议对next型link做预处理，在本课后面的内容，我们会讲到预处理类的link。</p><h3>其它超链接类的link</h3><p>其它超链接类link标签都表示一个跟当前文档相关联的信息，可以把这样的link标签视为一种带链接功能的meta标签。</p><ul>\n<li>rel=“author” 链接到本页面的作者，一般是 mailto:协议</li>\n<li>rel=“help” 链接到本页面的帮助页</li>\n<li>rel=“license” 链接到本页面的版权信息页</li>\n<li>rel=“search” 链接到本页面的搜索页面（一般是站内提供搜索时使用）</li>\n</ul><p>到这里，我们已经讲完了所有的超链接类的link标签用法了。接下来我们讲讲外部资源类link标签。</p><h2>外部资源类link标签</h2><p>外部资源型link标签会被主动下载，并且根据rel类型做不同的处理。外部资源型的标签包括：具有icon型的link、预处理类link、modulepreload型的link、stylesheet、pingback。下面我们来一一介绍它们。</p><h3>icon型link</h3><p>这类链接表示页面的icon。多数浏览器会读取icon型link，并且把页面的icon展示出来。</p><p>icon型link是唯一一个外部资源类的元信息link，其它元信息类link都是超链接，这意味着，icon型link中的图标地址默认会被浏览器下载和使用。</p><p>如果没有指定这样的link，多数浏览器会使用域名根目录下的favicon.ico，即使它并不存在，所以从性能的角度考虑，建议一定要保证页面中有icon型的link。</p><p>只有icon型link有有效的sizes属性，HTML标准允许一个页面出现多个icon型link，并且用sizes指定它适合的icon尺寸。</p><h3>预处理类link</h3><p>我们都知道，导航到一个网站需要经过dns查询域名、建立连接、传输数据、加载进内存和渲染等一系列的步骤。</p><p>预处理类link标签就是允许我们控制浏览器，提前针对一些资源去做这些操作，以提高性能（当然如果你乱用的话，性能反而更差）。</p><p>下面我来列一下这些link类型：</p><ul>\n<li>dns-prefetch型link 提前对一个域名做dns查询，这样的link里面的href实际上只有域名有意义。</li>\n<li>preconnect型link 提前对一个服务器建立tcp连接。</li>\n<li>prefetch型link 提前取href指定的url的内容。</li>\n<li>preload型link 提前加载href指定的url。</li>\n<li>prerender型link 提前渲染href指定的url。</li>\n</ul><h3>modulepreload型的link</h3><p>modulepreload型link的作用是预先加载一个JavaScript的模块。这可以保证JS模块不必等到执行时才加载。</p><p>这里的所谓加载，是指完成下载并放入内存，并不会执行对应的JavaScript。</p><pre><code>&lt;link rel=&quot;modulepreload&quot; href=&quot;app.js&quot;&gt;\n&lt;link rel=&quot;modulepreload&quot; href=&quot;helpers.js&quot;&gt;\n&lt;link rel=&quot;modulepreload&quot; href=&quot;irc.js&quot;&gt;\n&lt;link rel=&quot;modulepreload&quot; href=&quot;fog-machine.js&quot;&gt;\n&lt;script type=&quot;module&quot; src=&quot;app.js&quot;&gt;\n</code></pre><p>这个例子来自HTML标准，我们假设app.js中有 import “irc” 和 import “fog-machine”, 而 irc.js中有 import “helpers”。这段代码使用moduleload型link来预加载了四个js模块。</p><p>尽管，单独使用script标签引用app.js也可以正常工作，但是我们通过加入对四个JS文件的link标签，使得四个JS文件有机会被并行地下载，这样提高了性能。</p><h3>stylesheet型link</h3><p>样式表大概是所有人最熟悉的link标签用法了。它的样子是下面这样的。</p><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;xxx.css&quot; type=&quot;text/css&quot;&gt;\n</code></pre><p>基本用法是从一个CSS文件创建一个样式表。这里type属性可以没有，如果有，必须是"text/css"才会生效。</p><p>rel前可以加上alternate，成为rel=“alternate stylesheet”，此时必须再指定title属性。</p><p>这样可以为页面创建一份变体样式，一些浏览器，如 Firefox 3.0，支持从浏览器菜单中切换这些样式，当然了，大部分浏览器不支持这个功能，所以仅仅从语义的角度了解一下这种用法即可。</p><h3>pingback型link</h3><p>这样的link表示本网页被引用时，应该使用的pingback地址，这个机制是一份独立的标准，遵守pingback协议的网站在引用本页面时，会向这个pingback url发送一个消息。</p><p>以上就是link标签的所有用法了。接下来我们来介绍一下最熟悉的 a 标签，当然了，也可能你学过了本节课以后，觉得自己其实也没那么熟悉。</p><h2>a 标签</h2><p>a标签是“anchor”的缩写，它是锚点的意思，所谓锚点，实际上也是一种比喻的用法，古代船舶用锚来固定自己的位置，避免停泊时被海浪冲走，所以anchor标签的意思也是标识文档中的特定位置。</p><p>a标签其实同时充当了链接和目标点的角色，当a标签有href属性时，它是链接，当它有name时，它是链接的目标。</p><p>具有href的a标签跟一些link一样，会产生超链接，也就是在用户不操作的情况下，它们不会被主动下载的被动型链接。</p><p>重点的内容是，a标签也可以有rel属性，我们来简单了解一下，首先是跟link相同的一些rel，包括下面的几种。</p><ul>\n<li>alternate</li>\n<li>author</li>\n<li>help</li>\n<li>license</li>\n<li>next</li>\n<li>prev</li>\n<li>search</li>\n</ul><p>这些跟link语义完全一致，不同的是，a标签产生的链接是会实际显示在网页中的，而link标签仅仅是元信息。</p><p>除了这些之外，a标签独有的rel类型：</p><ul>\n<li>tag 表示本网页所属的标签；</li>\n<li>bookmark 到上级章节的链接。</li>\n</ul><p>a标签还有一些辅助的rel类型，用于提示浏览器或者搜索引擎做一些处理：</p><ul>\n<li>nofollow 此链接不会被搜索引擎索引；</li>\n<li>noopener 此链接打开的网页无法使用opener来获得当前页面的窗口；</li>\n<li>noreferrer 此链接打开的网页无法使用referrer来获得当前页面的url；</li>\n<li>opener 打开的网页可以使用window.opener来访问当前页面的window对象，这是a标签的默认行为。</li>\n</ul><p>a标签基本解决了在页面中插入文字型和整张图片超链接的需要，但是如果我们想要在图片的某个区域产生超链接，那么就要用到另一种标签了——area标签。</p><h2>area 标签</h2><p>area标签与a标签非常相似，不同的是，它不是文本型的链接，而是区域型的链接。</p><p>area标签支持的rel与a完全一样，这里就不多说了。</p><p>area是整个html规则中唯一支持非矩形热区的标签，它的shape属性支持三种类型。</p><ul>\n<li>圆形：circle或者circ，coords支持三个值，分别表示中心点的x,y坐标和圆形半径r。</li>\n<li>矩形：rect或者rectangle，coords支持两个值，分别表示两个对角顶点x1，y1和x2，y2。</li>\n<li>多边形：poly或者polygon，coords至少包括6个值，表示多边形的各个顶点。</li>\n</ul><p>因为area设计的时间较早，所以不支持含有各种曲线的路径，但是它也是唯一一个支持了非矩形触发区域的元素，所以，对于一些效果而言，area是必不可少的。</p><p>area必须跟img和map标签配合使用。使用示例如下（例子来自html标准）。</p><pre><code>&lt;p&gt;\n Please select a shape:\n &lt;img src=&quot;shapes.png&quot; usemap=&quot;#shapes&quot;\n      alt=&quot;Four shapes are available: a red hollow box, a green circle, a blue triangle, and a yellow four-pointed star.&quot;&gt;\n &lt;map name=&quot;shapes&quot;&gt;\n  &lt;area shape=rect coords=&quot;50,50,100,100&quot;&gt; &lt;!-- the hole in the red box --&gt;\n  &lt;area shape=rect coords=&quot;25,25,125,125&quot; href=&quot;red.html&quot; alt=&quot;Red box.&quot;&gt;\n  &lt;area shape=circle coords=&quot;200,75,50&quot; href=&quot;green.html&quot; alt=&quot;Green circle.&quot;&gt;\n  &lt;area shape=poly coords=&quot;325,25,262,125,388,125&quot; href=&quot;blue.html&quot; alt=&quot;Blue triangle.&quot;&gt;\n  &lt;area shape=poly coords=&quot;450,25,435,60,400,75,435,90,450,125,465,90,500,75,465,60&quot;\n        href=&quot;yellow.html&quot; alt=&quot;Yellow star.&quot;&gt;\n &lt;/map&gt;\n&lt;/p&gt;\n</code></pre><p>这个例子展示了在一张图片上画热区并且产生链接，分别使用了矩形、圆形和多边形三种area。</p><h2>结语</h2><p>本节课我们介绍了几种链接类型。在HTML中，链接有两种类型。一种是超链接型标签，一种是外部资源链接。</p><p>我们逐次讲到了link标签、a标签和area标签，link标签一般用于看不见的链接，它可能产生超链接或者外部资源链接，a和area一般用于页面上显示的链接，它们只能产生超链接。</p><p>最后，留给你一个思考问题，你的工作中，是使用过哪些类型的link标签的呢？</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "HTML链接：除了a标签，还有哪些标签叫链接？",
      },
      {
        title: "CSS排版：从毕升开始，我们就开始用正常流了",
        herf: "https://time.geekbang.org/column/article/85745",
        id: "85745",
        content:
          '<p>你好，我是winter。今天我们来聊聊CSS的正常流。</p><p>我想，在CSS中，大家最讨厌的大概就是排版部分了。因为早年的CSS设计上不能够很好地支持软件排版需求，导致大家需要使用很多黑科技，让很多新人望而却步。</p><p>现在CSS提供了很多种排版方式，我们有很多选项可以选择自己适合的那一种，然而，正常流却是我们绕不开的一种排版。</p><p>我们能够在网上看到关于正常流的各种资料，比如：块级格式化上下文、margin折叠等等……这一系列的概念光是听起来就令人非常头痛。</p><p>所以我相信很多同学一定会奇怪：正常流到底正常在哪里。事实上，我认为正常流本身是简单和符合直觉的东西。</p><p>我们之所以会觉得它奇怪，是因为如果我们从严苛的CSS标准角度去理解正常流，规定排版的算法，就需要引入上述那些复杂的概念。但是，如果我们单纯地从感性认知的层面去理解正常流，它其实是简单的。</p><p>下面，就让我们先抛弃掉所有的已知概念，从感性认知的角度出发，一起去理解一下正常流。</p><h2>正常流的行为</h2><p>首先，我们先从词源来讲一讲排版这件事。</p><p>在毕昇发明活字印刷之前，排版这项工作是不存在的，相应的操作叫做“雕版”。人们要想印刷书籍，就需要依靠雕版工人去手工雕刻印版。</p><p>活字印刷的出现，将排版这个词引入进来，排版是活字印刷的15道工序之一，不论是古代的木质活字印刷，还是近代的铅质活字印刷，排版的过程是由排版工人一个字一个字从字架捡出，再排入版框中。实际上，这个过程就是一个流式处理的过程。</p><!-- [[[read_end]]] --><p>从古代活字印刷开始，到现代的出版行业，再到今天的Web，排版过程其实并没有什么本质的变化，只不过，今天在我们的CSS中，排版需要处理的内容，不再是简单的大小相同的木字或者铅字，而是有着不同字体和字号的富文本，以及插入在富文本中大小不等的盒。</p><p>并且，在这些过程中，都会有一个正常流的存在。那么，正常流是什么样的呢？</p><p><strong>我们可以用一句话来描述正常流的排版行为，那就是：依次排列，排不下了换行。</strong>这个操作很简单吧，我想，任何一个不懂排版的人都会将其作为排版时的第一反应。</p><p>理解了正常流的基本概念，剩下的功能只需要在它的基础上延伸一下就好。</p><p>在正常流基础上，我们有float相关规则，使得一些盒占据了正常流需要的空间，我们可以把float理解为“文字环绕”。</p><p><img src="https://static001.geekbang.org/resource/image/af/65/aff7250eac6064158021aea86dd4ac65.png" alt=""></p><p>我们还有vertical-align相关规则规定了如何在垂直方向对齐盒。vertical-align相关规则看起来复杂，但是实际上，基线、文字顶/底、行顶/底都是我们正常书写文字时需要用到的概念，只是我们平时不一定会总结它们。</p><p>下图展示了在不同的vertical-align设置时，盒与文字是如何混合排版的。为了方便你理解，我们用代码给大家标注了基线、文字顶/底、行顶/底等概念。</p><p><img src="https://static001.geekbang.org/resource/image/aa/e3/aa6611b00f71f606493f165294410ee3.png" alt=""><br>\n（点击大图查看）</p><p>除此之外，margin折叠是很多人非常不理解的一种设计，但是实际上我们可以把margin理解为“一个元素规定了自身周围至少需要的空间”，这样，我们就非常容易理解为什么margin需要折叠了。</p><h2>正常流的原理</h2><p>我们前面描述了正常流的行为，接下来我们要切换一下模式，用比较严谨的姿势来理解一下正常流。</p><p>在CSS标准中，规定了如何排布每一个文字或者盒的算法，这个算法依赖一个排版的“当前状态”，CSS把这个当前状态称为“格式化上下文（formatting context）”。</p><p>我们可以认为排版过程是这样的：</p><blockquote>\n<p>格式化上下文 + 盒/文字 = 位置</p>\n</blockquote><blockquote>\n<p>formatting context + boxes/charater = positions</p>\n</blockquote><p>我们需要排版的盒，是分为块级盒和行内级盒的，所以排版需要分别为它们规定了块级格式化上下文和行内级格式化上下文。</p><p>与正常流一样，如果我们单纯地看格式化上下文，规则其实是非常简单的。</p><p>块级格式化上下文顺次排列元素：</p><p><img src="https://static001.geekbang.org/resource/image/a5/e7/a5e1b9a77d9745499f96d25cf0a0dbe7.png" alt=""></p><p>行内级格式化上下文顺次排列元素：</p><p><img src="https://static001.geekbang.org/resource/image/1c/cf/1ced4fa809b30343df45e559cf0c08cf.png" alt=""></p><p>注意，块级和行内级元素的排版，受文字书写方向的影响，这里我们讲上下左右只是为了方便你直观理解。</p><p>当我们要把正常流中的一个盒或者文字排版，需要分成三种情况处理。</p><ul>\n<li><strong>当遇到块级盒</strong>：排入块级格式化上下文。</li>\n<li><strong>当遇到行内级盒或者文字</strong>：首先尝试排入行内级格式化上下文，如果排不下，那么创建一个行盒，先将行盒排版（行盒是块级，所以到第一种情况），行盒会创建一个行内级格式化上下文。</li>\n<li><strong>遇到float盒</strong>：把盒的顶部跟当前行内级上下文上边缘对齐，然后根据float的方向把盒的对应边缘对到块级格式化上下文的边缘，之后重排当前行盒。</li>\n</ul><p>我们以上讲的都是一个块级格式化上下文中的排版规则，实际上，页面中的布局没有那么简单，一些元素会在其内部创建新的块级格式化上下文，这些元素有：</p><ol>\n<li>浮动元素；</li>\n<li>绝对定位元素；</li>\n<li>非块级但仍能包含块级元素的容器（如inline-blocks, table-cells, table-captions）；</li>\n<li>块级的能包含块级元素的容器，且属性overflow不为visible。</li>\n</ol><p>这里的最后一条比较绕，实际上，我个人喜欢用另一种思路去理解它：</p><p>自身为块级，且overflow为visible的块级元素容器，它的块级格式化上下文和外部的块级格式化上下文发生了融合，也就是说，如果不考虑盒模型相关的属性，这样的元素从排版的角度就好像根本不存在。</p><p>好了，到这里我们已经讲完了正常流的排版详细规则，但是理解规则仅仅是基础，我们还需要掌握一些技巧。</p><h2>正常流的使用技巧</h2><p>现在，我们就一起来动手用实际的例子来研究一下。我们今天来看看等分布局和自适应宽，从这两种经典布局问题入手，一起来探索一下正常流的使用技巧。</p><h3>等分布局问题</h3><p>横向等分布局是一个很常见的需求，按照一般的思路，我们可以使用百分比宽度来解决，我们参考以下代码：</p><pre><code>&lt;div class=&quot;outer&quot;&gt;\n    &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n.inner {\n    width:33.33%;\n    height:300px;\n    display:inline-block;\n    outline:solid 1px blue;\n}\n</code></pre><p>在这段HTML代码中，我们放了三个div，用CSS给它们指定了百分比宽度，并且指定为inline-block。</p><p>但是这段代码执行之后，效果跟我们预期不同，我们可以发现，每个div并非紧挨，中间有空白，这是因为我们为了代码格式加入的换行和空格被HTML当作空格文本，跟inline盒混排了的缘故。</p><p>解决方案是修改HTML代码，去掉空格和换行：</p><pre><code>&lt;div class=&quot;outer&quot;&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;div class=&quot;inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;\n</code></pre><p>但是这样做影响了源代码的可读性，一个变通的方案是，改变outer中的字号为0。</p><pre><code>.inner {\n    width:33.33%;\n    height:300px;\n    display:inline-block;\n    outline:solid 1px blue;\n    font-size:30px;\n}\n.outer {\n    font-size:0;\n}\n</code></pre><p>在某些浏览器中，因为像素计算精度问题，还是会出现换行，我们给outer添加一个特定宽度：</p><pre><code>.inner {\n    width:33.33%;\n    height:300px;\n    display:inline-block;\n    outline:solid 1px blue;\n}\n.outer {\n    width:101px\n}\n</code></pre><p>这个代码在某些旧版本浏览器中会出现换行。为了保险起见，我们给最后一个div加上一个负的右margin：</p><pre><code>.outer {\n    width:101px\n}\n\n.inner {\n    width:33.33%;\n    height:300px;\n    display:inline-block;\n    outline:solid 1px blue;\n}\n\n.inner:last-child {\n    margin-right:-5px;\n}\n</code></pre><p>这样就可以解决旧版本浏览器的问题了。</p><p>除了使用inline-block，float也可以实现类似的效果，但是float元素只能做顶对齐，不如inline-block灵活。</p><h3>自适应宽</h3><p>我们再来说说自适应宽。在IE6统治浏览器市场的旧时代，自适应宽（一个元素固定宽度，另一个元素填满父容器剩余宽度）是个经典的布局问题，我们现在就看一下如何使用正常流来解决。</p><p>我们首先来看一下问题。</p><pre><code>&lt;div class=&quot;outer&quot;&gt;\n    &lt;div class=&quot;fixed&quot;&gt;&lt;/div&gt;\n    &lt;div class=&quot;auto&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n.fixed {\n    width:200px;\n}\n.fixed, .auto {\n    height:300px;\n    outline:solid 1px blue;\n}\n</code></pre><p>这里fixed这个div宽度已经被指定好，我们需要添加css代码尝试让.auto填满剩余宽度。</p><p>使用正常流解决这个问题的思路是，利用负margin：</p><pre><code>.fixed {\n    display:inline-block;\n    vertical-align:top;\n}\n.auto {\n    margin-left:-200px;\n    width:100%;\n    display:inline-block;\n    vertical-align:top;\n}\n</code></pre><p>但是，这样做会导致auto中的内容位置不对，所以我们还需要使用padding把内容挤出来，最终完整代码如下：</p><pre><code>.fixed {\n    display:inline-block;\n    vertical-align:top;\n}\n.auto {\n    margin-left:-200px;\n    padding-left:200px;\n    box-sizing:border-box;\n    width:100%;\n    display:inline-block;\n    vertical-align:top;\n}\n</code></pre><p>这样就给auto添加了padding-left和box-sizing两个属性。</p><p>总的来说，正常流布局主要是使用inline-block来作为内容的容器，利用块级格式化上下文的纵向排布和行内级格式化上下文的横向排布来完成布局的，我们需要根据需求的横向和纵向排布要求，来选择元素的display属性。</p><h2>结语</h2><p>这次的文章中，我们一起学习了正常流，我们可以用一句话来描述正常流的排版行为，那就是：依次排列，排不下了换行。这也是理解它最简单最源头的方式。</p><p>我们将正常流的知识分成了三个部分。</p><ul>\n<li>\n<p>正常流的行为部分，我们从一些感性认知出发，帮助你从思路和源头上理解正常流的行为。</p>\n</li>\n<li>\n<p>正常流的原理部分，我用更严格的描述方式，给你讲解了CSS标准中规定的正常流排版逻辑。</p>\n</li>\n<li>\n<p>最后的正常流应用部分，我以两个经典布局问题等分布局和自适应宽为例，为你讲解了正常流实际使用的一些技巧。</p>\n</li>\n</ul><p>最后，留给你一个思考题：用JavaScript写一个仅包含inline-block的正常流布局算法。你写好的话，可以留言给我，我们一起讨论。</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "CSS排版：从毕升开始，我们就开始用正常流了",
      },
      {
        title: "HTML替换型元素：为什么link一个CSS要用href，而引入js要用src呢？",
        herf: "https://time.geekbang.org/column/article/89491",
        id: "89491",
        content:
          '<p>你好，我是winter。我们今天来讲讲替换型元素。</p><p>我们都知道一个常识，一个网页，它是由多个文件构成的，我们在之前的课程中，已经学过了一种引入文件的方案：链接。</p><p>这节课我们要讲的替换型元素，就是另一种引入文件的方式了。替换型元素是把文件的内容引入，替换掉自身位置的一类标签。</p><p>我们首先来看一种比较熟悉的标签：script标签。</p><h2>script</h2><p>我们之所以选择先讲解script标签，是因为script标签是为数不多的既可以作为替换型标签，又可以不作为替换型标签的元素。</p><p>我们先来看看script标签的两种用法：</p><pre><code class="language-HTML">\n&lt;script type="text/javascript"&gt;\nconsole.log("Hello world!");\n&lt;/script&gt;\n\n\n&lt;script type="text/javascript" src="my.js"&gt;&lt;/script&gt;\n\n</code></pre><p>这个例子中，我们展示了两种script标签的写法，一种是直接把脚本代码写在script标签之间，另一种是把代码放到独立的js文件中，用src属性引入。</p><p>这两种写法是等效的。我想这种等效性可以帮助你理解替换型元素的“替换”是怎么一回事。</p><p>这里我们就可以回答标题中的问题了：凡是替换型元素，都是使用src属性来引用文件的，而我们之前的课程中已经讲过，链接型元素是使用href标签的。</p><!-- [[[read_end]]] --><p>虽然我不知道当初是怎么设计的，但是style标签并非替换型元素，不能使用src属性，这样，我们用link标签引入CSS文件，当然就是用href标签啦。</p><p>接下来我们再看看别的替换型元素，先来了解一下img标签。</p><h2>img</h2><p>毫无疑问我们最熟悉的替换型标签就是img标签了，几乎每个前端都会日常使用img标签。</p><p>img标签的作用是引入一张图片。这个标签是没有办法像script标签那样作为非替换型标签来使用的，它必须有src属性才有意义。</p><p>如果一定不想要引入独立文件，可以使用data uri，我们来看个实际的例子：</p><pre><code class="language-HTML"> &lt;img src=\'data:image/svg+xml;charset=utf8,&lt;svg version="1.1" xmlns="http://www.w3.org/2000/svg"&gt;&lt;rect width="300" height="100" style="fill:rgb(0,0,255);stroke-width:1;stroke:rgb(0,0,0)"/&gt;&lt;/svg&gt;\'/&gt;\n</code></pre><p>这个例子中我们使用了data uri作为图片的src，这样，并没有产生独立的文件，客观上做到了和内联相同的结果，这是一个常用的技巧。</p><p>img标签可以使用width和height指定宽度和高度。也可以只指定其中之一。我们看个例子：</p><pre><code class="language-HTML"> &lt;img src=\'data:image/svg+xml;charset=utf8,&lt;svg width="600" height="400" version="1.1"\nxmlns="http://www.w3.org/2000/svg"&gt;&lt;ellipse cx="300" cy="150" rx="200" ry="80"\nstyle="fill:rgb(200,100,50);\nstroke:rgb(0,0,100);stroke-width:2"/&gt;&lt;/svg&gt;\' width="100"/&gt;\n</code></pre><p>这个例子中，为了方便你理解，我们把图片换成了椭圆，我们可以看到，当我们指定了宽度后，图片被<strong>等比例缩放了</strong>。这个特性非常重要，适用于那种我们既要限制图片尺寸，又要保持图片比例的场景。</p><p>如果从性能的角度考虑，建议你同时给出图片的宽高，因为替换型元素加载完文件后，如果尺寸发生变换，会触发重排版（这个概念我们在浏览器原理部分已经讲过，可以复习一下）。</p><p>此处要重点提到一个属性，alt属性，这个属性很难被普通用户感知，对于视障用户非常重要，可以毫不夸张地讲，给img加上alt属性，已经做完了可访问性的一半。</p><p>img标签还有一组重要的属性，那就是srcset和sizes，它们是src属性的升级版（所以我们前面讲img标签必须有src属性，这是不严谨的说法）。</p><p>这两个属性的作用是在不同的屏幕大小和特性下，使用不同的图片源。下面一个例子也来自MDN，它展示了srcset和sizes的用法</p><pre><code class="language-JavaScript">&lt;img srcset="elva-fairy-320w.jpg 320w,\n             elva-fairy-480w.jpg 480w,\n             elva-fairy-800w.jpg 800w"\n     sizes="(max-width: 320px) 280px,\n            (max-width: 480px) 440px,\n            800px"\n     src="elva-fairy-800w.jpg" alt="Elva dressed as a fairy"&gt;\n</code></pre><p>srcset提供了根据屏幕条件选取图片的能力，但是其实更好的做法，是使用picture元素。</p><h2>picture</h2><p>picture元素可以根据屏幕的条件为其中的img元素提供不同的源，它的基本用法如下：</p><pre><code class="language-HTML">&lt;picture&gt;\n  &lt;source srcset="image-wide.png" media="(min-width: 600px)"&gt;\n  &lt;img src="image-narrow.png"&gt;\n&lt;/picture&gt;\n</code></pre><p>picture元素的设计跟audio和video保持了一致（稍后我会为你讲解这两个元素），它跟img搭配srcset和sizes不同，它使用source元素来指定图片源，并且支持多个。</p><p>这里的media属性是media query，跟CSS的@media规则一致。</p><h2>video</h2><p>在HTML5早期的设计中，video标签跟img标签类似，也是使用src属性来引入源文件的，不过，我想应该是考虑到了各家浏览器支持的视频格式不同，现在的video标签跟picture元素一样，也是提倡使用source的。</p><p>下面例子是一个古典的video用法：</p><pre><code class="language-HTML">&lt;video controls="controls" src="movie.ogg"&gt;\n&lt;/video&gt;\n</code></pre><p>这个例子中的代码用src来指定视频的源文件。但是因为一些历史原因，浏览器对视频的编码格式兼容问题分成了几个派系，这样，对于一些兼容性要求高的网站，我们使用单一的视频格式是不合适的。</p><p>现在的video标签可以使用source标签来指定接入多个视频源。</p><pre><code class="language-HTML">&lt;video controls="controls" &gt;\n  &lt;source src="movie.webm" type="video/webm" &gt;\n  &lt;source src="movie.ogg" type="video/ogg" &gt;\n  &lt;source src="movie.mp4" type="video/mp4"&gt;\n  You browser does not support video.\n&lt;/video&gt;\n</code></pre><p>从这个例子中，我们可以看到，source标签除了支持media之外，还可以使用type来区分源文件的使用场景。</p><p>video标签的内容默认会被当做不支持video的浏览器显示的内容吗，因此，如果要支持更古老的浏览器，还可以在其中加入object或者embed标签，这里就不详细展开了。</p><p>video中还支持一种标签：track。</p><p>track是一种播放时序相关的标签，它最常见的用途就是字幕。track标签中，必须使用 srclang 来指定语言，此外，track具有kind属性，共有五种。</p><ul>\n<li>subtitles：就是字幕了，不一定是翻译，也可能是补充性说明。</li>\n<li>captions：报幕内容，可能包含演职员表等元信息，适合听障人士或者没有打开声音的人了解音频内容。</li>\n<li>descriptions：视频描述信息，适合视障人士或者没有视频播放功能的终端打开视频时了解视频内容。</li>\n<li>chapters：用于浏览器视频内容。</li>\n<li>metadata：给代码提供的元信息，对普通用户不可见。</li>\n</ul><p>一个完整的video标签可能会包含多种track和多个source，这些共同构成了一个视频播放所需的全部信息。</p><h2>audio</h2><p>接下来我们来讲讲audio，跟picture和video两种标签一样，audio也可以使用source元素来指定源文件。我们看一下例子：</p><pre><code class="language-HTML">&lt;audio controls&gt;\n  &lt;source src="song.mp3" type="audio/mpeg"&gt;\n  &lt;source src="song.ogg" type="audio/ogg"&gt;\n  &lt;p&gt;You browser does not support audio.&lt;/p&gt;\n&lt;/audio&gt;\n</code></pre><p>但比起video，audio元素的历史问题并不严重，所以使用src也是没有问题的。</p><h2>iframe</h2><p>最后我们来讲一下iframe，这个标签能够嵌入一个完整的网页。</p><p>不过，在移动端，iframe受到了相当多的限制，它无法指定大小，里面的内容会被完全平铺到父级页面上。</p><p>同时很多网页也会通过http协议头禁止自己被放入iframe中。</p><p>iframe标签也是各种安全问题的重灾区。opener、window.name、甚至css的opacity都是黑客可以利用的漏洞。</p><p>因此，在2019年，当下这个时间点，任何情况下我都不推荐在实际开发中用以前的iframe。</p><p>当然，不推荐使用是一回事，因为没人能保证不遇到历史代码，我们还是应该了解一下iframe的基本用法：</p><pre><code class="language-HTML">&lt;iframe src="http://time.geekbang.org"&gt;&lt;/iframe&gt;\n</code></pre><p>这个例子展示了古典的iframe用法。</p><p>在新标准中，为iframe加入了sandbox模式和srcdoc属性，这样，给iframe带来了一定的新场景。我们来看看例子：</p><pre><code class="language-HTML">&lt;iframe sandbox srcdoc="&lt;p&gt;Yeah, you can see it &lt;a href="/gallery?mode=cover&amp;amp;amp;page=1"&gt;in my gallery&lt;/a&gt;."&gt;&lt;/iframe&gt;\n</code></pre><p>这个例子中，使用srcdoc属性创建了一个新的文档，嵌入在iframe中展示，并且使用了sandbox来隔离。</p><p>这样，这个iframe就不涉及任何跨域问题了。</p><h2>总结</h2><p>这节课，我们又认识了一组HTML元素：替换型元素。它们的特点是，引入一个外部资源来进入页面，替换掉自身的位置。</p><p>我们通过对script、img、picture、audio、video、iframe几个标签的讲解，了解了不同的资源引入方式：</p><ul>\n<li>src属性；</li>\n<li>srcset属性；</li>\n<li>source标签；</li>\n<li>srcdoc属性。</li>\n</ul><p>这中间，我们也介绍了一些小技巧，比如src属性的好朋友：data uri，这在实际开发中非常有用。</p><p>最后，留给你一个小问题，请查资料总结一下，在多数现代浏览器兼容的范围内，src属性支持哪些协议的uri（如http和我们提到的data）。</p><p></p>',
        article_title:
          "HTML替换型元素：为什么link一个CSS要用href，而引入js要用src呢？",
      },
      {
        title: "HTML小实验：用代码分析HTML标准",
        herf: "https://time.geekbang.org/column/article/89832",
        id: "89832",
        content:
          '<p>你好，我是winter。</p><p>前面的课程中，我们已经讲解了大部分的HTML标签。</p><p>然而，为了突出重点，我们还是会忽略一些标签类型。比如表单类标签和表格类标签，我认为只有少数前端工程师用过，比如我在整个手机淘宝的工作生涯中，一次表格类标签都没有用到，表单类则只用过input，也只有几次。</p><p>那么，剩下的标签我们怎么样去了解它们呢？当然是查阅HTML标准。</p><p>由于阅读标准有一定门槛，需要了解一些机制，这节课，我为你设计了一个小实验，用JavaScript代码去抽取标准中我们需要的信息。</p><h2>HTML标准</h2><p>我们采用WHATWG的living standard标准，我们先来看看标准是如何描述一个标签的，这里我们看到，有下面这些内容。</p><pre><code>Categories:\n    Flow content.\n    Phrasing content.\n    Embedded content.\n    If the element has a controls attribute: Interactive content.\n    Palpable content.\nContexts in which this element can be used:\n    Where embedded content is expected.\nContent model:\n    If the element has a src attribute: zero or more track elements, then transparent, but with no media element descendants.\n    If the element does not have a src attribute: zero or more source elements, then zero or more track elements, then transparent, but with no media element descendants.\nTag omission in text/html:\n    Neither tag is omissible.\nContent attributes:\n    Global attributes\n    src — Address of the resource\n    crossorigin — How the element handles crossorigin requests\n    poster — Poster frame to show prior to video playback\n    preload — Hints how much buffering the media resource will likely need\n    autoplay — Hint that the media resource can be started automatically when the page is loaded\n    playsinline — Encourage the user agent to display video content within the element\'s playback area\n    loop — Whether to loop the media resource\n    muted — Whether to mute the media resource by default\n    controls — Show user agent controls\n    width — Horizontal dimension\n    height — Vertical dimension\nDOM interface:\n    [Exposed=Window, HTMLConstructor]\n    interface HTMLVideoElement : HTMLMediaElement {\n      [CEReactions] attribute unsigned long width;\n      [CEReactions] attribute unsigned long height;\n      readonly attribute unsigned long videoWidth;\n      readonly attribute unsigned long videoHeight;\n      [CEReactions] attribute USVString poster;\n      [CEReactions] attribute boolean playsInline;\n    };\n</code></pre><p>我们看到，这里的描述分为6个部分，有下面这些内容。</p><ul>\n<li>Categories：标签所属的分类。</li>\n<li>Contexts in which this element can be used：标签能够用在哪里。</li>\n<li>Content model：标签的内容模型。</li>\n<li>Tag omission in text/html：标签是否可以省略。</li>\n<li>Content attributes：内容属性。</li>\n<li>DOM interface：用WebIDL定义的元素类型接口。</li>\n</ul><!-- [[[read_end]]] --><p>这一节课，我们关注一下Categories、Contexts in which this element can be used、Content model这几个部分。我会带你从标准中抓取数据，做一个小工具，用来检查X标签是否能放入Y标签内。</p><h2>代码角度分析HTML标准</h2><p>HTML标准描述用词非常的严谨，这给我们抓取数据带来了巨大的方便，首先，我们打开单页面版HTML标准：</p><ul>\n<li><a href="https://html.spec.whatwg.org/">https://html.spec.whatwg.org/</a></li>\n</ul><p>在这个页面上，我们执行一下以下代码：</p><pre><code>Array.prototype.map.call(document.querySelectorAll(&quot;.element&quot;), e=&gt;e.innerText);\n</code></pre><p>这样我们就得到了所有元素的定义了，现在有107个元素。</p><p>不过，比较尴尬的是，这些文本中并不包含元素名，我们只好从id属性中获取，最后代码类似这样：</p><pre><code class="language-JavaScript">var elementDefinations = Array.prototype.map.call(document.querySelectorAll(".element"), e =&gt; ({\n  text:e.innerText,\n  name:e.childNodes[0].childNodes[0].id.match(/the\\-([\\s\\S]+)\\-element:/)?RegExp.$1:null}));\n</code></pre><p>接下来我们用代码理解一下这些文本。首先我们来分析一下这些文本，它分成了6个部分，而且顺序非常固定，这样，我们可以用JavaScript的正则表达式匹配来拆分六个字段。</p><p>我们这个小实验的目标是计算元素之间的包含关系，因此，我们先关心一下categories和contentModel两个字段。</p><pre><code class="language-JavaScript">for(let defination of elementDefinations) {\n\n  console.log(defination.name + ":")\n  let categories = defination.text.match(/Categories:\\n([\\s\\S]+)\\nContexts in which this element can be used:/)[1].split("\\n");\n  for(let category of categories) {\n      console.log(category);\n  }\n    \n\n/*\n  let contentModel = defination.text.match(/Content model:\\n([\\s\\S]+)\\nTag omission in text\\/html:/)[1].split("\\n");\n  for(let line of contentModel)\n    console.log(line);\n*/\n}\n</code></pre><p>接下来我们来处理category。</p><p>首先category的写法中，最基本的就是直接描述了category的句子，我们把这些不带任何条件的category先保存起来，然后打印出来其它的描述看看：</p><pre><code class="language-JavaScript">for(let defination of elementDefinations) {\n\n  //console.log(defination.name + ":")\n  let categories = defination.text.match(/Categories:\\n([\\s\\S]+)\\nContexts in which this element can be used:/)[1].split("\\n");\n  defination.categories = [];\n  for(let category of categories) {\n    if(category.match(/^([^ ]+) content./))\n      defination.categories.push(RegExp.$1);\n    else\n      console.log(category)  \n  }\n    \n\n/*\n  let contentModel = defination.text.match(/Content model:\\n([\\s\\S]+)\\nTag omission in text\\/html:/)[1].split("\\n");\n  for(let line of contentModel)\n    console.log(line);\n*/\n}\n</code></pre><p>这里我们要处理的第一个逻辑是带if的情况。</p><p>然后我们来看看剩下的情况：</p><pre><code> None.\n Sectioning root.\n None.\n Sectioning root.\n None.\n Form-associated element.\n Listed and submittable form-associated element.\n None.\n Sectioning root.\n None.\n If the type attribute is not in the Hidden state: Listed, labelable, submittable, resettable, and autocapitalize-inheriting form-associated element.\n If the type attribute is in the Hidden state: Listed, submittable, resettable, and autocapitalize-inheriting form-associated element.\n Listed, labelable, submittable, and autocapitalize-inheriting form-associated element.\n Listed, labelable, submittable, resettable, and autocapitalize-inheriting form-associated element.\n None.\n Listed, labelable, submittable, resettable, and autocapitalize-inheriting form-associated element.\n Listed, labelable, resettable, and autocapitalize-inheriting form-associated element.\n Labelable element.\n Sectioning root.\n Listed and autocapitalize-inheriting form-associated element.\n None.\n Sectioning root.\n None.\n Sectioning root.\n Script-supporting element.\n</code></pre><p>这里出现了几个概念：</p><ul>\n<li>None</li>\n<li>Sectioning root</li>\n<li>Form-associated element</li>\n<li>Labelable element</li>\n<li>Script-supporting element</li>\n</ul><p>如果我们要真正完美地实现元素分类，就必须要在代码中加入正则表达式来解析这些规则，这里作为今天的课后问题，留给你自己完成。</p><p>接下来我们看看Content Model，我们照例先处理掉最简单点的部分，就是带分类的内容模型：</p><pre><code class="language-JavaScript">\nfor(let defination of elementDefinations) {\n\n  //console.log(defination.name + ":")\n  let categories = defination.text.match(/Categories:\\n([\\s\\S]+)\\nContexts in which this element can be used:/)[1].split("\\n");\n  defination.contentModel = [];\n  let contentModel = defination.text.match(/Content model:\\n([\\s\\S]+)\\nTag omission in text\\/html:/)[1].split("\\n");\n  for(let line of contentModel)\n    if(line.match(/^([^ ]+) content./))\n      defination.contentModel.push(RegExp.$1);\n    else\n      console.log(line)\n}\n\n</code></pre><p>好了，我们照例看看剩下了什么：</p><pre><code> A head element followed by a body element.\n If the document is an iframe srcdoc document or if title information is available from a higher-level protocol: Zero or more elements of metadata content, of which no more than one is a title element and no more than one is a base element.\n Otherwise: One or more elements of metadata content, of which exactly one is a title element and no more than one is a base element.\n Text that is not inter-element whitespace.\n Nothing.\n Text that gives a conformant style sheet.\n One or more h1, h2, h3, h4, h5, h6 elements, optionally intermixed with script-supporting elements.\n Nothing.\n Zero or more li and script-supporting elements.\n Either: Zero or more groups each consisting of one or more dt elements followed by one or more dd elements, optionally intermixed with script-supporting elements.\n Or: One or more div elements, optionally intermixed with script-supporting elements.\n Either: one figcaption element followed by flow content.\n Or: flow content followed by one figcaption element.\n Or: flow content.\n If the element is a child of a dl element: one or more dt elements followed by one or more dd elements, optionally intermixed with script-supporting elements.\n If the element is not a child of a dl element: flow content.\n Transparent, but there must be no interactive content or a element descendants.\n See prose.\n Text.\n If the element has a datetime attribute: Phrasing content.\n Otherwise: Text, but must match requirements described in prose below.\n Nothing.\n Transparent.\n Zero or more source elements, followed by one img element, optionally intermixed with script-supporting elements.\n Nothing.\n Zero or more param elements, then, transparent.\n Nothing.\n If the element has a src attribute: zero or more track elements, then transparent, but with no media element descendants.\n If the element does not have a src attribute: zero or more source elements, then zero or more track elements, then transparent, but with no media element descendants.\n If the element has a src attribute: zero or more track elements, then transparent, but with no media element descendants.\n If the element does not have a src attribute: zero or more source elements, then zero or more track elements, then transparent, but with no media element descendants.\n Nothing.\n Transparent.\n Nothing.\n In this order: optionally a caption element, followed by zero or more colgroup elements, followed optionally by a thead element, followed by either zero or more tbody elements or one or more tr elements, followed optionally by a tfoot element, optionally intermixed with one or more script-supporting elements.\n If the span attribute is present: Nothing.\n If the span attribute is absent: Zero or more col and template elements.\n Nothing.\n Zero or more tr and script-supporting elements.\n Zero or more td, th, and script-supporting elements.\n Nothing.\n Zero or more option, optgroup, and script-supporting elements.\n Either: phrasing content.\n Or: Zero or more option and script-supporting elements.\n Zero or more option and script-supporting elements.\n If the element has a label attribute and a value attribute: Nothing.\n If the element has a label attribute but no value attribute: Text.\n If the element has no label attribute and is not a child of a datalist element: Text that is not inter-element whitespace.\n If the element has no label attribute and is a child of a datalist element: Text.\n Text.\n Optionally a legend element, followed by flow content.\n One summary element followed by flow content.\n Either: phrasing content.\n Or: one element of heading content.\n If there is no src attribute, depends on the value of the type attribute, but must match script content restrictions.\n If there is a src attribute, the element must be either empty or contain only script documentation that also matches script content restrictions.\n When scripting is disabled, in a head element: in any order, zero or more link elements, zero or more style elements, and zero or more meta elements.\n When scripting is disabled, not in a head element: transparent, but there must be no noscript element descendants.\n Otherwise: text that conforms to the requirements given in the prose.\n Nothing (for clarification, see example).\n Transparent\n Transparent, but with no interactive content descendants except for a elements, img elements with usemap attributes, button elements, input elements whose type attribute are in the Checkbox or Radio Button states, input elements that are buttons, select elements with a multiple attribute or a display size greater than 1, and elements that would not be interactive content except for having the tabindex attribute specified.\n</code></pre><p>这有点复杂，我们还是把它做一些分类，首先我们过滤掉带If的情况、Text和Transparent。</p><pre><code class="language-JavaScript">for(let defination of elementDefinations) {\n  //console.log(defination.name + ":")\n  let categories = defination.text.match(/Categories:\\n([\\s\\S]+)\\nContexts in which this element can be used:/)[1].split("\\n");\n  defination.contentModel = [];\n  let contentModel = defination.text.match(/Content model:\\n([\\s\\S]+)\\nTag omission in text\\/html:/)[1].split("\\n");\n  for(let line of contentModel)\n    if(line.match(/([^ ]+) content./))\n      defination.contentModel.push(RegExp.$1);\n    else if(line.match(/Nothing.|Transparent./));\n    else if(line.match(/^Text[\\s\\S]*.$/));\n    else\n      console.log(line)\n}\n</code></pre><p>这时候我们再来执行看看：</p><pre><code>A head element followed by a body element.\nOne or more h1, h2, h3, h4, h5, h6 elements, optionally intermixed with script-supporting elements.\nZero or more li and script-supporting elements.\nEither: Zero or more groups each consisting of one or more dt elements followed by one or more dd elements, optionally intermixed with script-supporting elements.\nOr: One or more div elements, optionally intermixed with script-supporting elements.\nIf the element is a child of a dl element: one or more dt elements followed by one or more dd elements, optionally intermixed with script-supporting elements.\nSee prose.\nOtherwise: Text, but must match requirements described in prose below.\nZero or more source elements, followed by one img element, optionally intermixed with script-supporting elements.\nZero or more param elements, then, transparent.\nIf the element has a src attribute: zero or more track elements, then transparent, but with no media element descendants.\nIf the element does not have a src attribute: zero or more source elements, then zero or more track elements, then transparent, but with no media element descendants.\nIf the element has a src attribute: zero or more track elements, then transparent, but with no media element descendants.\nIf the element does not have a src attribute: zero or more source elements, then zero or more track elements, then transparent, but with no media element descendants.\nIn this order: optionally a caption element, followed by zero or more colgroup elements, followed optionally by a thead element, followed by either zero or more tbody elements or one or more tr elements, followed optionally by a tfoot element, optionally intermixed with one or more script-supporting elements.\nIf the span attribute is absent: Zero or more col and template elements.\nZero or more tr and script-supporting elements.\nZero or more td, th, and script-supporting elements.\nZero or more option, optgroup, and script-supporting elements.\nOr: Zero or more option and script-supporting elements.\nZero or more option and script-supporting elements.\nIf the element has a label attribute but no value attribute: Text.\nIf the element has no label attribute and is not a child of a datalist element: Text that is not inter-element whitespace.\nIf the element has no label attribute and is a child of a datalist element: Text.\nWhen scripting is disabled, in a head element: in any order, zero or more link elements, zero or more style elements, and zero or more meta elements.\nWhen scripting is disabled, not in a head element: transparent, but there must be no noscript element descendants.\nOtherwise: text that conforms to the requirements given in the prose.\n</code></pre><p>这下剩余的就少多了，我们可以看到，基本上剩下的都是直接描述可用的元素了，如果你愿意，还可以用代码进一步解析，不过如果是我的话，会选择手工把它们写成JSON了，毕竟只有三十多行文本。</p><p>好了，有了contentModel和category，我们要检查某一元素是否可以作为另一元素的子元素，就可以判断一下两边是否匹配啦，首先，我们要做个索引：</p><pre><code class="language-JavaScript">var dictionary = Object.create(null);\n\nfor(let defination of elementDefinations) {\n  dictionary[defination.name] = defination;\n}\n\n</code></pre><p>然后我们编写一下我们的check函数：</p><pre><code class="language-JavaScript">function check(parent, child) {\n  for(let category of child.categories)\n    if(parent.contentModel.categories.contains(category))\n      return true;\n  if(parent.contentModel.names.contains(child.name))\n      return true;\n  return false;\n}\n\n</code></pre><h2>总结</h2><p>这一节课，我们完成了一个小实验：利用工具分析Web标准文本，来获得元素的信息。</p><p>通过这个实验，我希望能够传递一种思路，代码能够帮助我们从Web标准中挖掘出来很多想要的信息，编写代码的过程，也是更深入理解标准的契机。</p><p>我们前面的课程中把元素分成了几类来讲解，但是这些分类只能大概地覆盖所有的标签，我设置课程的目标也是讲解标签背后的知识，而非每一种标签的细节。具体每一种标签的属性和细节，可以留给大家自己去整理。</p><p>这一节课的产出，则是“绝对完整的标签列表”，也是我学习和阅读标准的小技巧，通过代码我们可以从不同的侧面分析标准的内容，挖掘需要注意的点，这是一种非常好的学习方法。</p>',
        article_title: "HTML小实验：用代码分析HTML标准",
      },
      {
        title: "CSS Flex排版：为什么垂直居中这么难？",
        herf: "https://time.geekbang.org/column/article/90148",
        id: "90148",
        content:
          '<p>你好，我是winter。今天我们来谈谈Flex排版。</p><p>我们在前面多次讲过，正常流排版的设计来源于数百年来出版行业的排版经验，而HTML诞生之初，也确实是作为一种“超文本”存在的。</p><p>但是，自上世纪90年代以来，Web标准和各种Web应用蓬勃发展，网页的功能逐渐从“文本信息”向着“软件功能”过渡，这个思路的变化导致了：CSS的正常流逐渐不满足人民群众的需求了。</p><p>这是因为文字排版的思路是“改变文字和盒的相对位置，把它放进特定的版面中”，而软件界面的思路则是“改变盒的大小，使得它们的结构保持固定”。</p><p>因此，在早年的CSS中，“使盒按照外部尺寸变化”的能力非常弱。在我入行前端的时间（大约2006年），CSS三大经典问题：垂直居中问题，两列等高问题，自适应宽问题。这是在其它UI系统中最为基本的问题，而到了CSS中，却变成了困扰工程师的三座大山。</p><p>机智的前端开发者们，曾经创造了各种黑科技来解决问题，包括著名的table布局、负margin、float与clear等等。在这种情况下，Flex布局被随着CSS3一起提出（最初叫box布局），可以说是解决了大问题。</p><p>React Native则更为大胆地使用了纯粹的Flex排版，不再支持正常流，最终也很好地支持了大量的应用界面布局，这一点也证明了Flex排版的潜力。</p><!-- [[[read_end]]] --><p>今天，我们就从设计、原理和应用三个方面来学习一下Flex布局，我们先从设计开始。</p><h2>Flex的设计</h2><p>Flex在英文中是可伸缩的意思，一些翻译会把它译作弹性，我觉得有点不太准确，但是确实中文中没有更好的词。</p><p>Flex排版的核心是display:flex和flex属性，它们配合使用。具有display:flex的元素我们称为flex容器，它的子元素或者盒被称作flex项。</p><p>flex项如果有flex属性，会根据flex方向代替宽/高属性，形成“填补剩余尺寸”的特性，这是一种典型的“根据外部容器决定内部尺寸”的思路，也是我们最常用的Windows和Apple窗口系统的设计思路。</p><h2>Flex的原理</h2><p>说完了设计，我们再来看看原理，Flex的实现并不复杂，我曾经写过一个基本实现提交给spritejs项目，代码可以<a href="https://github.com/spritejs/sprite-core/commit/8757b4d3888b4f237b1089e94e075ab58ca952a6#diff-677d382da9f8d81f61d50af24f937b32R32">参考这里</a>。</p><p>下面我们就来讲解一下，如何实现一个Flex布局。</p><p>首先，Flex布局支持横向和纵向，这样我们就需要做一个抽象，我们把Flex延伸的方向称为“主轴”，把跟它垂直的方向称为“交叉轴”。这样，flex项中的width和height就会称为交叉轴尺寸或者主轴尺寸。</p><p>而Flex又支持反向排布，这样，我们又需要抽象出交叉轴起点、交叉轴终点、主轴起点、主轴终点，它们可能是top、left、bottom、right。</p><p>Flex布局中有一种特殊的情况，那就是flex容器没有被指定主轴尺寸，这个时候，实际上Flex属性完全没有用了，所有Flex尺寸都可以被当做0来处理，Flex容器的主轴尺寸等于其它所有flex项主轴尺寸之和。</p><p>接下来我们开始做Flex排版。</p><p><strong>第一步是把flex项分行，有flex属性的flex项可以暂且认为主轴尺寸为0，所以，它可以一定放进当前行。</strong></p><p>接下来我们把flex项逐个放入行，不允许换行的话，我们就“无脑地”把flex项放进同一行。允许换行的话，我们就先设定主轴剩余空间为Flex容器主轴尺寸，每放入一个就把主轴剩余空间减掉它的主轴尺寸，直到某个flex项放不进去为止，换下一行，重复前面动作。</p><p>分行过程中，我们会顺便对每一行计算两个属性：交叉轴尺寸和主轴剩余空间，交叉轴尺寸是本行所有交叉轴尺寸的最大值，而主轴剩余空间前面已经说过。</p><p><strong>第二步我们来计算每个flex项主轴尺寸和位置。</strong></p><p>如果Flex容器是不允许换行的，并且最后主轴尺寸超出了Flex容器，就要做等比缩放。</p><p>如果Flex容器有多行，那么根据我们前面的分行算法，必然有主轴剩余空间，这时候，我们要找出本行所有的带Flex属性的flex项，把剩余空间按Flex比例分给它们即可。</p><p>做好之后，我们就可以根据主轴排布方向，确定每个flex项的主轴位置坐标了。</p><p>如果本行完全没有带flex属性的flex项，justify-content机制就要生效了，它的几个不同的值会影响剩余空白如何分配，作为实现者，我们只要在计算flex项坐标的时候，加上一个数值即可。</p><p>例如，如果是flex-start就要加到第一个flex项身上，如果是center就给第一个flex项加一半的尺寸，如果是space-between，就要给除了第一个以外的每个flex项加上“flex项数减一分之一”。</p><p><strong>第三步我们来计算flex项的交叉轴尺寸和位置。</strong></p><p>交叉轴的计算首先是根据align-content计算每一行的位置，这部分跟justify-content非常类似。</p><p>再根据alignItems和flex项的alignSelf来确定每个元素在行内的位置。</p><p>计算完主轴和交叉轴，每个flex项的坐标、尺寸就都确定了，这样我们就完成了整个的Flex布局。</p><h2>Flex的应用</h2><p>接下来我们来尝试用flex排版来解决一下当年的CSS三大经典问题（简直易如反掌）。</p><p>垂直居中：</p><pre><code class="language-HTML">&lt;div id="parent"&gt;\n  &lt;div id="child"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><pre><code class="language-CSS">#parent {\n  display:flex;\n  width:300px;\n  height:300px;\n  outline:solid 1px;\n  justify-content:center;\n  align-content:center;\n  align-items:center;\n}\n#child {\n  width:100px;\n  height:100px;\n  outline:solid 1px;\n}\n</code></pre><p>思路是创建一个只有一行的flexbox，然后用align-items:center;和align-content:center;来保证行位于容器中，元素位于行中。</p><p>两列等高：</p><pre><code class="language-HTML">&lt;div class="parent"&gt;\n  &lt;div class="child" style="height:300px;"&gt;\n  &lt;/div&gt;\n  &lt;div class="child"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;br/&gt;\n&lt;div class="parent"&gt;\n  &lt;div class="child" &gt;\n  &lt;/div&gt;\n  &lt;div class="child" style="height:300px;"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><pre><code class="language-CSS">.parent {\n  display:flex;\n  width:300px;\n  justify-content:center;\n  align-content:center;\n  align-items:stretch;\n}\n.child {\n  width:100px;\n  outline:solid 1px;\n}\n</code></pre><p>思路是创建一个只有一行的flexbox，然后用stretch属性让每个元素高度都等于行高。</p><p>自适应宽：</p><pre><code class="language-HTML">&lt;div class="parent"&gt;\n  &lt;div class="child1"&gt;\n  &lt;/div&gt;\n  &lt;div class="child2"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre><pre><code class="language-CSS">.parent {\n  display:flex;\n  width:300px;\n  height:200px;\n  background-color:pink;\n}\n.child1 {\n  width:100px;\n  background-color:lightblue;\n}\n.child2 {\n  width:100px;\n  flex:1;\n  outline:solid 1px;\n}\n</code></pre><p>这个就是Flex设计的基本能力了，给要自适应的元素添加flex属性即可。</p><h2>总结</h2><p>今天我们从Flex的设计、原理和应用三个方面一起学习了Flex排版。</p><p>我们先从感性的角度，介绍了Flex的设计，Flex的设计是一种不同于流布局的，自外而内的设计思路。</p><p>接下来我们讲解了Flex的实现原理，也就是具体的排版算法。要想理解Flex排版的原理，主轴和交叉轴是非常重要的抽象，Flex排版三个步骤：分行、计算主轴、计算交叉轴。</p><p>最后我们给出了几个例子，解决了旧时代的CSS三大经典问题。</p><p>最后，给你留一个小问题，请根据我的代码和文字，编写一段使用“position:absolute”来模拟Flex布局的js。大家可以根据自己的水平，简化需求，比如可以实现一个仅仅支持横向的、单行的所有flex项必须指定高度的Flex布局。</p><p></p>',
        article_title: "CSS Flex排版：为什么垂直居中这么难？",
      },
      {
        title: "CSS动画与交互：为什么动画要用贝塞尔曲线这么奇怪的东西？",
        herf: "https://time.geekbang.org/column/article/91325",
        id: "91325",
        content:
          '<p>你好，我是winter，今天我们来学习一下CSS的动画和交互。</p><p>在CSS属性中，有这么一类属性，它负责的不是静态的展现，而是根据用户行为产生交互。这就是今天我们要讲的属性。</p><p>首先我们先从属性来讲起。CSS中跟动画相关的属性有两个：animation和transition。</p><h2>animation属性和transition属性</h2><p>我们先来看下animation的示例，通过示例来了解一下animation属性的基本用法:</p><pre><code class="language-CSS">@keyframes mykf\n{\n  from {background: red;}\n  to {background: yellow;}\n}\n\ndiv\n{\n    animation:mykf 5s infinite;\n}\n</code></pre><p>这里展示了animation的基本用法，实际上animation分成六个部分：</p><ul>\n<li>animation-name 动画的名称，这是一个keyframes类型的值（我们在第9讲“CSS语法：除了属性和选择器，你还需要知道这些带@的规则”讲到过，keyframes产生一种数据，用于定义动画关键帧）；</li>\n<li>animation-duration 动画的时长；</li>\n<li>animation-timing-function\t动画的时间曲线；</li>\n<li>animation-delay\t动画开始前的延迟；</li>\n<li>animation-iteration-count\t动画的播放次数；</li>\n<li>animation-direction\t动画的方向。</li>\n</ul><!-- [[[read_end]]] --><p>我们先来看 <code>animation-name</code>，这个是一个keyframes类型，需要配合@规则来使用。</p><p>比如，我们前面的示例中，就必须配合定义 mymove 这个 keyframes。keyframes的主体结构是一个名称和花括号中的定义，它按照百分比来规定数值，例如：</p><pre><code class="language-CSS">@keyframes mykf {\n  0% { top: 0; }\n  50% { top: 30px; }\n  75% { top: 10px; }\n  100% { top: 0; }\n}\n</code></pre><p>这里我们可以规定在开始时把top值设为0，在50%是设为30px，在75%时设为10px，到100%时重新设为0，这样，动画执行时就会按照我们指定的关键帧来变换数值。</p><p>这里，0%和100%可以写成from和to，不过一般不会混用，画风会变得很奇怪，比如：</p><pre><code class="language-CSS">@keyframes mykf {\n  from { top: 0; }\n  50% { top: 30px; }\n  75% { top: 10px; }\n  to { top: 0; }\n}\n</code></pre><p>这里关键帧之间，是使用 <code>animation-timing-function</code> 作为时间曲线的，稍后我会详细介绍时间曲线。</p><p>接下来我们来介绍一下transition。transition与animation相比来说，是简单得多的一个属性。</p><p>它有四个部分：</p><ul>\n<li>transition-property 要变换的属性；</li>\n<li>transition-duration 变换的时长；</li>\n<li>transition-timing-function 时间曲线；</li>\n<li>transition-delay 延迟。</li>\n</ul><p>这里的四个部分，可以重复多次，指定多个属性的变换规则。</p><p>实际上，有时候我们会把transition和animation组合，抛弃animation的timing-function，以编排不同段用不同的曲线。</p><pre><code class="language-CSS">@keyframes mykf {\n  from { top: 0; transition:top ease}\n  50% { top: 30px;transition:top ease-in }\n  75% { top: 10px;transition:top ease-out }\n  to { top: 0; transition:top linear}\n}\n</code></pre><p>在这个例子中，在keyframes中定义了transition属性，以达到各段曲线都不同的效果。</p><p>接下来，我们就来详细讲讲刚才提到的timing-function，动画的时间曲线。</p><h2>三次贝塞尔曲线</h2><p>我想，你能从很多CSS的资料中都找到了贝塞尔曲线，但是为什么CSS的时间曲线要选用（三次）贝塞尔曲线呢？</p><p>我们在这里首先要了解一下贝塞尔曲线，贝塞尔曲线是一种插值曲线，它描述了两个点之间差值来形成连续的曲线形状的规则。</p><p>一个量（可以是任何矢量或者标量）从一个值到变化到另一个值，如果我们希望它按照一定时间平滑地过渡，就必须要对它进行插值。</p><p>最基本的情况，我们认为这个变化是按照时间均匀进行的，这个时候，我们称其为线性插值。而实际上，线性插值不大能满足我们的需要，因此数学上出现了很多其它的插值算法，其中贝塞尔插值法是非常典型的一种。它根据一些变换中的控制点来决定值与时间的关系。</p><p>贝塞尔曲线是一种被工业生产验证了很多年的曲线，它最大的特点就是“平滑”。时间曲线平滑，意味着较少突兀的变化，这是一般动画设计所追求的。</p><p>贝塞尔曲线用于建筑设计和工业设计都有很多年历史了，它最初的应用是汽车工业用贝塞尔曲线来设计车型。</p><p>K次贝塞尔插值算法需要k+1个控制点，最简单的一次贝塞尔插值就是线性插值，将时间表示为0到1的区间，一次贝塞尔插值公式是：</p><p><img src="https://static001.geekbang.org/resource/image/d7/f8/d7e7c3bcc1e2b2ce72fde79956e872f8.png" alt=""></p><p>“二次贝塞尔插值”有3个控制点，相当于对P0和P1，P1和P2分别做贝塞尔插值，再对结果做一次贝塞尔插值计算</p><p><img src="https://static001.geekbang.org/resource/image/14/84/14d6a5396b7c0cc696c52a9e06e45184.png" alt=""></p><p>“三次贝塞尔插值”则是“两次‘二次贝塞尔插值’的结果，再做一次贝塞尔插值”：</p><p><img src="https://static001.geekbang.org/resource/image/65/b2/65ff1dd9b8e5911f9dd089531acea2b2.png" alt=""></p><p>贝塞尔曲线的定义中带有一个参数t，但是这个t并非真正的时间，实际上贝塞尔曲线的一个点(x, y)，这里的x轴才代表时间。</p><p>这就造成了一个问题，如果我们使用贝塞尔曲线的直接定义，是没办法直接根据时间来计算出数值的，因此，浏览器中一般都采用了数值算法，其中公认做有效的是牛顿积分，我们可以看下JavaScript版本的代码：</p><pre><code class="language-JavaScript">function generate(p1x, p1y, p2x, p2y) {\n    const ZERO_LIMIT = 1e-6;\n    // Calculate the polynomial coefficients,\n    // implicit first and last control points are (0,0) and (1,1).\n    const ax = 3 * p1x - 3 * p2x + 1;\n    const bx = 3 * p2x - 6 * p1x;\n    const cx = 3 * p1x;\n\n    const ay = 3 * p1y - 3 * p2y + 1;\n    const by = 3 * p2y - 6 * p1y;\n    const cy = 3 * p1y;\n\n    function sampleCurveDerivativeX(t) {\n        // `ax t^3 + bx t^2 + cx t\' expanded using Horner \'s rule.\n        return (3 * ax * t + 2 * bx) * t + cx;\n    }\n\n    function sampleCurveX(t) {\n        return ((ax * t + bx) * t + cx ) * t;\n    }\n\n    function sampleCurveY(t) {\n        return ((ay * t + by) * t + cy ) * t;\n    }\n\n    // Given an x value, find a parametric value it came from.\n    function solveCurveX(x) {\n        var t2 = x;\n        var derivative;\n        var x2;\n\n        // https://trac.webkit.org/browser/trunk/Source/WebCore/platform/animation\n        // First try a few iterations of Newton\'s method -- normally very fast.\n        // http://en.wikipedia.org/wiki/Newton\'s_method\n        for (let i = 0; i &lt; 8; i++) {\n            // f(t)-x=0\n            x2 = sampleCurveX(t2) - x;\n            if (Math.abs(x2) &lt; ZERO_LIMIT) {\n                return t2;\n            }\n            derivative = sampleCurveDerivativeX(t2);\n            // == 0, failure\n            /* istanbul ignore if */\n            if (Math.abs(derivative) &lt; ZERO_LIMIT) {\n                break;\n            }\n            t2 -= x2 / derivative;\n        }\n\n        // Fall back to the bisection method for reliability.\n        // bisection\n        // http://en.wikipedia.org/wiki/Bisection_method\n        var t1 = 1;\n        /* istanbul ignore next */\n        var t0 = 0;\n\n        /* istanbul ignore next */\n        t2 = x;\n        /* istanbul ignore next */\n        while (t1 &gt; t0) {\n            x2 = sampleCurveX(t2) - x;\n            if (Math.abs(x2) &lt; ZERO_LIMIT) {\n                return t2;\n            }\n            if (x2 &gt; 0) {\n                t1 = t2;\n            } else {\n                t0 = t2;\n            }\n            t2 = (t1 + t0) / 2;\n        }\n\n        // Failure\n        return t2;\n    }\n\n    function solve(x) {\n        return sampleCurveY(solveCurveX(x));\n    }\n\n    return solve;\n}\n\n</code></pre><p>这段代码其实完全翻译自WebKit的C++代码，牛顿积分的具体原理请参考相关数学著作，注释中也有相关的链接。</p><p>这个JavaScript版本的三次贝塞尔曲线可以用于实现跟CSS一模一样的动画。</p><h2>贝塞尔曲线拟合</h2><p>理论上，贝塞尔曲线可以通过分段的方式拟合任意曲线，但是有一些特殊的曲线，是可以用贝塞尔曲线完美拟合的，比如抛物线。</p><p>这里我做了一个示例，用于模拟抛物线：</p><pre><code class="language-JavaScript">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset="utf-8"&gt;\n  &lt;meta name="viewport" content="width=device-width"&gt;\n  &lt;title&gt;Simulation&lt;/title&gt;\n  &lt;style&gt;\n    .ball {\n      width:10px;\n      height:10px;\n      background-color:black;\n      border-radius:5px;\n      position:absolute;\n      left:0;\n      top:0;\n      transform:translateY(180px);\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;label&gt;运动时间：&lt;input value="3.6" type="number" id="t" /&gt;s&lt;/label&gt;&lt;br/&gt;\n  &lt;label&gt;初速度：&lt;input value="-21" type="number" id="vy" /&gt; px/s&lt;/label&gt;&lt;br/&gt;\n  &lt;label&gt;水平速度：&lt;input value="21" type="number" id="vx" /&gt; px/s&lt;/label&gt;&lt;br/&gt;\n  &lt;label&gt;重力：&lt;input value="10" type="number" id="g" /&gt; px/s²&lt;/label&gt;&lt;br/&gt;\n  &lt;button onclick="createBall()"&gt;来一个球&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class="language-JavaScript">function generateCubicBezier (v, g, t){\n    var a = v / g;\n    var b = t + v / g;\n\n    return [[(a / 3 + (a + b) / 3 - a) / (b - a), (a * a / 3 + a * b * 2 / 3 - a * a) / (b * b - a * a)],\n        [(b / 3 + (a + b) / 3 - a) / (b - a), (b * b / 3 + a * b * 2 / 3 - a * a) / (b * b - a * a)]];\n}\n\nfunction createBall() {\n  var ball = document.createElement("div");\n  var t = Number(document.getElementById("t").value);\n  var vx = Number(document.getElementById("vx").value);\n  var vy = Number(document.getElementById("vy").value);\n  var g = Number(document.getElementById("g").value);\n  ball.className = "ball";\n  document.body.appendChild(ball)\n  ball.style.transition = `left linear ${t}s, top cubic-bezier(${generateCubicBezier(vy, g, t)}) ${t}s`;\n  setTimeout(function(){ \n    ball.style.left = `${vx * t}px`; \n    ball.style.top = `${vy * t + 0.5 * g * t * t}px`; \n  }, 100);\n  setTimeout(function(){ document.body.removeChild(ball); }, t * 1000);\n}\n\n</code></pre><p>这段代码中，我实现了抛物线运动的小球，其中核心代码就是 generateCubicBezier 函数。</p><p>这个公式完全来自于一篇论文，推理过程我也不清楚，但是不论如何，它确实能够用于模拟抛物线。</p><p>实际上，我们日常工作中，如果需要用贝塞尔曲线拟合任何曲线，都可以找到相应的论文，我们只要取它的结论即可。</p><h2>总结</h2><p>我们今天的课程，重点介绍了动画和它背后的一些机制。</p><p>CSS用transition和animation两个属性来实现动画，这两个属性的基本用法很简单，我们今天还介绍了它们背后的原理：贝塞尔曲线。</p><p>我们中介绍了贝塞尔曲线的实现原理和贝塞尔曲线的拟合技巧。</p><p>最后，留给你一个小问题，请纯粹用JavaScript来实现一个transition函数，用它来跟CSS的transition来做一下对比，看看有哪些区别。</p><p></p>',
        article_title:
          "CSS动画与交互：为什么动画要用贝塞尔曲线这么奇怪的东西？",
      },
      {
        title: "HTML语言：DTD到底是什么？",
        herf: "https://time.geekbang.org/column/article/92227",
        id: "92227",
        content:
          '<p>你好，我是winter。今天，我们来聊一聊HTML语言。</p><p>我们平时写HTML语言，都习惯把关注点放到各种标签上，很少去深究它的语法。我想你应该会有模糊的感觉，HTML这样的语言，跟JavaScript这样的语言会有一些本质的不同。</p><p>实际上，JavaScript语言我们把它称为“编程语言”，它最大的特点是图灵完备的，我们大致可以理解为“包含了表达一切逻辑的能力”。像HTML这样的语言，我们称为“标记语言（mark up language）”，它是纯文本的一种升级，“标记”一词的概念来自：编辑审稿时使用不同颜色笔所做的“标记”。</p><p>在上世纪80年代，“富文本”的概念在计算机领域的热门，犹如如今的“AI”和“区块链”，而Tim Berners-Lee当时去设计HTML，也并非是凭空造出来，他使用了当时已有的一种语言：SGML。</p><p>SGML是一种古老的标记语言，可以追溯到1969年IBM公司所使用的技术，SGML十分复杂，严格来说，HTML是SGML中规定的一种格式，但是实际的浏览器没有任何一个是通过SGML引擎来解析HTML的。</p><p>今天的HTML仍然有SGML的不少影子，那么接下来我们就从SGML的一些特性来学习一下HTML。这里我最想讲的是SGML留给HTML的重要的遗产：基本语法和DTD。</p><!-- [[[read_end]]] --><h2>基本语法</h2><p>首先，HTML作为SGML的子集，它遵循SGML的基本语法：包括标签、转义等。</p><p>SGML还规定了一些特殊的节点类型，在我们之前的DOM课程中已经讲过几种节点类型，它们都有与之对应的HTML语法，我们这里复习一下：</p><p><img src="https://static001.geekbang.org/resource/image/b6/bc/b6fdf08dbe47c837e274ff1bb6f630bc.jpg" alt=""></p><p>这里我们从语法的角度，再逐个具体了解一下。</p><h3>标签语法</h3><p>标签语法产生元素，我们从语法的角度讲，就用“标签”这个术语，我们从运行时的角度讲，就用“元素”这个术语。</p><p>HTML中，用于描述一个元素的标签分为开始标签、结束标签和自闭合标签。开始标签和自闭合标签中，又可以有属性。</p><ul>\n<li>开始标签：<code>&lt;tagname&gt;</code>\n<ul>\n<li>带属性的开始标签： <code>&lt;tagname attributename="attributevalue"&gt;</code></li>\n</ul>\n</li>\n<li>结束标签：<code>&lt;/tagname&gt;</code></li>\n<li>自闭合标签：<code>&lt;tagname /&gt;</code></li>\n</ul><p>HTML中开始标签的标签名称只能使用英文字母。</p><p>这里需要重点讲一讲属性语法，属性可以使用单引号、双引号或者完全不用引号，这三种情况下，需要转义的部分都不太一样。</p><p>属性中可以使用文本实体（后文会介绍）来做转义，属性中，一定需要转义的有下面几种。</p><ul>\n<li>无引号属性：<code>&lt;tab&gt;</code> <code>&lt;LF&gt;</code> <code>&lt;FF&gt;</code> <code>&lt;SPACE&gt;</code> <code>&amp;</code>五种字符。</li>\n<li>单引号属性：<code>\'</code> <code>&amp;</code>两种字符。</li>\n<li>双引号属性：<code>"</code> <code>&amp;</code>两种字符。</li>\n</ul><p>一般来说，灵活运用属性的形式，是不太用到文本实体转义的。</p><h3>文本语法</h3><p>在HTML中，规定了两种文本语法，一种是普通的文本节点，另一种是CDATA文本节点。</p><p>文本节点看似是普通的文本，但是，其中有两种字符是必须做转义的：<code>&lt;</code> 和 <code>&amp;</code>。</p><p>如果我们从某处拷贝了一段文本，里面包含了大量的 <code>&lt;</code> 和 <code>&amp;</code>，那么我们就有麻烦了，这时候，就轮到我们的CDATA节点出场了。</p><p>CDATA也是一种文本，它存在的意义是语法上的意义：在CDATA节点内，不需要考虑多数的转义情况。</p><p>CDATA内，只有字符组合<code>]]&gt;</code>需要处理，这里不能使用转义，只能拆成两个CDATA节点。</p><h3>注释语法</h3><p>HTML注释语法以<code>&lt;!--</code>开头，以<code>--&gt;</code>结尾，注释的内容非常自由，除了<code>--&gt;</code>都没有问题。</p><p>如果注释的内容一定要出现 <code>--&gt;</code>，我们可以拆成多个注释节点。</p><h3>DTD语法（文档类型定义）</h3><p>SGML的DTD语法十分复杂，但是对HTML来说，其实DTD的选项是有限的，浏览器在解析DTD时，把它当做几种字符串之一，关于DTD，我在本篇文章的后面会详细讲解。</p><h3>ProcessingInstruction语法（处理信息）</h3><p>ProcessingInstruction多数情况下，是给机器看的。HTML中规定了可以有ProcessingInstruction，但是并没有规定它的具体内容，所以可以把它视为一种保留的扩展机制。对浏览器而言，ProcessingInstruction 的作用类似于注释。</p><p>ProcessingInstruction 包含两个部分，紧挨着第一个问号后，空格前的部分被称为“目标”，这个目标一般表示处理 ProcessingInstruction 的程序名。</p><p>剩余部分是它的文本信息，没有任何格式上的约定，完全由文档编写者和处理程序的编写者约定。</p><h2>DTD</h2><p>现在我们来讲一下DTD，DTD的全称是Document Type Defination，也就是文档类型定义。SGML用DTD来定义每一种文档类型，HTML属于SGML，在HTML5出现之前，HTML都是使用符合SGML规定的DTD。</p><p>如果你是一个上个时代走过来的前端，一定还记得HTML4.01有三种DTD。分别是严格模式、过渡模式和frameset模式。</p><pre><code class="language-html">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;\n</code></pre><p>严格模式的DTD规定了HTML4.01中需要的标签。</p><pre><code class="language-html">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"&gt;\n</code></pre><p>过渡模式的DTD除了html4.01，还包含了一些被贬斥的标签，这些标签已经不再推荐使用了，但是过渡模式中仍保留了它们。</p><pre><code class="language-html">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd"&gt;\n</code></pre><p>frameset结构的网页如今已经很少见到了，它使用frameset标签把几个网页组合到一起。</p><p>众所周知，HTML中允许一些标签不闭合的用法，实际上这些都是符合SGML规定的，并且在DTD中规定好了的。但是，一些程序员喜欢严格遵守XML语法，保证标签闭合性，所以，HTML4.01又规定了XHTML语法，同样有三个版本：</p><p>版本一</p><pre><code class="language-html">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" \n"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;\n</code></pre><p>版本二</p><pre><code class="language-html">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "\nhttp://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;\n</code></pre><p>版本三</p><pre><code class="language-html">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" \n"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd"&gt;\n</code></pre><p>其实你看看就知道，这些复杂的DTD写法并没有什么实际作用（浏览器根本不会用SGML引擎解析它们），因此，到了HTML5，干脆放弃了SGML子集这项坚持，规定了一个简单的，大家都能记住的DTD：</p><pre><code class="language-html">&lt;!DOCTYPE html&gt;\n</code></pre><p>但是，HTML5仍然保留了HTML语法和XHTML语法。</p><h2>文本实体</h2><p>不知道你注意到没有，HTML4.01的DTD里包含了一个长得很像是URL的东西，其实它是真的可以访问的——但是W3C警告说，禁止任何浏览器在解析网页的时候访问这个URL，不然W3C的服务器会被压垮。我相信很多好奇的前端工程师都把它下载下来打开过。</p><p>这是符合SGML规范的DTD，我们前面讲过，SGML的规范十分复杂，所以这里我并不打算讲SGML（其实我也不会），但是这不妨碍我们了解一下DTD的内容。这个DTD规定了HTML包含了哪些标签、属性和文本实体。其中文本实体分布在三个文件中：HTMLsymbol.ent HTMLspecial.ent和HTMLlat1.ent。</p><p>所谓文本实体定义就是类似以下的代码：</p><pre><code class="language-HTML">&amp;lt;\n&amp;nbsp;\n&amp;gt;\n&amp;amp;\n</code></pre><p>每一个文本实体由<code>&amp;</code>开头，由<code>;</code>结束，这属于基本语法的规定，文本实体可以用<code>#</code>后跟一个十进制数字，表示字符Unicode值。除此之外这两个符号之间的内容，则由DTD决定。</p><p>我这里数了一下，HTML4.01的DTD中，共规定了255个文本实体，找出这些实体和它们对应的Unicode编码，就作为本次课程的课后小问题吧。</p><h2>总结</h2><p>今天的课程中我们讲了HTML的语法，HTML语法源自SGML，我们首先介绍了基本语法，包含了五种节点：标签（元素）、文本、注释、文档类型定义（DTD）和处理信息（ProcessingInstruction）。</p><p>之后我们又重点介绍了两部分内容：DTD和文本实体。</p><p>DTD在HTML4.01和之前都非常的复杂，到了HTML5，抛弃了SGML兼容，变成简单的<code>&lt;!DOCTYPE html&gt;</code>。</p><p>文本实体是HTML转义的重要手段，我们讲解了基本用法，HTML4.01中规定的部分，就留给大家作为课后问题了。</p><p>今天的课后问题是：HTML4.01的DTD中，共规定了255个文本实体，请你找出这些实体和它们对应的Unicode编码吧。</p><p></p>',
        article_title: "HTML语言：DTD到底是什么？",
      },
      {
        title: "CSS渲染：CSS是如何绘制颜色的？",
        herf: "https://time.geekbang.org/column/article/92663",
        id: "92663",
        content:
          '<p>你好，我是winter，今天我们来学习一下CSS的渲染相关的属性。</p><p>我们在布局篇讲到，CSS的一些属性决定了盒的位置，那么今天我讲到的属性就决定了盒如何被渲染。</p><p>按照惯例，还是先从简单得讲起，首先我们来讲讲颜色。</p><h2>颜色的原理</h2><p>首先我们来讲讲颜色，最常见的颜色相关的属性就是 <code>color</code> 和 <code>background-color</code>。</p><p>这两个属性没什么好讲的，它们分别表示文字颜色和背景颜色，我们这里重点讲讲颜色值。</p><h3>RGB颜色</h3><p>我们在计算机中，最常见的颜色表示法是RGB颜色，<strong>它符合光谱三原色理论：红、绿、蓝三种颜色的光可以构成所有的颜色。</strong></p><p><img src="https://static001.geekbang.org/resource/image/7f/a1/7f5bf39cbe44e36758683a674f9fcfa1.png" alt=""></p><p>为什么是这三种颜色呢？这跟人类的视神经系统相关，人类的视觉神经分别有对红、绿、蓝三种颜色敏感的类型。</p><p>顺便提一下，人类对红色的感觉最为敏感，所以危险信号提示一般会选择红色；而红绿色盲的人，就是红和绿两种神经缺失一种。其它的动物视觉跟人可能不太一样，比如皮皮虾拥有16种视锥细胞，所以我猜它们看到的世界一定特别精彩。</p><p>现代计算机中多用 0 - 255 的数字表示每一种颜色，这正好占据了一个字节，每一个颜色就占据三个字节。</p><p>这个数字远远超过了人体的分辨能力，因此，上世纪90年代刚推出这样的颜色系统的时候，它被称作真彩色。早年间还有更节约空间，但是精度更低的16色、256色、8位色和16位色表示法。</p><!-- [[[read_end]]] --><p>红绿蓝三种颜色的光混合起来就是白光，没有光就是黑暗，所以在RGB表示法中，三色数值最大表示白色，三色数值为0表示黑色。</p><h3>CMYK颜色</h3><p>如果你上过小学美术课，应该听过“红黄蓝”三原色的说法，这好像跟我们说的不太一样。实际上是这样的，颜料显示颜色的原理是它吸收了所有别的颜色的光，只反射一种颜色，所以颜料三原色其实是红、绿、蓝的补色，也就是：品红、黄、青。因为它们跟红、黄、蓝相近，所以有了这样的说法。</p><p><img src="https://static001.geekbang.org/resource/image/15/1b/15fefe9f80ec8e1f7bd9ecd223feb61b.png" alt=""></p><p>在印刷行业，使用的就是这样的三原色（品红、黄、青）来调配油墨，这种颜色的表示法叫做CMYK，它用一个四元组来表示颜色。</p><p>你一定会好奇，为什么它比三原色多了一种，其实答案并不复杂，在印刷行业中，黑色颜料价格最低，而品红、黄、青颜料价格较贵，如果要用三原色调配黑色，经济上是不划算的，所以印刷时会单独指定黑色。</p><p>对CMYK颜色表示法来说，同一种颜色会有多种表示方案，但是我们参考印刷行业的习惯，会尽量优先使用黑色。</p><h3>HSL颜色</h3><p>好了，讲了这么多，其实还没有涉及今天的主角：HSL颜色。接下来我们就讲一讲。</p><p>我们刚才讲的颜色是从人类的视觉原理建模，应该说是十分科学了。但是，人类对颜色的认识却并非来自自己的神经系统，当我们把阳光散射，可以得到七色光：红橙黄绿蓝靛紫，实际上，阳光接近白光，它包含了各种颜色的光，它散射之后，应该是个基本连续的。这说明对人的感知来说，颜色远远大于红、绿、蓝。</p><p>因此，HSL这样的颜色模型被设计出来了，它用一个值来表示人类认知中的颜色，我们用专业的术语叫做色相（H）。加上颜色的纯度（S）和明度（L），就构成了一种颜色的表示。</p><p><img src="https://static001.geekbang.org/resource/image/a3/ce/a3016a6ff178870d6dba23f807b0dfce.png" alt=""></p><p>在这里，我需要特别推荐HSL颜色，因为它是一种语义化的颜色。当我们对一张图片改变色相时，人们感知到的是“图片的颜色变了”。这里先容我卖个关子，具体的例子待我们讲完了渐变再看。</p><h3>其它颜色</h3><p>接下来我们讲一讲RGBA，RGBA是代表Red（红色）、Green（绿色）、Blue（蓝色）和Alpha的色彩空间。RGBA颜色被用来表示带透明度的颜色，实际上，Alpha通道类似一种颜色值的保留字。在CSS中，Alpha通道被用于透明度，所以我们的颜色表示被称作 RGBA，而不是RGBO（Opacity）。</p><p>为了方便使用，CSS还规定了名称型的颜色，它内置了大量（140种）的颜色名称。不过这里我要挑出两个颜色来讲一讲：金（gold）和银（silver）。</p><p>如果你使用过这两个颜色，你会发现，金（gold）和银（silver）的视觉表现跟我们想象中的金色和银色相差甚远。与其被叫做金色和银色，它们看起来更像是难看的暗黄色和浅灰色。</p><p>为什么会这样呢？在人类天然的色彩认知中，实际上混杂了很多其它因素，金色和银色不仅仅是一种颜色，它还意味着一定的镜面反光程度，在同样的光照条件下，金属会呈现出更亮的色彩，这并非是用一个色值可以描述的，这就引出了我们接下来要讲的渐变。</p><h2>渐变</h2><p>在CSS中，<code>background-image</code>这样的属性，可以设为渐变。CSS中支持两种渐变，一种是线性渐变，一种是放射性渐变，我们先了解一下它们的基本用法：</p><p>线性渐变的写法是：</p><pre><code>linear-gradient(direction, color-stop1, color-stop2, ...);\n</code></pre><p>这里的direction可以是方向，也可以是具体的角度。例如：</p><ul>\n<li>to bottom</li>\n<li>to top</li>\n<li>to left</li>\n<li>to right</li>\n<li>to bottom left</li>\n<li>to bottom right</li>\n<li>to top left</li>\n<li>to top right</li>\n<li>120deg</li>\n<li>3.14rad</li>\n</ul><p>以上这些都是合理的方向取值。</p><p>color-stop是一个颜色和一个区段，例如：</p><ul>\n<li>rgba(255,0,0,0)</li>\n<li>orange</li>\n<li>yellow 10%</li>\n<li>green 20%</li>\n<li>lime 28px</li>\n</ul><p>我们组合一下，产生一个“真正的金色”的背景：</p><pre><code class="language-HTML">&lt;style&gt;\n#grad1 {\n    height: 200px;\n    background: linear-gradient(45deg, gold 10%, yellow 50%, gold 90%); \n}\n&lt;/style&gt;\n&lt;div id="grad1"&gt;&lt;/div&gt;\n</code></pre><p>放射性渐变需要一个中心点和若干个颜色：</p><pre><code>radial-gradient(shape size at position, start-color, ..., last-color);\n</code></pre><p>当我们应用的每一种颜色都是HSL颜色时，就产生了一些非常有趣的效果，比如，我们可以通过变量来调整一个按钮的风格：</p><pre><code class="language-HTML">&lt;style&gt;\n.button {\n    display: inline-block;\n    outline: none;\n    cursor: pointer;\n    text-align: center;\n    text-decoration: none;\n    font: 14px/100% Arial, Helvetica, sans-serif;\n    padding: .5em 2em .55em;\n    text-shadow: 0 1px 1px rgba(0,0,0,.3);\n    border-radius: .5em;\n    box-shadow: 0 1px 2px rgba(0,0,0,.2);\n    color: white;\n    border: solid 1px ;\n}\n\n&lt;/style&gt;\n&lt;div class="button orange"&gt;123&lt;/div&gt;\n\n</code></pre><pre><code class="language-JavaScript">var btn = document.querySelector(".button");\nvar h = 25;\nsetInterval(function(){\n  h ++;\n  h = h % 360;\n  btn.style.borderColor=`hsl(${h}, 95%, 45%)`\n  btn.style.background=`linear-gradient(to bottom,  hsl(${h},95%,54.1%),  hsl(${h},95%,84.1%))`\n},100);\n</code></pre><h2>形状</h2><p>CSS中的很多属性还会产生形状，比如我们常见的属性：</p><ul>\n<li>border</li>\n<li>box-shadow</li>\n<li>border-radius</li>\n</ul><p>这些产生形状的属性非常有趣，我们也能看到很多利用它们来产生的CSS黑魔法。然而，这里我有一个相反的建议，我们仅仅把它们用于基本的用途，把border用于边框、把阴影用于阴影，把圆角用于圆角，所有其它的场景，都有一个更好的替代品：datauri+svg。</p><h2>总结</h2><p>今天我们介绍了CSS中渲染相关的属性：颜色和形状。</p><p>我们重点介绍了CSS的颜色系统，从颜色基本原理讲解了RGB颜色、CMYK颜色和HSV颜色，我们还讲解了Alpha通道。</p><p>接下来我们又讲了颜色的一个重要应用：渐变，我们可以把渐变看作是一个更复杂的颜色，它非常实用，能够用渐变绘制很多的图像。</p><p>最后我们讲解了形状相关的属性，以及SVG应用的一个小技巧。</p><h3>思考题</h3><p><img src="https://static001.geekbang.org/resource/image/0f/ac/0f6f4cc6d564df9986e0108cb8a427ac.jpg" alt=""></p><p>折衷鹦鹉是一种可爱的鸟类，但是雄性折衷鹦鹉居然是跟雌性颜色不一样！你能用JavaScript和canvas，把这只雄性折衷鹦鹉变成跟雌性一样可爱的红色吗？</p><p></p>',
        article_title: "CSS渲染：CSS是如何绘制颜色的？",
      },
      {
        title: "CSS小实验：动手做，用代码挖掘CSS属性",
        herf: "https://time.geekbang.org/column/article/93110",
        id: "93110",
        content:
          '<p>你好，我是winter。</p><p>我们的课程中已经讲解了一部分CSS属性，但是CSS属性数量繁多，我们的课程只能覆盖其中一小部分，所以我设计了这个小实验，教你用代码挖掘W3C标准中的属性。</p><h2>浏览器中已经实现的属性</h2><p>首先我们来看看浏览器中实现了哪些属性。我们用一段代码来看一下。</p><pre><code class="language-JavaScript">Object.keys(document.body.style).filter(e =&gt; !e.match(/^webkit/))\n</code></pre><p>这段代码思路非常简单，就是枚举document.body.style上的所有属性，并且去掉webkit前缀的私有属性。</p><p>在我的Chrome中，得到了这样一组属性：</p><pre><code>alignContent, alignItems, alignSelf, alignmentBaseline, all, animation, animationDelay, animationDirection, animationDuration, animationFillMode, animationIterationCount, animationName, animationPlayState, animationTimingFunction, backfaceVisibility, background, backgroundAttachment, backgroundBlendMode, backgroundClip, backgroundColor, backgroundImage, backgroundOrigin, backgroundPosition, backgroundPositionX, backgroundPositionY, backgroundRepeat, backgroundRepeatX, backgroundRepeatY, backgroundSize, baselineShift, blockSize, border, borderBlockEnd, borderBlockEndColor, borderBlockEndStyle, borderBlockEndWidth, borderBlockStart, borderBlockStartColor, borderBlockStartStyle, borderBlockStartWidth, borderBottom, borderBottomColor, borderBottomLeftRadius, borderBottomRightRadius, borderBottomStyle, borderBottomWidth, borderCollapse, borderColor, borderImage, borderImageOutset, borderImageRepeat, borderImageSlice, borderImageSource, borderImageWidth, borderInlineEnd, borderInlineEndColor, borderInlineEndStyle, borderInlineEndWidth, borderInlineStart, borderInlineStartColor, borderInlineStartStyle, borderInlineStartWidth, borderLeft, borderLeftColor, borderLeftStyle, borderLeftWidth, borderRadius, borderRight, borderRightColor, borderRightStyle, borderRightWidth, borderSpacing, borderStyle, borderTop, borderTopColor, borderTopLeftRadius, borderTopRightRadius, borderTopStyle, borderTopWidth, borderWidth, bottom, boxShadow, boxSizing, breakAfter, breakBefore, breakInside, bufferedRendering, captionSide, caretColor, clear, clip, clipPath, clipRule, color, colorInterpolation, colorInterpolationFilters, colorRendering, columnCount, columnFill, columnGap, columnRule, columnRuleColor, columnRuleStyle, columnRuleWidth, columnSpan, columnWidth, columns, contain, content, counterIncrement, counterReset, cursor, cx, cy, d, direction, display, dominantBaseline, emptyCells, fill, fillOpacity, fillRule, filter, flex, flexBasis, flexDirection, flexFlow, flexGrow, flexShrink, flexWrap, float, floodColor, floodOpacity, font, fontDisplay, fontFamily, fontFeatureSettings, fontKerning, fontSize, fontStretch, fontStyle, fontVariant, fontVariantCaps, fontVariantEastAsian, fontVariantLigatures, fontVariantNumeric, fontVariationSettings, fontWeight, gap, grid, gridArea, gridAutoColumns, gridAutoFlow, gridAutoRows, gridColumn, gridColumnEnd, gridColumnGap, gridColumnStart, gridGap, gridRow, gridRowEnd, gridRowGap, gridRowStart, gridTemplate, gridTemplateAreas, gridTemplateColumns, gridTemplateRows, height, hyphens, imageRendering, inlineSize, isolation, justifyContent, justifyItems, justifySelf, left, letterSpacing, lightingColor, lineBreak, lineHeight, listStyle, listStyleImage, listStylePosition, listStyleType, margin, marginBlockEnd, marginBlockStart, marginBottom, marginInlineEnd, marginInlineStart, marginLeft, marginRight, marginTop, marker, markerEnd, markerMid, markerStart, mask, maskType, maxBlockSize, maxHeight, maxInlineSize, maxWidth, maxZoom, minBlockSize, minHeight, minInlineSize, minWidth, minZoom, mixBlendMode, objectFit, objectPosition, offset, offsetDistance, offsetPath, offsetRotate, opacity, order, orientation, orphans, outline, outlineColor, outlineOffset, outlineStyle, outlineWidth, overflow, overflowAnchor, overflowWrap, overflowX, overflowY, overscrollBehavior, overscrollBehaviorX, overscrollBehaviorY, padding, paddingBlockEnd, paddingBlockStart, paddingBottom, paddingInlineEnd, paddingInlineStart, paddingLeft, paddingRight, paddingTop, page, pageBreakAfter, pageBreakBefore, pageBreakInside, paintOrder, perspective, perspectiveOrigin, placeContent, placeItems, placeSelf, pointerEvents, position, quotes, r, resize, right, rowGap, rx, ry, scrollBehavior, scrollMargin, scrollMarginBlock, scrollMarginBlockEnd, scrollMarginBlockStart, scrollMarginBottom, scrollMarginInline, scrollMarginInlineEnd, scrollMarginInlineStart, scrollMarginLeft, scrollMarginRight, scrollMarginTop, scrollPadding, scrollPaddingBlock, scrollPaddingBlockEnd, scrollPaddingBlockStart, scrollPaddingBottom, scrollPaddingInline, scrollPaddingInlineEnd, scrollPaddingInlineStart, scrollPaddingLeft, scrollPaddingRight, scrollPaddingTop, scrollSnapAlign, scrollSnapStop, scrollSnapType, shapeImageThreshold, shapeMargin, shapeOutside, shapeRendering, size, speak, src, stopColor, stopOpacity, stroke, strokeDasharray, strokeDashoffset, strokeLinecap, strokeLinejoin, strokeMiterlimit, strokeOpacity, strokeWidth, tabSize, tableLayout, textAlign, textAlignLast, textAnchor, textCombineUpright, textDecoration, textDecorationColor, textDecorationLine, textDecorationSkipInk, textDecorationStyle, textIndent, textOrientation, textOverflow, textRendering, textShadow, textSizeAdjust, textTransform, textUnderlinePosition, top, touchAction, transform, transformBox, transformOrigin, transformStyle, transition, transitionDelay, transitionDuration, transitionProperty, transitionTimingFunction, unicodeBidi, unicodeRange, userSelect, userZoom, vectorEffect, verticalAlign, visibility, whiteSpace, widows, width, willChange, wordBreak, wordSpacing, wordWrap, writingMode, x, y, zIndex, zoom\n</code></pre><p>数了一下，这里有390个属性，这非常壮观了，要想了解它们可不是一件容易的事情。接下来我们试着找到它们背后对应的标准。</p><h2>小实验：找出W3C标准中的CSS属性</h2><p>我们知道CSS2.1是一份标准，但是CSS3分布在无数标准中，我们需要用代码把它们整理出来，这就是我们今天的小实验内容了。</p><p>为了达到我们的目的，我们需要写一个简单的爬虫，来找一找W3C标准中都覆盖了哪些属性。</p><p><strong>我们这个爬虫的思路是：用iframe来加载所有标准的网页，然后用JavaScript找出它们中间定义的属性。</strong></p><!-- [[[read_end]]] --><h3>第一步：找到CSS相关的标准。</h3><p>我们来到W3C的TR页面：</p><ul>\n<li><a href="https://www.w3.org/TR/?tag=css">https://www.w3.org/TR/?tag=css</a></li>\n</ul><p>我们必须从这个页面里抓取所有的标准名称和链接，打开它的代码，我们会发现它是有规律的，这个页面由一个巨大的列表构成，我们只需要根据tag选取需要的标准即可。</p><pre><code class="language-JavaScript">document.querySelectorAll("#container li[data-tag~=css] h2:not(.Retired):not(.GroupNote)")\n</code></pre><p>这段代码可以找到所有CSS相关的标准，我们用代码把从HTML结构中把它们抽取出来。可以得到一个列表。<br>\n（图片较大，请等待加载。）</p><p><img src="https://static001.geekbang.org/resource/image/3b/be/3bc9ec8fad753e4a7af9db27bb1e25be.png" alt=""></p><h3>第二步：分析每个标准中的CSS属性</h3><p>得到了这个标准的列表，下一步我们就是分析每个标准中的CSS属性。</p><p>我们打开第一个标准，试着找出属性定义：</p><ul>\n<li><a href="https://www.w3.org/TR/2019/WD-css-lists-3-20190425/">https://www.w3.org/TR/2019/WD-css-lists-3-20190425/</a></li>\n</ul><p>经过分析，我们会发现，属性总是在一个具有propdef的容器中，有属性data-dfn-type值为property。</p><p>这里我不得不感慨，W3C的标准写得真的是十分严谨，这给我们带来了很大的方便。我们用以下代码获取属性：</p><pre><code class="language-JavaScript">document.querySelectorAll(".propdef [data-dfn-type=property]")\n</code></pre><p>对于第一个标准 CSS  Lists  Module  Level 3 得到了这个列表：</p><pre><code>list-style-image\nlist-style-type\nlist-style-position\nlist-style\nmarker-side\ncounter-reset\ncounter-set\ncounter-increment\n</code></pre><p>好了，接下来，我们来用iframe打开这些标准，并且用我们分析好的规则，来找出里面的属性就可以了。最终成品代码如下：</p><pre><code class="language-JavaScript">\nvar iframe = document.createElement("iframe");\n\ndocument.body.appendChild(iframe);\n\niframe.src = "https://www.w3.org/TR/2019/WD-css-lists-3-20190425/"\n\nfunction happen(element, type){\n  return new Promise(resolve =&gt; {\n    element.addEventListener(type, resolve, {once: true})\n  })\n}\n\nhappen(iframe, "load").then(function(){\n  //Array.prototype.map.call(document.querySelectorAll("#container li[data-tag~=css] h2"), e=&gt; e.children[0].href + " |\\t" + e.children[0].textContent).join("\\n")\n  console.log(iframe.contentWindow);\n})\nasync function start(){\n  var output = []\n  for(let standard of  Array.prototype.slice.call(document.querySelectorAll("#container li[data-tag~=css] h2:not(.Retired):not(.GroupNote)"))) {\n    console.log(standard.children[0].href);\n    iframe.src = standard.children[0].href;\n    await happen(iframe, "load");\n    var properties = Array.prototype.map.call(iframe.contentWindow.document.querySelectorAll(".propdef [data-dfn-type=property]"), e =&gt; e.childNodes[0].textContent);\n    if(properties.length)\n        output.push(standard.children[0].textContent + " | " + properties.join(", "));\n  }\n  console.log(output.join("\\n"))\n}\nstart();\n</code></pre><p>这样，我们就得到了每个属性属于哪个标准，我们来看看最终结果。我把它整理成了一个列表。</p><p>（图片较大，请等待加载。）<br>\n<img src="https://static001.geekbang.org/resource/image/ab/71/ab03527b7b40b594bb55f6bfd523d271.jpg" alt=""></p><p>至此，我们已经找出了标准中讲解的所有属性。</p><h2>结语</h2><p>今天的这节课我们通过代码对标准做了分析，找出了属性和标准的对应关系。</p><p>我们的第一步是找到所有的标准列表，第二步是找到每个标准中的属性。最后得到的这个列表比较全面地覆盖了CSS属性，并根据标准划分好了分类，我觉得这可以作为你后续学习和精研的重要依据。</p><p>我在本篇内容的前面还有一份浏览器中已经实现的属性列表，理论上属性列表中的属性应该都出现在了我们的标准中。</p><p>那么，这次课后的小任务，就是找出被我们的代码遗漏的属性，和重复出现在多份标准中的属性，让我们的列表更为完善。</p><p></p>',
        article_title: "CSS小实验：动手做，用代码挖掘CSS属性",
      },
      {
        title: "HTML·ARIA：可访问性是只给盲人用的特性么？",
        herf: "https://time.geekbang.org/column/article/93777",
        id: "93777",
        content:
          '<p>你好，我是winter。</p><p>我们都知道，HTML已经是一个完整的语义系统。在前面的课程中，我们围绕着HTML本身做了讲解，但是在实际应用中，我们还会用到一些它的扩展。今天我们要讲的ARIA就是其中重要的一部分。</p><p>ARIA全称为Accessible Rich Internet Applications，它表现为一组属性，是用于可访问性的一份标准。关于可访问性，它被提到最多的，就是它可以为视觉障碍用户服务，但是，这是一个误解。</p><p>实际上，可访问性其实是一个相当大的课题，它的定义包含了各种设备访问、各种环境、各种人群访问的友好性。不单单是永久性的残障人士需要用到可访问性，健康的人也可能在特定时刻处于需要可访问性的环境。</p><p>我们今天讲的ARIA，是以交互形式来标注各种元素的一类属性，所以，在ARIA属性中，你可以看到很多熟悉的面孔，交互形式往往跟我们直觉中的“控件”非常相似。</p><p>所以我们的课程，特意把ARIA加入还有一个原因：ARIA的角色对于我们UI系统的设计有重要的参考意义。</p><h2>综述</h2><p>我们先整体来看看，ARIA给HTML元素添加的一个核心属性就是role，我们来看一个例子：</p><pre><code class="language-HTML">&lt;span role="checkbox" aria-checked="false" tabindex="0" aria-labelledby="chk1-label"&gt;\n&lt;/span&gt; &lt;label id="chk1-label"&gt;Remember my preferences&lt;/label&gt;\n</code></pre><!-- [[[read_end]]] --><p>这里我们给一个span添加了checkbox角色，这样，表示我们这个span被用于checkbox，这意味着，我们可能已经用JS代码绑定了这个span的click事件，并且以checkbox的交互方式来处理用户操作。</p><p>同时，ARIA系统还提供了一系列ARIA属性给checkbox这个role，这意味着，<strong>我们可以通过HTML属性变化来理解这个JavaScript组件的状态</strong>，读屏软件等三方客户端，就可以理解我们的UI变化，这正是ARIA标准的意义。</p><p>role的定义是一个树形的继承关系，我们先来理解一下它的整体结构：</p><p><img src="https://static001.geekbang.org/resource/image/ae/69/aeccf64871b309735054912fbbb18a69.jpg" alt=""></p><p>其中，widget表示一些可交互的组件，structure表示文档中的结构，window则代表窗体。</p><p>接下来，让我们分类了解一下重要的ARIA角色。</p><h2>Widget角色</h2><p>我们刚刚已经讲过一个widget role，就是checkbox。</p><p>这一类角色跟我们桌面开发中的控件类似，它表示一个可交互的组件，它们有：</p><p><img src="https://static001.geekbang.org/resource/image/10/dd/10ea9eb62d60fb4bfb18c27da50836dd.jpg" alt=""></p><p>我们这里按照继承关系给出一份列表和简要说明：</p><p><img src="https://static001.geekbang.org/resource/image/03/f1/038e1152c9bddc7ed864d271691d17f1.jpeg" alt=""></p><p>ARIA role允许多继承，这里有些角色我没有重复写。</p><p>注意，这些role可以出现在任何一个HTML元素之上，同时要注意，这些ARIA属性，不会真实地改变任何一个元素的行为，比如，我们刚才讲的checkbox，即使我们给一个span添加了Checkbox角色，我们也需要用JavaScript编写相应的逻辑。</p><p>这些widget同时还会带来对应的ARIA属性，比如，我们的Checkbox角色，会带来两个属性：</p><ul>\n<li>aria-checked 表示复选框是否已经被选中；</li>\n<li>aria-labelledby 表示复选框对应的文字。</li>\n</ul><p>而Button角色，则会带来另外两个属性：</p><ul>\n<li>aria-pressed 按钮是否已经被按下；</li>\n<li>aria-expanded 按钮控制的目标是否已经被展开。</li>\n</ul><p>除了它们本身的属性之外，可交互组件还有继承来的属性，比如，switch角色继承了checkbox，因此，它也可以使用aria-checked属性。</p><p>在WAI-ARIA标准中，你可以找到所有的角色和对应的属性，我们这里就不一一列举了。</p><ul>\n<li><a href="https://www.w3.org/TR/wai-aria/">https://www.w3.org/TR/wai-aria/</a></li>\n</ul><p>很多这些ARIA属性都是需要在JavaScript中维护的。</p><p>如果我们要实现一份组件库，这些widget role和它们对应的aria属性是非常好的参考。</p><p>如果你是组件的实现者，也希望你在实现组件时把对应的ARIA属性自动维护好。</p><p>除了简单的widget，还有一些比较复杂的角色，需要多个角色一起配合。我们来逐个了解一下。</p><p>Combobox 是一个带选项的输入框，我们常见的搜索引擎，一般都会提供这样的输入框，当输入时，它会提供若干提示选项。</p><p>Grid 是一个表格，它会分成行、列，行列又有行头和列头表示行、列的意义。</p><p>Tablist 是一个可切换的结构，一般被称为选项卡，它包含了tab头和tabpanel，在tab容器中，可能包含各种组件。</p><p>Listbox 是一个可选中的列表，它内部具有角色为Option的选项。</p><p>Menu 是指菜单，菜单中可以加入嵌套的菜单项（Menuitem角色），除了普通菜单项，还可以有Menuitemcheckbox 带复选框的菜单栏和Menuitemradio 带单选框的菜单栏。</p><p>Radiogroup 是一组互斥的单选框的容器，它的内部可以由若干个角色为radio的单选框。</p><p>Tree 是树形控件，它的内部含有 Treeitem 树形控件项，它还有一种升级形式是Treegrid。</p><h2>structure角色</h2><p>结构角色其实跟HTML5中不少新标签作用重合了，这里建议优先使用HTML5标签。</p><p>这部分角色的作用类似于语义化标签，但是内容稍微有些不同，我们这里就不详细讲解了，仅仅给出一张图供你参考：</p><p><img src="https://static001.geekbang.org/resource/image/b2/7a/b21a82fd68a885f751123f48a7e26b7a.jpg" alt=""></p><p>注：separator在允许焦点时属于组件，在不允许焦点时属于文档结构。</p><p>这里我们需要特别提出Landmark角色这个概念，Landmark角色直接翻译是地标，它是ARIA标准中总结的Web网页中最常见的8个结构，Landmark角色实际上是section的子类，这些角色在生成页面摘要时有很大可能性需要被保留，它们是：</p><p><img src="https://static001.geekbang.org/resource/image/9a/75/9aee7029d4bf684a8679a6776d6e9075.jpg" alt=""></p><h2>window角色</h2><p>在我们的网页中，有些元素表示“新窗口”，这时候，会用到window角色。window系角色非常少，只有三个角色：</p><ul>\n<li>window\n<ul>\n<li>dialog\n<ul>\n<li>alertdialog</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><p>dialog可能会产生“焦点陷阱”，也就是说，当这样的角色被激活时，焦点无法离开这个区域。</p><h2>总结</h2><p>今天我介绍了ARIA相关的知识，我们分几个部分学习了如何使用ARIA属性来提高页面的可访问性。</p><p>我们以ARIA角色为中心，讲解了ARIA定义的语义体系。我们可以把ARIA分为三类。</p><ul>\n<li>Widget角色：主要是各种可交互的控件。</li>\n<li>结构角色：文档的结构。</li>\n<li>窗体角色：弹出的窗体。</li>\n</ul><p>今天的课后小问题是，请找一个支持图结构可视化的JS库，把所有ARIA的继承关系用可视化的方式展现出来。</p><p></p>',
        article_title: "HTML·ARIA：可访问性是只给盲人用的特性么？",
      },
    ],
  },
  {
    chapterTitle: "模块三：浏览器实现原理与API (9讲)",
    children: [
      {
        title: "浏览器：一个浏览器是如何工作的？（阶段一）",
        herf: "https://time.geekbang.org/column/article/80240",
        id: "80240",
        content:
          '<p>对于前端开发来说，我们平时与浏览器打交道的时间是最多的。可浏览器对前端同学来说更多像一个神秘黑盒子的存在。我们仅仅知道它能做什么，而不知道它是如何做到的。</p><p>在我面试和接触过的前端开发者中，70%的前端同学对这部分的知识内容只能达到“一知半解”的程度。甚至还有一部分同学会质疑这部分知识是否重要：这与我们的工作相关吗，学多了会不会偏移前端工作的方向？</p><p>事实上，我们这里所需要了解的浏览器工作原理只是它的大致过程，这部分浏览器工作原理不但是前端面试的常考知识点，它还会辅助你的实际工作，学习浏览器的内部工作原理和个中缘由，对于我们做性能优化、排查错误都有很大的好处。</p><p>在我们的课程中，我也会控制浏览器相关知识的粒度，把它保持在“给前端工程师了解浏览器”的水准，而不是详细到“给浏览器开发工程师实现浏览器”的水准。</p><p>那么，我们今天开始，来共同思考一下。一个浏览器到底是如何工作的。</p><p>实际上，对浏览器的实现者来说，他们做的事情，就是把一个URL变成一个屏幕上显示的网页。</p><p>这个过程是这样的：</p><ol>\n<li>浏览器首先使用HTTP协议或者HTTPS协议，向服务端请求页面；</li>\n<li>把请求回来的HTML代码经过解析，构建成DOM树；</li>\n<li>计算DOM树上的CSS属性；</li>\n<li>最后根据CSS属性对元素逐个进行渲染，得到内存中的位图；</li>\n<li>一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度；</li>\n<li>合成之后，再绘制到界面上。</li>\n</ol><!-- [[[read_end]]] --><p><img src="https://static001.geekbang.org/resource/image/63/4c/6391573a276c47a9a50ae0cbd2c5844c.jpg" alt=""></p><p>我们在开始详细介绍之前，要建立一个感性认识。我们从HTTP请求回来开始，这个过程并非一般想象中的一步做完再做下一步，而是一条流水线。</p><p>从HTTP请求回来，就产生了流式的数据，后续的DOM树构建、CSS计算、渲染、合成、绘制，都是尽可能地流式处理前一步的产出：即不需要等到上一步骤完全结束，就开始处理上一步的输出，这样我们在浏览网页时，才会看到逐步出现的页面。</p><p>首先我们来介绍下网络通讯的部分。</p><h2>HTTP协议</h2><p>浏览器首先要做的事就是根据URL把数据取回来，取回数据使用的是HTTP协议，实际上这个过程之前还有DNS查询，不过这里就不详细展开了。</p><p>我先来了解下HTTP的标准。</p><p>HTTP标准由IETF组织制定，跟它相关的标准主要有两份：</p><ul>\n<li>\n<p>HTTP1.1 <a href="https://tools.ietf.org/html/rfc2616">https://tools.ietf.org/html/rfc2616</a></p>\n</li>\n<li>\n<p>HTTP1.1 <a href="https://tools.ietf.org/html/rfc7234">https://tools.ietf.org/html/rfc7234</a></p>\n</li>\n</ul><p>HTTP协议是基于TCP协议出现的，对TCP协议来说，TCP协议是一条双向的通讯通道，HTTP在TCP的基础上，规定了Request-Response的模式。这个模式决定了通讯必定是由浏览器端首先发起的。</p><p>大部分情况下，浏览器的实现者只需要用一个TCP库，甚至一个现成的HTTP库就可以搞定浏览器的网络通讯部分。HTTP是纯粹的文本协议，它是规定了使用TCP协议来传输文本格式的一个应用层协议。</p><p>下面，我们试着用一个纯粹的TCP客户端来手工实现HTTP一下：</p><h2>实验</h2><p>我们的实验需要使用telnet客户端，这个客户端是一个纯粹的TCP连接工具（安装方法）。</p><p>首先我们运行telnet，连接到极客时间主机，在命令行里输入以下内容：</p><pre><code>telnet time.geekbang.org 80\n</code></pre><p>这个时候，TCP连接已经建立，我们输入以下字符作为请求：</p><pre><code>GET / HTTP/1.1\nHost: time.geekbang.org\n</code></pre><p>按下两次回车，我们收到了服务端的回复：</p><pre><code>HTTP/1.1 301 Moved Permanently\nDate: Fri, 25 Jan 2019 13:28:12 GMT\nContent-Type: text/html\nContent-Length: 182\nConnection: keep-alive\nLocation: https://time.geekbang.org/\nStrict-Transport-Security: max-age=15768000\n\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;\n&lt;body bgcolor=&quot;white&quot;&gt;\n&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;\n&lt;hr&gt;&lt;center&gt;openresty&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>这就是一次完整的HTTP请求的过程了，我们可以看到，在TCP通道中传输的，完全是文本。</p><p>在请求部分，第一行被称作 request line，它分为三个部分，HTTP Method，也就是请求的“方法”，请求的路径和请求的协议和版本。</p><p>在响应部分，第一行被称作 response line，它也分为三个部分，协议和版本、状态码和状态文本。</p><p>紧随在request line或者response line之后，是请求头/响应头，这些头由若干行组成，每行是用冒号分隔的名称和值。</p><p>在头之后，以一个空行（两个换行符）为分隔，是请求体/响应体，请求体可能包含文件或者表单数据，响应体则是HTML代码。</p><h2>HTTP协议格式</h2><p>根据上面的分析，我们可以知道HTTP协议，大概可以划分成如下部分。</p><p><img src="https://static001.geekbang.org/resource/image/3d/a1/3db5e0f362bc276b83c7564430ecb0a1.jpg" alt=""></p><p>我们简单看一下，在这些部分中，path是请求的路径完全由服务端来定义，没有很多的特别内容；而version几乎都是固定字符串；response body是我们最熟悉的HTML，我在后面会有专门的课程介绍，这里也就不多讲了。</p><p>下面我们就来逐个给你介绍其它部分。</p><h2>HTTP Method（方法）</h2><p>我们首先来介绍一下request line里面的方法部分。这里的方法跟我们编程中的方法意义类似，表示我们此次HTTP请求希望执行的操作类型。方法有以下几种定义：</p><ul>\n<li>GET</li>\n<li>POST</li>\n<li>HEAD</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>CONNECT</li>\n<li>OPTIONS</li>\n<li>TRACE</li>\n</ul><p>浏览器通过地址栏访问页面都是GET方法。表单提交产生POST方法。</p><p>HEAD则是跟GET类似，只返回响应头，多数由JavaScript发起。</p><p>PUT和DELETE分别表示添加资源和删除资源，但是实际上这只是语义上的一种约定，并没有强约束。</p><p>CONNECT现在多用于HTTPS和WebSocket。</p><p>OPTIONS和TRACE一般用于调试，多数线上服务都不支持。</p><h2>HTTP Status code（状态码）和 Status text（状态文本）</h2><p>接下来我们看看response line的状态码和状态文本。常见的状态码有以下几种。</p><ul>\n<li>1xx：临时回应，表示客户端请继续。</li>\n<li>2xx：请求成功。\n<ul>\n<li>200：请求成功。</li>\n</ul>\n</li>\n<li>3xx: 表示请求的目标有变化，希望客户端进一步处理。\n<ul>\n<li>301&amp;302：永久性与临时性跳转。</li>\n<li>304：跟客户端缓存没有更新。</li>\n</ul>\n</li>\n<li>4xx：客户端请求错误。\n<ul>\n<li>403：无权限。</li>\n<li>404：表示请求的页面不存在。</li>\n<li>418：It’s a teapot. 这是一个彩蛋，来自ietf的一个愚人节玩笑。（<a href="https://tools.ietf.org/html/rfc2324">超文本咖啡壶控制协议</a>）</li>\n</ul>\n</li>\n<li>5xx：服务端请求错误。\n<ul>\n<li>500：服务端错误。</li>\n<li>503：服务端暂时性错误，可以一会再试。</li>\n</ul>\n</li>\n</ul><p>对我们前端来说，1xx系列的状态码是非常陌生的，原因是1xx的状态被浏览器HTTP库直接处理掉了，不会让上层应用知晓。</p><p>2xx系列的状态最熟悉的就是200，这通常是网页请求成功的标志，也是大家最喜欢的状态码。</p><p>3xx系列比较复杂，301和302两个状态表示当前资源已经被转移，只不过一个是永久性转移，一个是临时性转移。实际上301更接近于一种报错，提示客户端下次别来了。</p><p>304又是一个每个前端必知必会的状态，产生这个状态的前提是：客户端本地已经有缓存的版本，并且在Request中告诉了服务端，当服务端通过时间或者tag，发现没有更新的时候，就会返回一个不含body的304状态。</p><h2>HTTP Head (HTTP头)</h2><p>HTTP头可以看作一个键值对。原则上，HTTP头也是一种数据，我们可以自由定义HTTP头和值。不过在HTTP规范中，规定了一些特殊的HTTP头，我们现在就来了解一下它们。</p><p>在HTTP标准中，有完整的请求/响应头规定，这里我们挑几个重点的说一下：</p><p>我们先来看看Request Header。</p><p><img src="https://static001.geekbang.org/resource/image/2b/a2/2be3e2457f08bdf624837dfaee01e4a2.png" alt=""></p><p>接下来看一下Response Header。<br>\n<img src="https://static001.geekbang.org/resource/image/ef/c9/efdeadf27313e08bf0789a3b5480f7c9.png" alt=""></p><p>这里仅仅列出了我认为比较常见的HTTP头，这些头是我认为前端工程师应该做到不需要查阅，看到就可以知道意思的HTTP头。完整的列表还是请你参考我给出的rfc2616标准。</p><h2>HTTP Request Body</h2><p>HTTP请求的body主要用于提交表单场景。实际上，HTTP请求的body是比较自由的，只要浏览器端发送的body服务端认可就可以了。一些常见的body格式是：</p><ul>\n<li>application/json</li>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n<li>text/xml</li>\n</ul><p>我们使用HTML的form标签提交产生的HTML请求，默认会产生 application/x-www-form-urlencoded 的数据格式，当有文件上传时，则会使用multipart/form-data。</p><h2>HTTPS</h2><p>在HTTP协议的基础上，HTTPS和HTTP2规定了更复杂的内容，但是它基本保持了HTTP的设计思想，即：使用上的Request-Response模式。</p><p>我们首先来了解下HTTPS。HTTPS有两个作用，一是确定请求的目标服务端身份，二是保证传输的数据不会被网络中间节点窃听或者篡改。</p><p>HTTPS的标准也是由RFC规定的，你可以查看它的详情链接：</p><p><a href="https://tools.ietf.org/html/rfc2818">https://tools.ietf.org/html/rfc2818</a></p><p>HTTPS是使用加密通道来传输HTTP的内容。但是HTTPS首先与服务端建立一条TLS加密通道。TLS构建于TCP协议之上，它实际上是对传输的内容做一次加密，所以从传输内容上看，HTTPS跟HTTP没有任何区别。</p><h2>HTTP 2</h2><p>HTTP 2是HTTP 1.1的升级版本，你可以查看它的详情链接。</p><ul>\n<li><a href="https://tools.ietf.org/html/rfc7540">https://tools.ietf.org/html/rfc7540</a></li>\n</ul><p>HTTP 2.0 最大的改进有两点，一是支持服务端推送，二是支持TCP连接复用。</p><p>服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存当中，这可以避免客户端请求顺序带来的并行度不高，从而导致的性能问题。</p><p>TCP连接复用，则使用同一个TCP连接来传输多个HTTP请求，避免了TCP连接建立时的三次握手开销，和初建TCP连接时传输窗口小的问题。</p><blockquote>\n<p><span class="reference">Note: 其实很多优化涉及更下层的协议。IP层的分包情况，和物理层的建连时间是需要被考虑的。</span></p>\n</blockquote><h2>结语</h2><p>在这一节内容中，我们一起学习了浏览器的第一步工作，也就是“浏览器首先使用HTTP协议或HTTPS协议，向服务端请求页面”的这一过程。</p><p>在这个过程中，掌握HTTP协议是重中之重。我从一个小实验开始，带你体验了一次完整的HTTP请求过程。我们一起先分析了HTTP协议的结构。接下来，我分别介绍了HTTP方法、HTTP状态码和状态文本、HTTP Head和HTTP Request Body几个重点需要注意的部分。</p><p>最后，我还介绍了HTTPS和HTTP 2这两个补充版本，以便你可以更好地熟悉并理解新的特性。</p><p>你在工作中，是否已经开始使用HTTPS和HTTP 2协议了呢？用到了它们的哪些特性，请留言告诉我吧。</p>',
        article_title: "浏览器：一个浏览器是如何工作的？（阶段一）",
      },
      {
        title: "浏览器：一个浏览器是如何工作的？（阶段二）",
        herf: "https://time.geekbang.org/column/article/80260",
        id: "80260",
        content:
          '<p>你好，我是winter，今天我们继续来看浏览器的相关内容。</p><p>我在上一篇文章中，简要介绍了浏览器的工作大致可以分为6个阶段，我们昨天讲完了第一个阶段，也就是通讯的部分：浏览器使用HTTP协议或者HTTPS协议，向服务端请求页面的过程。</p><p>今天我们主要来看两个过程：如何解析请求回来的HTML代码，DOM树又是如何构建的。<br>\n<img src="https://static001.geekbang.org/resource/image/34/5a/34231687752c11173b7776ba5f4a0e5a.png" alt=""></p><h2>解析代码</h2><p>我们在前面讲到了HTTP的构成，但是我们有一部分没有详细讲解，那就是Response的body部分，这正是因为HTTP的Response的body，就要交给我们今天学习的内容去处理了。</p><p>HTML的结构不算太复杂，我们日常开发需要的90%的“词”（指编译原理的术语token，表示最小的有意义的单元），种类大约只有标签开始、属性、标签结束、注释、CDATA节点几种。</p><p>实际上有点麻烦的是，由于HTML跟SGML的千丝万缕的联系，我们需要做不少容错处理。“&lt;?”和“&lt;%”什么的也是必须要支持好的，报了错也不能吭声。</p><h3>1.词（token）是如何被拆分的</h3><p>首先我们来看看一个非常标准的标签，会被如何拆分：</p><pre><code>&lt;p class=&quot;a&quot;&gt;text text text&lt;/p&gt;\n</code></pre><p>如果我们从最小有意义单元的定义来拆分，第一个词（token）是什么呢？显然，作为一个词（token），整个p标签肯定是过大了（它甚至可以嵌套）。</p><!-- [[[read_end]]] --><p>那么，只用p标签的开头是不是合适吗？我们考虑到起始标签也是会包含属性的，最小的意义单元其实是“&lt;p” ，所以“ &lt;p” 就是我们的第一个词（token）。</p><p>我们继续拆分，可以把这段代码依次拆成词（token）：</p><ul>\n<li>&lt;p“标签开始”的开始；</li>\n<li>class=“a” 属性；</li>\n<li>&gt;  “标签开始”的结束；</li>\n<li>text text text 文本；</li>\n<li>&lt;/p&gt;标签结束。</li>\n</ul><p>这是一段最简单的例子，类似的还有什么呢？现在我们可以来来看看这些词（token）长成啥样子：</p><p><img src="https://static001.geekbang.org/resource/image/f9/84/f98444aa3ea7471d2414dd7d0f5e3a84.png" alt=""></p><p>根据这样的分析，现在我们讲讲浏览器是如何用代码实现，我们设想，代码开始从HTTP协议收到的字符流读取字符。</p><p>在接受第一个字符之前，我们完全无法判断这是哪一个词（token），不过，随着我们接受的字符越来越多，拼出其他的内容可能性就越来越少。</p><p>比如，假设我们接受了一个字符“ &lt; ” 我们一下子就知道这不是一个文本节点啦。</p><p>之后我们再读一个字符，比如就是 x，那么我们一下子就知道这不是注释和CDATA了，接下来我们就一直读，直到遇到“&gt;”或者空格，这样就得到了一个完整的词（token）了。</p><p>实际上，我们每读入一个字符，其实都要做一次决策，而且这些决定是跟“当前状态”有关的。在这样的条件下，浏览器工程师要想实现把字符流解析成词（token），最常见的方案就是使用状态机。</p><h3>2.状态机</h3><p>绝大多数语言的词法部分都是用状态机实现的。那么我们来把部分词（token）的解析画成一个状态机看看：</p><p><img src="https://static001.geekbang.org/resource/image/8b/b0/8b43d598bc1f83a8a1e7e8f922013ab0.png" alt=""></p><p>当然了，我们这里的分析比较粗略，真正完整的HTML词法状态机，比我们描述的要复杂的多。更详细的内容，你可以参考<a href="https://html.spec.whatwg.org/multipage/parsing.html#tokenization">HTML官方文档</a>，HTML官方文档规定了80个状态（顺便一说，HTML是我见过唯一一个标准中规定了状态机实现的语言，对大部分语言来说，状态机是一种实现而非定义）。</p><p>这里我们为了理解原理，用这个简单的状态机就足够说明问题了。</p><p>状态机的初始状态，我们仅仅区分 “&lt; ”和 “非&lt;”：</p><ul>\n<li>如果获得的是一个非&lt;字符，那么可以认为进入了一个文本节点；</li>\n<li>如果获得的是一个&lt;字符，那么进入一个标签状态。</li>\n</ul><p>不过当我们在标签状态时，则会面临着一些可能性。</p><ul>\n<li>\n<p>比如下一个字符是“ ! ” ，那么很可能是进入了注释节点或者CDATA节点。</p>\n</li>\n<li>\n<p>如果下一个字符是 “/ ”，那么可以确定进入了一个结束标签。</p>\n</li>\n<li>\n<p>如果下一个字符是字母，那么可以确定进入了一个开始标签。</p>\n</li>\n<li>\n<p>如果我们要完整处理各种HTML标准中定义的东西，那么还要考虑“ ? ”“% ”等内容。</p>\n</li>\n</ul><p>我们可以看到，用状态机做词法分析，其实正是把每个词的“特征字符”逐个拆开成独立状态，然后再把所有词的特征字符链合并起来，形成一个联通图结构。</p><p>由于状态机设计属于编译原理的基本知识，这里我们仅作一个简要的介绍。</p><p>接下来就是代码实现的事情了，在C/C++和JavaScript中，实现状态机的方式大同小异：我们把每个函数当做一个状态，参数是接受的字符，返回值是下一个状态函数。（这里我希望再次强调下，状态机真的是一种没有办法封装的东西，所以我们永远不要试图封装状态机。）</p><p>为了方便理解和试验，我们这里用JavaScript来讲解，图上的data状态大概就像下面这样的：</p><pre><code>var data = function(c){\n    if(c==&quot;&amp;&quot;) {\n        return characterReferenceInData;\n    }\n    if(c==&quot;&lt;&quot;) {\n        return tagOpen;\n    }\n    else if(c==&quot;\\0&quot;) {\n        error();\n        emitToken(c);\n        return data;\n    }\n    else if(c==EOF) {\n        emitToken(EOF);\n        return data;\n    }\n    else {\n        emitToken(c);\n        return data;\n    }\n};\nvar tagOpenState = function tagOpenState(c){\n    if(c==&quot;/&quot;) {\n        return endTagOpenState;\n    }\n    if(c.match(/[A-Z]/)) {\n        token = new StartTagToken();\n        token.name = c.toLowerCase();\n        return tagNameState;\n    }\n    if(c.match(/[a-z]/)) {\n        token = new StartTagToken();\n        token.name = c;\n        return tagNameState;\n    }\n    if(c==&quot;?&quot;) {\n        return bogusCommentState;\n    }\n    else {\n        error();\n        return dataState;\n    }\n};\n//……\n</code></pre><p>这段代码给出了状态机的两个状态示例：data即为初始状态，tagOpenState是接受了一个“ &lt; ” 字符，来判断标签类型的状态。</p><p>这里的状态机，每一个状态是一个函数，通过“if else”来区分下一个字符做状态迁移。这里所谓的状态迁移，就是当前状态函数返回下一个状态函数。</p><p>这样，我们的状态迁移代码非常的简单：</p><pre><code>var state = data;\nvar char\nwhile(char = getInput())\n    state = state(char);\n</code></pre><p>这段代码的关键一句是“ state = state(char) ”，不论我们用何种方式来读取字符串流，我们都可以通过state来处理输入的字符流，这里用循环是一个示例，真实场景中，可能是来自TCP的输出流。</p><p>状态函数通过代码中的 emitToken 函数来输出解析好的token（词），我们只需要覆盖 emitToken，即可指定对解析结果的处理方式。</p><p>词法分析器接受字符的方式很简单，就像下面这样：</p><pre><code>function HTMLLexicalParser(){\n\n    //状态函数们……\n    function data() {\n        // ……\n    }\n\n    function tagOpen() {\n        // ……\n    }\n    // ……\n    var state = data;\n    this.receiveInput = function(char) {\n        state = state(char);\n    }\n}\n</code></pre><p>至此，我们就把字符流拆成了词（token）了。</p><h2>构建DOM树</h2><p>接下来我们要把这些简单的词变成DOM树，这个过程我们是使用栈来实现的，任何语言几乎都有栈，为了给你跑着玩，我们还是用JavaScript来实现吧，毕竟JavaScript中的栈只要用数组就好了。</p><pre><code>function HTMLSyntaticalParser(){\n    var stack = [new HTMLDocument];\n    this.receiveInput = function(token) {\n        //……\n    }\n    this.getOutput = function(){\n        return stack[0];\n    }\n}\n\n</code></pre><p>我们这样来设计HTML的语法分析器，receiveInput负责接收词法部分产生的词（token），通常可以由emitToken来调用。</p><p>在接收的同时，即开始构建DOM树，所以我们的主要构建DOM树的算法，就写在receiveInput当中。当接收完所有输入，栈顶就是最后的根节点，我们DOM树的产出，就是这个stack的第一项。</p><p>为了构建DOM树，我们需要一个Node类，接下来我们所有的节点都会是这个Node类的实例。</p><p>在完全符合标准的浏览器中，不一样的HTML节点对应了不同的Node的子类，我们为了简化，就不完整实现这个继承体系了。我们仅仅把Node分为Element和Text（如果是基于类的OOP的话，我们还需要抽象工厂来创建对象），</p><pre><code>function Element(){\n    this.childNodes = [];\n}\nfunction Text(value){\n    this.value = value || &quot;&quot;;\n}\n</code></pre><p>前面我们的词（token）中，以下两个是需要成对匹配的：</p><ul>\n<li>tag start</li>\n<li>tag end</li>\n</ul><p>根据一些编译原理中常见的技巧，我们使用的栈正是用于匹配开始和结束标签的方案。</p><p>对于Text节点，我们则需要把相邻的Text节点合并起来，我们的做法是当词（token）入栈时，检查栈顶是否是Text节点，如果是的话就合并Text节点。</p><p>同样我们来看看直观的解析过程：</p><pre><code>&lt;html maaa=a &gt;\n    &lt;head&gt;\n        &lt;title&gt;cool&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;img src=&quot;a&quot; /&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>通过这个栈，我们可以构建DOM树：</p><ul>\n<li>栈顶元素就是当前节点；</li>\n<li>遇到属性，就添加到当前节点；</li>\n<li>遇到文本节点，如果当前节点是文本节点，则跟文本节点合并，否则入栈成为当前节点的子节点；</li>\n<li>遇到注释节点，作为当前节点的子节点；</li>\n<li>遇到tag start就入栈一个节点，当前节点就是这个节点的父节点；</li>\n<li>遇到tag end就出栈一个节点（还可以检查是否匹配）。</li>\n</ul><p>我在文章里面放了一个视频，你可以点击查看用栈构造DOM树的全过程。</p><p><video poster="https://static001.geekbang.org/resource/image/7c/12/7cf7a46496b2c19ae78d263bcd75ef12.png" preload="none" controls=""><source src="https://media001.geekbang.org/customerTrans/fe4a99b62946f2c31c2095c167b26f9c/53121b57-16cf0ec72ae-0000-0000-01d-dbacd.mp4" type="video/mp4"><source src="https://media001.geekbang.org/035b80dfcd0240fe8b7a602696c89317/107c22eb4ef14186bcd223b40ca3f54c-9469c087299d3945df8190acc979f573-sd.m3u8" type="application/x-mpegURL"><source src="https://media001.geekbang.org/035b80dfcd0240fe8b7a602696c89317/107c22eb4ef14186bcd223b40ca3f54c-4c6364b3a4d8ed2e8ef6071a8fc26a06-hd.m3u8" type="application/x-mpegURL"></video></p><p>当我们的源代码完全遵循XHTML（这是一种比较严谨的HTML语法）时，这非常简单问题，然而HTML具有很强的容错能力，奥妙在于当tag end跟栈顶的start tag不匹配的时候如何处理。</p><p>于是，这又有一个极其复杂的规则，幸好W3C又一次很贴心地把全部规则都整理地很好，我们只要翻译成对应的代码就好了，以下这个网站呈现了全部规则。你可以点击查看。</p><ul>\n<li><a href="http://www.w3.org/html/wg/drafts/html/master/syntax.html#tree-construction">http://www.w3.org/html/wg/drafts/html/master/syntax.html#tree-construction</a></li>\n</ul><h2>结语</h2><p>好了，总结一下。在今天的文章中，我带你继续探索了浏览器的工作原理，我们主要研究了解析代码和构建DOM树两个步骤。在解析代码的环节里，我们一起详细地分析了一个词（token）被拆分的过程，并且给出了实现它所需要的一个简单的状态机。</p><p>在构建DOM树的环节中，基本思路是使用栈来构建DOM树为了方便你动手实践，我用JavaScript实现了这一过程。</p><p>今天给你留的题目是：在语法和词法的代码，我已经给出了大体的结构，请你试着把内容补充完整吧。</p>',
        article_title: "浏览器：一个浏览器是如何工作的？（阶段二）",
      },
      {
        title: "浏览器：一个浏览器是如何工作的（阶段三）",
        herf: "https://time.geekbang.org/column/article/80311",
        id: "80311",
        content:
          '<p>你好，我是winter。</p><p>在上一节课中，我已经讲了浏览器的DOM构建过程，但是这个构建的DOM，实际上信息是不全的，它只有节点和属性，不包含任何的样式信息。</p><p>我们这一节课就来讲讲：浏览器是如何把CSS规则应用到节点上，并给这棵朴素的DOM树添加上CSS属性的。</p><h2>整体过程</h2><p>首先我们还是要感性地理解一下这个过程。</p><p>首先CSS选择器这个名称，可能会给你带来一定的误解，觉得好像CSS规则是DOM树构建好了以后，再进行选择并给它添加样式的。实际上，这个过程并不是这样的。</p><p>我们回忆一下我们在浏览器第一节课讲的内容，浏览器会尽量流式处理整个过程。我们上一节课构建DOM的过程是：从父到子，从先到后，一个一个节点构造，并且挂载到DOM树上的，那么这个过程中，我们是否能同步把CSS属性计算出来呢？</p><p>答案是肯定的。</p><p>在这个过程中，我们依次拿到上一步构造好的元素，去检查它匹配到了哪些规则，再根据规则的优先级，做覆盖和调整。所以，从这个角度看，所谓的选择器，应该被理解成“匹配器”才更合适。</p><p>我在CSS语法部分，已经总结了选择器的各种符号，这里再把它列出来，我们回顾一下。</p><ul>\n<li>空格: 后代，选中它的子节点和所有子节点的后代节点。</li>\n<li>&gt;: 子代，选中它的子节点。</li>\n<li>+：直接后继选择器，选中它的下一个相邻节点。</li>\n<li>~：后继，选中它之后所有的相邻节点。</li>\n<li>||：列，选中表格中的一列。</li>\n</ul><!-- [[[read_end]]] --><p>关于选择器的知识，我会在CSS的部分继续讲解。这里我们主要介绍浏览器是如何实现这些规则的。</p><p>不知道你有没有发现，这里的选择器有个特点，那就是选择器的出现顺序，必定跟构建DOM树的顺序一致。这是一个CSS设计的原则，即保证选择器在DOM树构建到当前节点时，已经可以准确判断是否匹配，不需要后续节点信息。</p><p>也就是说，未来也不可能会出现“父元素选择器”这种东西，因为父元素选择器要求根据当前节点的子节点，来判断当前节点是否被选中，而父节点会先于子节点构建。</p><p>理解了CSS构建的大概过程，我们下面来看看具体的操作。</p><p>首先，我们必须把CSS规则做一下处理。作为一门语言，CSS需要先经过词法分析和语法分析，变成计算机能够理解的结构。</p><p>这部分具体的做法属于编译原理的内容，这里就不做赘述了。我们这里假设CSS已经被解析成了一棵可用的抽象语法树。</p><p>我们在之前的CSS课程中已经介绍过 compound-selector 的概念，一个 compound-selector 是检查一个元素的规则，而一个复合型选择器，则是由数个 compound-selector 通过前面讲的符号连接起来的。</p><h2>后代选择器 “空格”</h2><p>我们先来分析一下后代选择器，我们来一起看一个例子：</p><pre><code>a#b .cls {\n    width: 100px;\n}\n</code></pre><p>可以把一个CSS选择器按照 compound-selector 来拆成数段，每当满足一段条件的时候，就前进一段。</p><p>比如，在上面的例子中，当我们找到了匹配a#b的元素时，我们才会开始检查它所有的子代是否匹配 .cls。</p><p>除了前进一段的情况，我们还需要处理后退的情况，比如，我们这样一段代码：</p><pre><code>&lt;a id=b&gt;\n    &lt;span&gt;1&lt;span&gt;\n    &lt;span class=cls&gt;2&lt;span&gt;\n&lt;/a&gt;\n&lt;span class=cls&gt;3&lt;span&gt;\n</code></pre><p>当遇到 &lt;/a&gt;时，必须使得规则 a#b .cls 回退一步，这样第三个 span 才不会被选中。后代选择器的作用范围是父节点的所有子节点，因此规则是在匹配到本标签的结束标签时回退。</p><h2>后继选择器“ ~ ”</h2><p>接下来我们看下后继选择器，跟后代选择器不同的地方是，后继选择器只作用于一层，我们来看一个例子：</p><pre><code>.cls~* {\n    border:solid 1px green;\n}\n&lt;div&gt;\n&lt;span&gt;1&lt;span&gt;\n&lt;span class=cls&gt;2&lt;span&gt;\n&lt;span&gt;\n    3\n    &lt;span&gt;4&lt;/span&gt;\n&lt;span&gt;\n&lt;span&gt;5&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><p>这里 .cls 选中了 span 2 然后 span 3 是它的后继，但是span 3的子节点 span 4 并不应该被选中，而span 5也是它的后继，因此应该被选中。</p><p>按照DOM树的构造顺序，4在3和5中间，我们就没有办法像前面讲的后代选择器一样通过激活或者关闭规则来实现匹配。</p><p>但是这里有个非常方便的思路，就是给选择器的激活，带上一个条件：父元素。</p><p>注意，这里后继选择器，当前半段的 .cls 匹配成功时，后续 * 所匹配的所有元素的父元素都已经确定了（后继节点和当前节点父元素相同是充分必要条件）。在我们的例子中，那个div就是后继节点的父元素。</p><h2>子代选择器“ &gt;”</h2><p>我们继续看，子代选择器是如何实现的。</p><p>实际上，有了前面讲的父元素这个约束思路，我们很容易实现子代选择器。区别仅仅是拿当前节点作为父元素，还是拿当前节点的父元素作为父元素。</p><pre><code>div&gt;.cls {\n    border:solid 1px green;\n}\n&lt;div&gt;\n&lt;span&gt;1&lt;span&gt;\n&lt;span class=cls&gt;2&lt;span&gt;\n&lt;span&gt;\n    3\n    &lt;span&gt;4&lt;/span&gt;\n&lt;span&gt;\n&lt;span&gt;5&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><p>我们看这段代码，当DOM树构造到div时，匹配了CSS规则的第一段，因为是子代选择器，我们激活后面的 .cls选择条件，并且指定父元素必须是当前div。于是后续的构建DOM树构建过程中，span 2 就被选中了。</p><h2>直接后继选择器“ +”</h2><p>直接后继选择器的实现是上述中最为简单的了，因为它只对唯一一个元素生效，所以不需要像前面几种一样反复激活和关闭规则。</p><p>一个最简单的思路是，我们可以把它当作检查元素自身的选择器来处理。即我们把#id+.cls都当做检查某一个元素的选择器。</p><p>另外的一种思路是：给后继选择器加上一个flag，使它匹配一次后失效。你可以尝试一下，告诉我结果。</p><h2>列选择器“ || ”</h2><p>列选择器比较特别，它是专门针对表格的选择器，跟表格的模型建立相关，我们这里不详细讲了。</p><h2>其它</h2><p>我们不要忘记，CSS选择器还支持逗号分隔，表示“或”的关系。这里最简单的实现是把逗号视为两条规则的一种简易写法。</p><p>比如：</p><pre><code>a#b, .cls {\n\n}\n</code></pre><p>我们当作两条规则来处理：</p><pre><code>a#b {\n\n}\n</code></pre><pre><code>.cls {\n\n}\n</code></pre><p>还有一个情况，就是选择器可能有重合，这样，我们可以使用树形结构来进行一些合并，来提高效率：</p><pre><code>#a .cls {\n\n}\n\n#a span {\n\n}\n#a&gt;span {\n\n}\n</code></pre><p>这里实际上可以把选择器构造成一棵树：</p><ul>\n<li>#a\n<ul>\n<li>&lt;空格&gt;.cls</li>\n<li>&lt;空格&gt;span</li>\n<li>&gt;span</li>\n</ul>\n</li>\n</ul><p>需要注意的是，这里的树，必须要带上连接符。</p><h2>结语</h2><p>这一节我们讲解了CSS计算的过程。CSS计算是把CSS规则应用到DOM树上，为DOM结构添加显示相关属性的过程。在这一节中，我们主要介绍了选择器的几种复合结构应该如何实现。</p><p>在这一步骤之后，我们得到了一棵带有CSS属性的树，为我们后续打下了基础。</p><p>最后留一个问题，你认为CSS语法解析成什么结构，最适合我们进行CSS计算。</p><p><img src="https://static001.geekbang.org/resource/image/a1/9d/a1fa9a462fb96ae3a70ff4751203d79d.jpg" alt=""></p>',
        article_title: "浏览器：一个浏览器是如何工作的（阶段三）",
      },
      {
        title: "浏览器：一个浏览器是如何工作的？（阶段四）",
        herf: "https://time.geekbang.org/column/article/81730",
        id: "81730",
        content:
          '<p>你好，我是winter。</p><p>我们书接上文。浏览器进行到这一步，我们已经给DOM元素添加了用于展现的CSS属性，接下来，浏览器的工作就是确定每一个元素的位置了。我们的基本原则仍然不变，就是尽可能流式地处理上一步骤的输出。</p><p>在构建DOM树和计算CSS属性这两个步骤，我们的产出都是一个一个的元素，但是在排版这个步骤中，有些情况下，我们就没法做到这样了。</p><p>尤其是表格相关排版、Flex排版和Grid排版，它们有一个显著的特点，那就是子元素之间具有关联性。</p><h2>基本概念</h2><p>首先我们先来介绍一些基本概念，使你可以感性地认识一下我们平常说的各种术语。</p><p><strong>“排版”</strong>这个概念最初来自活字印刷，是指我们把一个一个的铅字根据文章顺序，放入板框当中的步骤，排版的意思是确定每一个字的位置。</p><p>在现代浏览器中，仍然借用了这个概念，但是排版的内容更加复杂，包括文字、图片、图形、表格等等，我们把浏览器确定它们位置的过程，叫作排版。</p><p>浏览器最基本的排版方案是<strong>正常流排版</strong>，它包含了顺次排布和折行等规则，这是一个跟我们提到的印刷排版类似的排版方案，也跟我们平时书写文字的方式一致，所以我们把它叫做正常流。</p><p>浏览器的文字排版遵循公认的文字排版规范，文字排版是一个复杂的系统，它规定了行模型和文字在行模型中的排布。行模型规定了行顶、行底、文字区域、基线等对齐方式。（你还记得小时候写英语的英语本吗？英语本上的四条线就是一个简单的行模型。）</p><!-- [[[read_end]]] --><p>此外，浏览器支持不同语言，因为不同语言的书写顺序不一致，所以浏览器的文本排版还支持双向文字系统。</p><p>浏览器又可以支持元素和文字的混排，元素被定义为占据长方形的区域，还允许边框、边距和留白，这个就是所谓的<strong>盒模型</strong>。</p><p>在正常流的基础上，浏览器还支持两类元素：绝对定位元素和浮动元素。</p><ul>\n<li>\n<p>绝对定位元素把自身从正常流抽出，直接由top和left等属性确定自身的位置，不参加排版计算，也不影响其它元素。绝对定位元素由position属性控制。</p>\n</li>\n<li>\n<p>浮动元素则是使得自己在正常流的位置向左或者向右移动到边界，并且占据一块排版空间。浮动元素由float属性控制。</p>\n</li>\n</ul><p>除了正常流，浏览器还支持其它排版方式，比如现在非常常用的Flex排版，这些排版方式由外部元素的display属性来控制（注意，display同时还控制元素在正常流中属于inline等级还是block等级）。</p><h2>正常流文字排版</h2><p>我们会在CSS部分详细介绍正常流排版的行为，我们这里主要介绍浏览器中的正常流。正常流是唯一一个文字和盒混排的排版方式，我们先从文字来讲起。</p><p>要想理解正常流，我们首先要回忆一下自己如何在纸上写文章。</p><p>首先，纸是有固定宽度的，虽然纸有固定高度，但是我们可以通过下一页纸的方式来接续，因此我们不存在写不下的场景。</p><p>我们书写文字的时候，是从左到右依次书写，每一个字跟上一个字都不重叠，文字之间有一定间距，当写满一行时，我们换到下一行去继续写。</p><p>书写中文时，文字的上、下、中轴线都对齐，书写英文时，不同字母的高度不同，但是有一条基线对齐。</p><p>实际上浏览器环境也很类似。但是因为浏览器支持改变排版方向，不一定是从左到右从上到下，所以我们把文字依次书写的延伸方向称为主轴或者主方向，换行延伸的方向，跟主轴垂直交叉，称为交叉轴或者交叉方向。</p><p>我们一般会从某个字体文件中获取某个特定文字的相关信息。我们获取到的信息大概类似下面：</p><p><img src="https://static001.geekbang.org/resource/image/06/01/0619d38f00d539f7b6773e541ce6fa01.png" alt=""></p><p>纵向版本：</p><p><img src="https://static001.geekbang.org/resource/image/c3/96/c361c7ff3a11216c139ed462b9d5f196.png" alt=""></p><p>这两张图片来自著名开源字体解析库freetype，实际上，各个库对字体的理解大同小异，我们注意一下，advance代表每一个文字排布后在主轴上的前进距离，它跟文字的宽/高不相等，是字体中最重要的属性。</p><p>除了字体提供的字形本身包含的信息，文字排版还受到一些CSS属性影响，如line-height、letter-spacing、word-spacing等。</p><p>在正常流的文字排版中，多数元素被当作长方形盒来排版，而只有display为inline的元素，是被拆成文本来排版的（还有一种run-in元素，它有时作为盒，有时作为文字，不太常用，这里不详细讲了）。</p><p>display值为inline的元素中的文字排版时会被直接排入文字流中，inline元素主轴方向的margin属性和border属性（例如主轴为横向时的margin-left和margin-right）也会被计算进排版前进距离当中。</p><p>注意，当没有强制指定文字书写方向时，在左到右文字中插入右到左向文字，会形成一个双向文字盒，反之亦然。</p><p>这样，即使没有元素包裹，混合书写方向的文字也可以形成一个盒结构，我们在排版时，遇到这样的双向文字盒，会先排完盒内再排盒外。</p><h2>正常流中的盒</h2><p>在正常流中，display不为inline的元素或者伪元素，会以盒的形式跟文字一起排版。多数display属性都可以分成两部分：内部的排版和是否inline，带有inline-前缀的盒，被称作行内级盒。</p><p>根据盒模型，一个盒具有margin、border、padding、width/height等属性，它在主轴方向占据的空间是由对应方向的这几个属性之和决定的，而vertical-align属性决定了盒在交叉轴方向的位置，同时也会影响实际行高。</p><p>所以，浏览器对行的排版，一般是先行内布局，再确定行的位置，根据行的位置计算出行内盒和文字的排版位置。</p><p>块级盒比较简单，它总是单独占据一整行，计算出交叉轴方向的高度即可。</p><h2>绝对定位元素</h2><p>position属性为absolute的元素，我们需要根据它的包含块来确定位置，这是完全跟正常流无关的一种独立排版模式，逐层找到其父级的position非static元素即可。</p><h2>浮动元素排版</h2><p>float元素非常特别，浏览器对float的处理是先排入正常流，再移动到排版宽度的最左/最右（这里实际上是主轴的最前和最后）。</p><p>移动之后，float元素占据了一块排版的空间，因此，在数行之内，主轴方向的排版距离发生了变化，直到交叉轴方向的尺寸超过了浮动元素的交叉轴尺寸范围，主轴排版尺寸才会恢复。float元素排布完成后，float元素所在的行需要重新确定位置。</p><h2>其它的排版</h2><p>CSS的每一种排版都有一个很复杂的规定，实际实现形式也各不相同。比如如Flex排版，支持了flex属性，flex属性将每一行排版后的剩余空间平均分配给主轴方向的width/height属性。浏览器支持的每一种排版方式，都是按照对应的标准来实现的。</p><h2>结语</h2><p>这一部分，我们以正常流为主，介绍了浏览器的排版基本概念及一些算法。这里，我主要介绍了正常流中的文字排版、正常流中的盒、绝对定位元素、浮动元素排版这几种情况。最后，我还简单介绍了一下Flex排版。这属于进阶版的排版方式了，你可以了解一下。</p><p>你平时喜欢使用方式排版呢，欢迎留言告诉我。</p><p></p>',
        article_title: "浏览器：一个浏览器是如何工作的？（阶段四）",
      },
      {
        title: "浏览器：一个浏览器是如何工作的？（阶段五）",
        herf: "https://time.geekbang.org/column/article/82397",
        id: "82397",
        content:
          "<p>你好，我是winter。我们的浏览器系列已经进行到最后一篇。</p><p>在之前的几篇文章中，我们已经经历了把URL变成字符流，把字符流变成词（token）流，把词（token）流构造成DOM树，把不含样式信息的DOM树应用CSS规则，变成包含样式信息的DOM树，并且根据样式信息，计算了每个元素的位置和大小。</p><p>那么，我们最后的步骤，就是根据这些样式信息和大小信息，为每个元素在内存中渲染它的图形，并且把它绘制到对应的位置。</p><h2>渲染</h2><p>首先我们来谈谈渲染这个词，渲染也是个外来词，它是英文词render的翻译，render这个词在英文里面，有“导致”“变成”的意思，也有“粉刷墙壁”的意思。</p><p>在计算机图形学领域里，英文render这个词是一个简写，它是特指把模型变成位图的过程。我们把render翻译成“渲染”，是个非常有意思的翻译，中文里“渲染”这个词是一种绘画技法，是指沾清水把墨涂开的意思。</p><p>所以，render翻译成“渲染”，我认为是非常高明的，对render这个过程，用国画的渲染手法来概括，是颇有神似的。</p><p>我们现在的一些框架，也会把“从数据变成HTML代码的过程”称为render，其实我觉得这是非常具有误导性的，我个人是非常不喜欢这种命名方式，当然了，所谓“文无第一”，在自然语言的范围里，我们很难彻底否定这种用法的合理性。</p><!-- [[[read_end]]] --><p>不过，在本篇文章中，我们可以约定一下，本文中出现的“渲染”一词，统一指的是它在图形学的意义，也就是把模型变成位图的过程。</p><p>这里的位图就是在内存里建立一张二维表格，把一张图片的每个像素对应的颜色保存进去（位图信息也是DOM树中占据浏览器内存最多的信息，我们在做内存占用优化时，主要就是考虑这一部分）。</p><p>浏览器中渲染这个过程，就是把每一个元素对应的盒变成位图。这里的元素包括HTML元素和伪元素，一个元素可能对应多个盒（比如inline元素，可能会分成多行）。每一个盒对应着一张位图。</p><p>这个渲染过程是非常复杂的，但是总体来说，可以分成两个大类：图形和文字。</p><p>盒的背景、边框、SVG元素、阴影等特性，都是需要绘制的图形类。这就像我们实现HTTP协议必须要基于TCP库一样，这一部分，我们需要一个底层库来支持。</p><p>一般的操作系统会提供一个底层库，比如在Android中，有大名鼎鼎的Skia，而Windows平台则有GDI，一般的浏览器会做一个兼容层来处理掉平台差异。</p><p>这些盒的特性如何绘制，每一个都有对应的标准规定，而每一个的实现都可以作为一个独立的课题来研究，当年圆角+虚线边框，可是难倒了各个浏览器的工程师。考虑到这些知识互相都比较独立，对前端工程师来说也不是特别重要的细节，我们这里就不详细探究了。</p><p>盒中的文字，也需要用底层库来支持，叫做字体库。字体库提供读取字体文件的基本能力，它能根据字符的码点抽取出字形。</p><p>字形分为像素字形和矢量字形两种。通常的字体，会在6px 8px等小尺寸提供像素字形，比较大的尺寸则提供矢量字形。矢量字形本身就需要经过渲染才能继续渲染到元素的位图上去。目前最常用的字体库是Freetype，这是一个C++编写的开源的字体库。</p><p>在最普遍的情况下，渲染过程生成的位图尺寸跟它在上一步排版时占据的尺寸相同。</p><p>但是理想和现实是有差距的，很多属性会影响渲染位图的大小，比如阴影，它可能非常巨大，或者渲染到非常遥远的位置，所以为了优化，浏览器实际的实现中会把阴影作为一个独立的盒来处理。</p><p>注意，我们这里讲的渲染过程，是不会把子元素绘制到渲染的位图上的，这样，当父子元素的相对位置发生变化时，可以保证渲染的结果能够最大程度被缓存，减少重新渲染。</p><h2>合成</h2><p>合成是英文术语compositing的翻译，这个过程实际上是一个性能考量，它并非实现浏览器的必要一环。</p><p>我们上一小节中讲到，渲染过程不会把子元素渲染到位图上面，合成的过程，就是为一些元素创建一个“合成后的位图”（我们把它称为合成层），把一部分子元素渲染到合成的位图上面。</p><p>看到这句话，我想你一定会问问题，到底是为哪些元素创建合成后的位图，把哪些子元素渲染到合成的位图上面呢？</p><p>这就是我们要讲的合成的策略。我们前面讲了，合成是一个性能考量，那么合成的目标就是提高性能，根据这个目标，我们建立的原则就是最大限度减少绘制次数原则。</p><p>我们举一个极端的例子。如果我们把所有元素都进行合成，比如我们为根元素HTML创建一个合成后的位图，把所有子元素都进行合成，那么会发生什么呢？</p><p>那就是，一旦我们用JavaScript或者别的什么方式，改变了任何一个CSS属性，这份合成后的位图就失效了，我们需要重新绘制所有的元素。</p><p>那么如果我们所有的元素都不合成，会怎样呢？结果就是，相当于每次我们都必须要重新绘制所有的元素，这也不是对性能友好的选择。</p><p>那么好的合成策略是什么呢，好的合成策略是“猜测”可能变化的元素，把它排除到合成之外。</p><p>我们来举个例子：</p><pre><code>&lt;div id=&quot;a&quot;&gt;\n    &lt;div id=&quot;b&quot;&gt;...&lt;/div&gt;\n    &lt;div id=&quot;c&quot; style=&quot;transform:translate(0,0)&quot;&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><p>假设我们的合成策略能够把a、b两个div合成，而不把c合成，那么，当我执行以下代码时：</p><pre><code>document.getElementById(&quot;c&quot;).style.transform = &quot;translate(100px, 0)&quot;;\n</code></pre><p>我们绘制的时候，就可以只需要绘制a和b合成好的位图和c，从而减少了绘制次数。这里需要注意的是，在实际场景中，我们的b可能有很多复杂的子元素，所以当合成命中时，性能提升收益非常之高。</p><p>目前，主流浏览器一般根据position、transform等属性来决定合成策略，来“猜测”这些元素未来可能发生变化。</p><p>但是，这样的猜测准确性有限，所以新的CSS标准中，规定了will-change属性，可以由业务代码来提示浏览器的合成策略，灵活运用这样的特性，可以大大提升合成策略的效果。</p><h2>绘制</h2><p>绘制是把“位图最终绘制到屏幕上，变成肉眼可见的图像”的过程，不过，一般来说，浏览器并不需要用代码来处理这个过程，浏览器只需要把最终要显示的位图交给操作系统即可。</p><p>一般最终位图位于显存中，也有一些情况下，浏览器只需要把内存中的一张位图提交给操作系统或者驱动就可以了，这取决于浏览器运行的环境。不过无论如何，我们把任何位图合成到这个“最终位图”的操作称为绘制。</p><p>这个过程听上去非常简单，这是因为在前面两个小节中，我们已经得到了每个元素的位图，并且对它们部分进行了合成，那么绘制过程，实际上就是按照z-index把它们依次绘制到屏幕上。</p><p>然而如果在实际中这样做，会带来极其糟糕的性能。</p><p>有一个一度非常流行于前端群体的说法，讲做CSS性能优化，应该尽量避免“重排”和“重绘”，前者讲的是我们上一课的排版行为，后者模糊地指向了我们本课程三小节讲的三个步骤，而实际上，这个说法大体不能算错，却不够准确。</p><p>因为，实际上，“绘制”发生的频率比我们想象中要高得多。我们考虑一个情况：鼠标划过浏览器显示区域。这个过程中，鼠标的每次移动，都造成了重新绘制，如果我们不重新绘制，就会产生大量的鼠标残影。</p><p>这个时候，限制绘制的面积就很重要了。如果鼠标某次位置恰巧遮盖了某个较小的元素，我们完全可以重新绘制这个元素来完成我们的目标，当然，简单想想就知道，这种事情不可能总是发生的。</p><p>计算机图形学中，我们使用的方案就是“脏矩形”算法，也就是把屏幕均匀地分成若干矩形区域。</p><p>当鼠标移动、元素移动或者其它导致需要重绘的场景发生时，我们只重新绘制它所影响到的几个矩形区域就够了。比矩形区域更小的影响最多只会涉及4个矩形，大型元素则覆盖多个矩形。</p><p>设置合适的矩形区域大小，可以很好地控制绘制时的消耗。设置过大的矩形会造成绘制面积增大，而设置过小的矩形则会造成计算复杂。</p><p>我们重新绘制脏矩形区域时，把所有与矩形区域有交集的合成层（位图）的交集部分绘制即可。</p><h2>结语</h2><p>在这一节课程中，我们讲解了浏览器中的位图操作部分，这包括了渲染、合成和绘制三个部分。渲染过程把元素变成位图，合成把一部分位图变成合成层，最终的绘制过程把合成层显示到屏幕上。</p><p>当绘制完成时，就完成了浏览器的最终任务，把一个URL最后变成了一个可以看的网页图像。当然了，我们对每一个部分的讲解，都省略了大量的细节，比如我们今天讲到的绘制，就有意地无视了滚动区域。</p><p>尽管如此，对浏览器工作原理的感性认识，仍然可以帮助我们理解很多前端技术的设计和应用技巧，浏览器的工作原理和性能部分非常强相关，我们在实践部分的性能优化部分，会再次跟你做一些探讨。</p><p>实际上，如果你认真阅读浏览器系列的课程，是可以用JavaScript实现一个玩具浏览器的，我非常希望学习课程的同学中能有人这样做，一旦你做到了，收益会非常大。这就是我今天留给你的课外作业，你可以尝试一下。</p><p></p>",
        article_title: "浏览器：一个浏览器是如何工作的？（阶段五）",
      },
      {
        title: "浏览器DOM：你知道HTML的节点有哪几种吗？",
        herf: "https://time.geekbang.org/column/article/85031",
        id: "85031",
        content:
          '<p>你好，我是winter。</p><p>今天我们进入浏览器API的学习, 这一节课，我们来学习一下DOM API。</p><p>DOM API是最早被设计出来的一批API，也是用途最广的API，所以早年的技术社区，常常用DOM来泛指浏览器中所有的API。不过今天这里我们要介绍的DOM，指的就是狭义的文档对象模型。</p><h2>DOM API介绍</h2><p>首先我们先来讲一讲什么叫做文档对象模型。</p><p>顾名思义，文档对象模型是用来描述文档，这里的文档，是特指HTML文档（也用于XML文档，但是本课不讨论XML）。同时它又是一个“对象模型”，这意味着它使用的是对象这样的概念来描述HTML文档。</p><p>说起HTML文档，这是大家最熟悉的东西了，我们都知道，HTML文档是一个由标签嵌套而成的树形结构，因此，DOM也是使用树形的对象模型来描述一个HTML文档。</p><p>DOM API大致会包含4个部分。</p><ul>\n<li>节点：DOM树形结构中的节点相关API。</li>\n<li>事件：触发和监听事件相关API。</li>\n<li>Range：操作文字范围相关API。</li>\n<li>遍历：遍历DOM需要的API。</li>\n</ul><p>事件相关API和事件模型，我们会用单独的课程讲解，所以我们本篇文章重点会为你介绍节点和遍历相关API。</p><p>DOM API 数量很多，我希望给你提供一个理解DOM API设计的思路，避免单靠机械的方式去死记硬背。</p><!-- [[[read_end]]] --><h3>节点</h3><p>DOM的树形结构所有的节点有统一的接口Node，我们按照继承关系，给你介绍一下节点的类型。</p><p><img src="https://static001.geekbang.org/resource/image/6e/f6/6e278e450d8cc7122da3616fd18b9cf6.png" alt=""></p><p>在这些节点中，除了Document和DocumentFrangment，都有与之对应的HTML写法，我们可以看一下。</p><pre><code>Element: &lt;tagname&gt;...&lt;/tagname&gt;\nText: text\nComment: &lt;!-- comments --&gt;\nDocumentType: &lt;!Doctype html&gt;\nProcessingInstruction: &lt;?a 1?&gt;\n</code></pre><p>我们在编写HTML代码并且运行后，就会在内存中得到这样一棵DOM树，HTML的写法会被转化成对应的文档模型，而我们则可以通过JavaScript等语言去访问这个文档模型。</p><p>这里我们每天都需要用到，要重点掌握的是：Document、Element、Text节点。</p><p>DocumentFragment也非常有用，它常常被用来高性能地批量添加节点。因为Comment、DocumentType和ProcessingInstruction很少需要运行时去修改和操作，所以有所了解即可。</p><h3>Node</h3><p>Node是DOM树继承关系的根节点，它定义了DOM节点在DOM树上的操作，首先，Node提供了一组属性，来表示它在DOM树中的关系，它们是：</p><ul>\n<li>parentNode</li>\n<li>childNodes</li>\n<li>firstChild</li>\n<li>lastChild</li>\n<li>nextSibling</li>\n<li>previousSibling</li>\n</ul><p>从命名上，我们可以很清晰地看出，这一组属性提供了前、后、父、子关系，有了这几个属性，我们可以很方便地根据相对位置获取元素。当然，Node中也提供了操作DOM树的API，主要有下面几种。</p><ul>\n<li>appendChild</li>\n<li>insertBefore</li>\n<li>removeChild</li>\n<li>replaceChild</li>\n</ul><p>这个命名跟上面一样，我们基本可以知道API的作用。这几个API的设计可以说是饱受诟病。其中最主要的批评是它不对称——只有before，没有after，而jQuery等框架都对其做了补充。</p><p>实际上，appendChild和insertBefore的这个设计，是一个“最小原则”的设计，这两个API是满足插入任意位置的必要API，而insertAfter，则可以由这两个API实现出来。</p><p>我个人其实不太喜欢这个设计，对我而言，insertAt(pos) 更符合审美一些。当然，不论喜不喜欢，这个标准已经确定，我们还是必须要掌握它。</p><p>这里从设计的角度还想要谈一点，那就是，所有这几个修改型的API，全都是在父元素上操作的，比如我们要想实现“删除一个元素的上一个元素”，必须要先用parentNode获取其父元素。</p><p>这样的设计是符合面向对象的基本原则的。还记得我们在JavaScript对象部分讲的对象基本特征吗？“拥有哪些子元素”是父元素的一种状态，所以修改状态，应该是父元素的行为。这个设计我认为是DOM API中好的部分。</p><p>到此为止，Node提供的API已经可以很方便（大概吧）地对树进行增、删、遍历等操作了。</p><p>除此之外，Node还提供了一些高级API，我们来认识一下它们。</p><ul>\n<li>compareDocumentPosition 是一个用于比较两个节点中关系的函数。</li>\n<li>contains 检查一个节点是否包含另一个节点的函数。</li>\n<li>isEqualNode 检查两个节点是否完全相同。</li>\n<li>isSameNode 检查两个节点是否是同一个节点，实际上在JavaScript中可以用“===”。</li>\n<li>cloneNode 复制一个节点，如果传入参数true，则会连同子元素做深拷贝。</li>\n</ul><p>DOM标准规定了节点必须从文档的create方法创建出来，不能够使用原生的JavaScript的new运算。于是document对象有这些方法。</p><ul>\n<li>createElement</li>\n<li>createTextNode</li>\n<li>createCDATASection</li>\n<li>createComment</li>\n<li>createProcessingInstruction</li>\n<li>createDocumentFragment</li>\n<li>createDocumentType</li>\n</ul><p>上面的这些方法都是用于创建对应的节点类型。你可以自己尝试一下。</p><h2>Element 与 Attribute</h2><p>Node提供了树形结构上节点相关的操作。而大部分时候，我们比较关注的是元素。Element表示元素，它是Node的子类。</p><p>元素对应了HTML中的标签，它既有子节点，又有属性。所以Element子类中，有一系列操作属性的方法。</p><p>我们需要注意，对DOM而言，Attribute和Property是完全不同的含义，只有特性场景下，两者才会互相关联（这里在后面我会详细讲解，今天的文章里我就不展开了）。</p><p>首先，我们可以把元素的Attribute当作字符串来看待，这样就有以下的API：</p><ul>\n<li>getAttribute</li>\n<li>setAttribute</li>\n<li>removeAttribute</li>\n<li>hasAttribute</li>\n</ul><p>如果你追求极致的性能，还可以把Attribute当作节点：</p><ul>\n<li>getAttributeNode</li>\n<li>setAttributeNode</li>\n</ul><p>此外，如果你喜欢property一样的访问attribute，还可以使用 attributes 对象，比如 document.body.attributes.class = “a” 等效于 document.body.setAttribute(“class”, “a”)。</p><h3>查找元素</h3><p>document节点提供了查找元素的能力。比如有下面的几种。</p><ul>\n<li>querySelector</li>\n<li>querySelectorAll</li>\n<li>getElementById</li>\n<li>getElementsByName</li>\n<li>getElementsByTagName</li>\n<li>getElementsByClassName</li>\n</ul><p>我们需要注意，getElementById、getElementsByName、getElementsByTagName、getElementsByClassName，这几个API的性能高于querySelector。</p><p>而 getElementsByName、getElementsByTagName、getElementsByClassName 获取的集合并非数组，而是一个能够动态更新的集合。</p><p>我们看一个例子：</p><pre><code>var collection = document.getElementsByClassName(\'winter\');\nconsole.log(collection.length);\nvar winter = document.createElement(\'div\');\nwinter.setAttribute(\'class\', \'winter\')\ndocument.documentElement.appendChild(winter)\nconsole.log(collection.length);\n</code></pre><p>在这段代码中，我们先获取了页面的className为winter的元素集合，不出意外的话，应该是空。</p><p>我们通过console.log可以看到集合的大小为0。之后我们添加了一个class为winter的div，这时候我们再看集合，可以发现，集合中出现了新添加的元素。</p><p>这说明浏览器内部是有高速的索引机制，来动态更新这样的集合的。所以，尽管querySelector系列的API非常强大，我们还是应该尽量使用getElement系列的API。</p><h2>遍历</h2><p>前面已经提到过，通过Node的相关属性，我们可以用JavaScript遍历整个树。实际上，DOM API中还提供了NodeIterator 和 TreeWalker 来遍历树。</p><p>比起直接用属性来遍历，NodeIterator 和 TreeWalker 提供了过滤功能，还可以把属性节点也包含在遍历之内。</p><p>NodeIterator的基本用法示例如下：</p><pre><code>var iterator = document.createNodeIterator(document.body, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_COMMENT, null, false);\nvar node;\nwhile(node = iterator.nextNode())\n{\n    console.log(node);\n}\n</code></pre><p>这个API的设计非常老派，这么讲的原因主要有两点，一是循环并没有类似“hasNext”这样的方法，而是直接以nextNode返回null来标志结束，二是第二个参数是掩码，这两个设计都是传统C语言里比较常见的用法。</p><p>放到今天看，这个迭代器无法匹配JavaScript的迭代器语法，而且JavaScript位运算并不高效，掩码的设计就徒增复杂性了。</p><p>这里请你注意一下这个例子中的处理方法，通常掩码型参数，我们都是用按位或运算来叠加。而针对这种返回null表示结束的迭代器，我使用了在while循环条件中赋值，来保证循环次数和调用next次数严格一致（但这样写可能违反了某些编码规范）。</p><p>我们再来看一下TreeWalker的用法。</p><pre><code>var walker = document.createTreeWalker(document.body, NodeFilter.SHOW_ELEMENT, null, false)\nvar node;\nwhile(node = walker.nextNode())\n{\n    if(node.tagName === &quot;p&quot;)\n        node.nextSibling();\n    console.log(node);\n}\n</code></pre><p>比起NodeIterator，TreeWalker多了在DOM树上自由移动当前节点的能力，一般来说，这种API用于“跳过”某些节点，或者重复遍历某些节点。</p><p>总的来说，我个人不太喜欢TreeWalker和NodeIterator这两个API，建议需要遍历DOM的时候，直接使用递归和Node的属性。</p><h2>Range</h2><p>Range API 是一个比较专业的领域，如果不做富文本编辑类的业务，不需要太深入。这里我们就仅介绍概念和给出基本用法的示例，你只要掌握即可。</p><p>Range API 表示一个HTML上的范围，这个范围是以文字为最小单位的，所以Range不一定包含完整的节点，它可能是Text节点中的一段，也可以是头尾两个Text的一部分加上中间的元素。</p><p>我们通过 Range API 可以比节点 API 更精确地操作 DOM 树，凡是 节点 API 能做到的，Range API都可以做到，而且可以做到更高性能，但是 Range API 使用起来比较麻烦，所以在实际项目中，并不常用，只有做底层框架和富文本编辑对它有强需求。</p><p>创建Range一般是通过设置它的起止来实现，我们可以看一个例子：</p><pre><code>var range = new Range(),\n    firstText = p.childNodes[1],\n    secondText = em.firstChild\nrange.setStart(firstText, 9) // do not forget the leading space\nrange.setEnd(secondText, 4)\n</code></pre><p>此外，通过 Range 也可以从用户选中区域创建，这样的Range用于处理用户选中区域:</p><pre><code>var range = document.getSelection().getRangeAt(0);\n</code></pre><p>更改 Range 选中区段内容的方式主要是取出和插入，分别由extractContents和insertNode来实现。</p><pre><code>var fragment = range.extractContents()\nrange.insertNode(document.createTextNode(&quot;aaaa&quot;))\n</code></pre><p>最后我们看一个完整的例子。</p><pre><code>var range = new Range(),\n    firstText = p.childNodes[1],\n    secondText = em.firstChild\nrange.setStart(firstText, 9) // do not forget the leading space\nrange.setEnd(secondText, 4)\n\nvar fragment = range.extractContents()\nrange.insertNode(document.createTextNode(&quot;aaaa&quot;))\n</code></pre><p>这个例子展示了如何使用range来取出元素和在特定位置添加新元素。</p><h2>总结</h2><p>在今天的文章中，我们一起了解了DOM API的内容。DOM API大致会包含4个部分。</p><ul>\n<li>节点：DOM树形结构中的节点相关API。</li>\n<li>事件：触发和监听事件相关API。</li>\n<li>Range：操作文字范围相关API。</li>\n<li>遍历：遍历DOM需要的API。</li>\n</ul><p>DOM API中还提供了NodeIterator 和 TreeWalker 来遍历树。比起直接用属性来遍历，NodeIterator 和 TreeWalker 提供了过滤功能，还可以把属性节点也包含在遍历之内。</p><p>除此之外，我们还谈到了Range的一些基础知识点，这里你掌握即可。</p><p>最后，我给你留了一个题目，请你用DOM API来实现遍历整个DOM树，把所有的元素的tagName打印出来。</p><hr></hr><h3>补充阅读：命名空间</h3><p>我们本课介绍的所有API，特意忽略了命名空间。</p><p>在HTML场景中，需要考虑命名空间的场景不多。最主要的场景是SVG。创建元素和属性相关的API都有带命名空间的版本：</p><ul>\n<li>document\n<ul>\n<li>createElementNS</li>\n<li>createAttributeNS</li>\n</ul>\n</li>\n<li>Element\n<ul>\n<li>getAttributeNS</li>\n<li>setAttributeNS</li>\n<li>getAttributeNodeNS</li>\n<li>setAttributeNodeNS</li>\n<li>removeAttributeNS</li>\n<li>hasAttributeNS</li>\n<li>attributes.setNamedItemNS</li>\n<li>attributes.getNamedItemNS</li>\n<li>attributes.removeNamedItemNS</li>\n</ul>\n</li>\n</ul><p>若要创建Document或者Doctype，也必须要考虑命名空间问题。DOM要求从document.implementation来创建。</p><ul>\n<li>document.implementation.createDocument</li>\n<li>document.implementation.createDocumentType</li>\n</ul><p>除此之外，还提供了一个快捷方式，你也可以动手尝试一下。</p><ul>\n<li>document.implementation.createHTMLDocument</li>\n</ul><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "浏览器DOM：你知道HTML的节点有哪几种吗？",
      },
      {
        title: "浏览器CSSOM：如何获取一个元素的准确位置",
        herf: "https://time.geekbang.org/column/article/86117",
        id: "86117",
        content:
          '<p>你好，我是winter。</p><p>在前面的课程中，我们已经学习了DOM相关的API，狭义的DOM API仅仅包含DOM树形结构相关的内容。今天，我们再来学习一类新的API：CSSOM。</p><p>我想，你在最初接触浏览器API的时候，应该都有跟我类似的想法：“好想要element.width、element.height这样的API啊”。</p><p>这样的API可以直接获取元素的显示相关信息，它们是非常符合人的第一印象直觉的设计，但是，偏偏 DOM API 中没有这样的内容。</p><p>随着学习的深入，我才知道，这样的设计是有背后的逻辑的，正如HTML和CSS分别承担了语义和表现的分工，DOM和CSSOM也有语义和表现的分工。</p><p>DOM中的所有的属性都是用来表现语义的属性，CSSOM的则都是表现的属性，width和height这类显示相关的属性，都属于我们今天要讲的CSSOM。</p><p>顾名思义，CSSOM是CSS的对象模型，在W3C标准中，它包含两个部分：描述样式表和规则等CSS的模型部分（CSSOM），和跟元素视图相关的View部分（CSSOM View）。</p><p>在实际使用中，CSSOM View比CSSOM更常用一些，因为我们很少需要用代码去动态地管理样式表。</p><!-- [[[read_end]]] --><p>在今天的文章中，我来分别为你介绍这两部分的API。</p><h2>CSSOM</h2><p>首先我们来介绍下CSS中样式表的模型，也就是CSSOM的本体。</p><p>我们通常创建样式表也都是使用HTML标签来做到的，我们用style标签和link标签创建样式表，例如：</p><pre><code>&lt;style title=&quot;Hello&quot;&gt;\na {\n  color:red;\n}\n&lt;/style&gt;\n&lt;link rel=&quot;stylesheet&quot; title=&quot;x&quot; href=&quot;data:text/css,p%7Bcolor:blue%7D&quot;&gt;\n</code></pre><p>我们创建好样式表后，还有可能要对它进行一些操作。如果我们以DOM的角度去理解的话，这些标签在DOM中是一个节点，它们有节点的内容、属性，这两个标签中，CSS代码有的在属性、有的在子节点。这两个标签也遵循DOM节点的操作规则，所以可以使用DOM API去访问。</p><p>但是，这样做的后果是我们需要去写很多分支逻辑，并且，要想解析CSS代码结构也不是一件简单的事情，所以，这种情况下，我们直接使用CSSOM API去操作它们生成的样式表，这是一个更好的选择。</p><p>我们首先了解一下CSSOM API的基本用法，一般来说，我们需要先获取文档中所有的样式表：</p><pre><code>document.styleSheets\n</code></pre><p>document的styleSheets属性表示文档中的所有样式表，这是一个只读的列表，我们可以用方括号运算符下标访问样式表，也可以使用item方法来访问，它有length属性表示文档中的样式表数量。</p><p>样式表只能使用style标签或者link标签创建（对XML来说，还可以使用<!--?xml-styleSheet ... ?-->，咱们暂且不表）。</p><p>我们虽然无法用CSSOM API来创建样式表，但是我们可以修改样式表中的内容。</p><pre><code class="language-JavaScript">document.styleSheets[0].insertRule("p { color:pink; }", 0)\ndocument.styleSheets[0].removeRule(0)\n</code></pre><p>更进一步，我们可以获取样式表中特定的规则（Rule），并且对它进行一定的操作，具体来说，就是使用它的cssRules属性来实现：</p><pre><code class="language-JavaScript">document.styleSheets[0].cssRules\n</code></pre><p>这里取到的规则列表，同样是支持item、length和下标运算。</p><p>不过，这里的Rules可就没那么简单了，它可能是CSS的at-rule，也可能是普通的样式规则。不同的rule类型，具有不同的属性。</p><p>我们在CSS语法部分，已经为你整理过at-rule的完整列表，多数at-rule都对应着一个rule类型：</p><ul>\n<li>CSSStyleRule</li>\n<li>CSSCharsetRule</li>\n<li>CSSImportRule</li>\n<li>CSSMediaRule</li>\n<li>CSSFontFaceRule</li>\n<li>CSSPageRule</li>\n<li>CSSNamespaceRule</li>\n<li>CSSKeyframesRule</li>\n<li>CSSKeyframeRule</li>\n<li>CSSSupportsRule</li>\n</ul><p>具体的规则支持的属性，建议你可以用到的时候，再去查阅MDN或者W3C的文档，在我们的文章中，仅为你详细介绍最常用的 CSSStyleRule。</p><p>CSSStyleRule有两个属性：selectorText 和 style，分别表示一个规则的选择器部分和样式部分。</p><p>selector部分是一个字符串，这里显然偷懒了没有设计进一步的选择器模型，我们按照选择器语法设置即可。</p><p>style部分是一个样式表，它跟我们元素的style属性是一样的类型，所以我们可以像修改内联样式一样，直接改变属性修改规则中的具体CSS属性定义，也可以使用cssText这样的工具属性。</p><p>此外，CSSOM还提供了一个非常重要的方法，来获取一个元素最终经过CSS计算得到的属性：</p><pre><code>window.getComputedStyle(elt, pseudoElt);\n</code></pre><p>其中第一个参数就是我们要获取属性的元素，第二个参数是可选的，用于选择伪元素。</p><p>好了，到此为止，我们可以使用CSSOM API自由地修改页面已经生效的样式表了。接下来，我们来一起关注一下视图的问题。</p><h2>CSSOM View</h2><p>CSSOM View 这一部分的API，可以视为DOM API的扩展，它在原本的Element接口上，添加了显示相关的功能，这些功能，又可以分成三个部分：窗口部分，滚动部分和布局部分，下面我来分别带你了解一下。</p><h2>窗口 API</h2><p>窗口API用于操作浏览器窗口的位置、尺寸等。</p><ul>\n<li>moveTo(x, y) 窗口移动到屏幕的特定坐标；</li>\n<li>moveBy(x, y) 窗口移动特定距离；</li>\n<li>resizeTo(x, y) 改变窗口大小到特定尺寸；</li>\n<li>resizeBy(x, y) 改变窗口大小特定尺寸。</li>\n</ul><p>此外，窗口API还规定了 window.open() 的第三个参数：</p><pre><code>window.open(&quot;about:blank&quot;, &quot;_blank&quot; ,&quot;width=100,height=100,left=100,right=100&quot; )\n</code></pre><p>一些浏览器出于安全考虑没有实现，也不适用于移动端浏览器，这部分你仅需简单了解即可。下面我们来了解一下滚动API。</p><h2>滚动 API</h2><p>要想理解滚动，首先我们必须要建立一个概念，在PC时代，浏览器可视区域的滚动和内部元素的滚动关系是比较模糊的，但是在移动端越来越重要的今天，两者必须分开看待，两者的性能和行为都有区别。</p><h3>视口滚动API</h3><p>可视区域（视口）滚动行为由window对象上的一组API控制，我们先来了解一下：</p><ul>\n<li>scrollX 是视口的属性，表示X方向上的当前滚动距离，有别名 pageXOffset；</li>\n<li>scrollY 是视口的属性，表示Y方向上的当前滚动距离，有别名 pageYOffset；</li>\n<li>scroll(x, y) 使得页面滚动到特定的位置，有别名scrollTo，支持传入配置型参数 {top, left}；</li>\n<li>scrollBy(x, y) 使得页面滚动特定的距离，支持传入配置型参数 {top, left}。</li>\n</ul><p>通过这些属性和方法，我们可以读取视口的滚动位置和操纵视口滚动。不过，要想监听视口滚动事件，我们需要在document对象上绑定事件监听函数：</p><pre><code>document.addEventListener(&quot;scroll&quot;, function(event){\n  //......\n})\n</code></pre><p>视口滚动API是页面的顶层容器的滚动，大部分移动端浏览器都会采用一些性能优化，它和元素滚动不完全一样，请大家一定建立这个区分的意识。</p><h3>元素滚动API</h3><p>接下来我们来认识一下元素滚动API，在Element类（参见DOM部分），为了支持滚动，加入了以下API。</p><ul>\n<li>scrollTop 元素的属性，表示Y方向上的当前滚动距离。</li>\n<li>scrollLeft 元素的属性，表示X方向上的当前滚动距离。</li>\n<li>scrollWidth 元素的属性，表示元素内部的滚动内容的宽度，一般来说会大于等于元素宽度。</li>\n<li>scrollHeight 元素的属性，表示元素内部的滚动内容的高度，一般来说会大于等于元素高度。</li>\n<li>scroll(x, y) 使得元素滚动到特定的位置，有别名scrollTo，支持传入配置型参数 {top, left}。</li>\n<li>scrollBy(x, y) 使得元素滚动到特定的位置，支持传入配置型参数 {top, left}。</li>\n<li>scrollIntoView(arg) 滚动元素所在的父元素，使得元素滚动到可见区域，可以通过arg来指定滚到中间、开始或者就近。</li>\n</ul><p>除此之外，可滚动的元素也支持scroll事件，我们在元素上监听它的事件即可：</p><pre><code>element.addEventListener(&quot;scroll&quot;, function(event){\n  //......\n})\n</code></pre><p>这里你需要注意一点，元素部分的API设计与视口滚动命名风格上略有差异，你在使用的时候不要记混。</p><h2>布局API</h2><p>最后我们来介绍一下布局API，这是整个CSSOM中最常用到的部分，我们同样要分成全局API和元素上的API。</p><h3>全局尺寸信息</h3><p>window对象上提供了一些全局的尺寸信息，它是通过属性来提供的，我们一起来了解一下来这些属性。</p><p><img src="https://static001.geekbang.org/resource/image/b6/10/b6c7281d86eb7214edf17069f95ae610.png" alt=""></p><ul>\n<li>\n<p>window.innerHeight, window.innerWidth 这两个属性表示视口的大小。</p>\n</li>\n<li>\n<p>window.outerWidth, window.outerHeight 这两个属性表示浏览器窗口占据的大小，很多浏览器没有实现，一般来说这两个属性无关紧要。</p>\n</li>\n<li>\n<p>window.devicePixelRatio 这个属性非常重要，表示物理像素和CSS像素单位的倍率关系，Retina屏这个值是2，后来也出现了一些3倍的Android屏。</p>\n</li>\n<li>\n<p>window.screen （屏幕尺寸相关的信息）</p>\n<ul>\n<li>window.screen.width, window.screen.height 设备的屏幕尺寸。</li>\n<li>window.screen.availWidth, window.screen.availHeight 设备屏幕的可渲染区域尺寸，一些Android机器会把屏幕的一部分预留做固定按钮，所以有这两个属性，实际上一般浏览器不会实现的这么细致。</li>\n<li>window.screen.colorDepth, window.screen.pixelDepth 这两个属性是固定值24，应该是为了以后预留。</li>\n</ul>\n</li>\n</ul><p>虽然window有这么多相关信息，在我看来，我们主要使用的是innerHeight、innerWidth和devicePixelRatio三个属性，因为我们前端开发工作只需要跟视口打交道，其它信息大概了解即可。</p><h3>元素的布局信息</h3><p>最后我们来到了本节课一开始提到的问题，我们是否能够取到一个元素的宽（width）和高（height）呢？</p><p>实际上，我们首先应该从脑中消除“元素有宽高”这样的概念，我们课程中已经多次提到了，有些元素可能产生多个盒，事实上，只有盒有宽和高，元素是没有的。</p><p>所以我们获取宽高的对象应该是“盒”，于是CSSOM View为Element类添加了两个方法：</p><ul>\n<li>getClientRects();</li>\n<li>getBoundingClientRect()。</li>\n</ul><p>getClientRects 会返回一个列表，里面包含元素对应的每一个盒所占据的客户端矩形区域，这里每一个矩形区域可以用 x, y, width, height 来获取它的位置和尺寸。</p><p>getBoundingClientRect ，这个API的设计更接近我们脑海中的元素盒的概念，它返回元素对应的所有盒的包裹的矩形区域，需要注意，这个API获取的区域会包括当overflow为visible时的子元素区域。</p><p>根据实际的精确度需要，我们可以选择何时使用这两个API。</p><p>这两个API获取的矩形区域都是相对于视口的坐标，这意味着，这些区域都是受滚动影响的。</p><p>如果我们要获取相对坐标，或者包含滚动区域的坐标，需要一点小技巧：</p><pre><code class="language-JavaScript">var offsetX = document.documentElement.getBoundingClientRect().x - element.getBoundingClientRect().x;\n</code></pre><p>如这段代码所示，我们只需要获取文档跟节点的位置，再相减即可得到它们的坐标。</p><p>这两个API的兼容性非常好，定义又非常清晰，建议你如果是用JavaScript实现视觉效果时，尽量使用这两个API。</p><h2>结语</h2><p>今天我们一起学习了CSSOM这一类型的API。我们首先就说到了，就像HTML和CSS分别承担了语义和表现的分工，DOM和CSSOM也有语义和表现的分工。</p><p>CSSOM是CSS的对象模型，在W3C标准中，它包含两个部分：描述样式表和规则等CSS的模型部分（CSSOM），和跟元素视图相关的View部分（CSSOM View）。</p><p>最后留给你一个问题，写好欢迎留言来讨论，请找一个网页，用我们今天讲的API，把页面上的所有盒的轮廓画到一个canvas元素上。</p><h1>猜你喜欢</h1><p><a href="https://time.geekbang.org/course/intro/163?utm_term=zeusMTA7L&amp;utm_source=app&amp;utm_medium=chongxueqianduan&amp;utm_campaign=163-presell"><img src="https://static001.geekbang.org/resource/image/1a/08/1a49758821bdbdf6f0a8a1dc5bf39f08.jpg" alt="unpreview"></a></p>',
        article_title: "浏览器CSSOM：如何获取一个元素的准确位置",
      },
      {
        title: "浏览器事件：为什么会有捕获过程和冒泡过程？",
        herf: "https://time.geekbang.org/column/article/90485",
        id: "90485",
        content:
          '<p>你好，我是winter。这一节课，我们进入了浏览器的部分，一起来学习一下事件。</p><h2>事件概述</h2><p>在开始接触具体的API之前，我们要先了解一下事件。一般来说，事件来自输入设备，我们平时的个人设备上，输入设备有三种：</p><ul>\n<li>键盘；</li>\n<li>鼠标；</li>\n<li>触摸屏。</li>\n</ul><p><strong>这其中，触摸屏和鼠标又有一定的共性，它们被称作pointer设备，所谓pointer设备，是指它的输入最终会被抽象成屏幕上面的一个点。</strong>但是触摸屏和鼠标又有一定区别，它们的精度、反应时间和支持的点的数量都不一样。</p><p>我们现代的UI系统，都源自WIMP系统。WIMP即Window Icon Menu Pointer四个要素，它最初由施乐公司研发，后来被微软和苹果两家公司应用在了自己的操作系统上（关于这个还有一段有趣的故事，我附在文末了）。</p><p>WIMP是如此成功，以至于今天很多的前端工程师会有一个观点，认为我们能够“点击一个按钮”，实际上并非如此，我们只能够点击鼠标上的按钮或者触摸屏，是操作系统和浏览器把这个信息对应到了一个逻辑上的按钮，再使得它的视图对点击事件有反应。这就引出了我们第一个要讲解的机制：捕获与冒泡。</p><h2>捕获与冒泡</h2><p>很多文章会讲到捕获过程是从外向内，冒泡过程是从内向外，但是这里我希望讲清楚，为什么会有捕获过程和冒泡过程。</p><!-- [[[read_end]]] --><p>我们刚提到，实际上点击事件来自触摸屏或者鼠标，鼠标点击并没有位置信息，但是一般操作系统会根据位移的累积计算出来，跟触摸屏一样，提供一个坐标给浏览器。</p><p>那么，把这个坐标转换为具体的元素上事件的过程，就是捕获过程了。而冒泡过程，则是符合人类理解逻辑的：当你按电视机开关时，你也按到了电视机。</p><p>所以我们可以认为，捕获是计算机处理事件的逻辑，而冒泡是人类处理事件的逻辑。</p><p>以下代码展示了事件传播顺序：</p><pre><code class="language-HTML">&lt;body&gt;\n  &lt;input id="i"/&gt;\n&lt;/body&gt;\n</code></pre><pre><code class="language-JavaScript">document.body.addEventListener("mousedown", () =&gt; {\n  console.log("key1")\n}, true)\n\ndocument.getElementById("i").addEventListener("mousedown", () =&gt; {\n  console.log("key2")\n}, true)\n\ndocument.body.addEventListener("mousedown", () =&gt; {\n  console.log("key11")\n}, false)\n\ndocument.getElementById("i").addEventListener("mousedown", () =&gt; {\n  console.log("key22")\n}, false)\n</code></pre><p>我们监听了body和一个body的子元素上的鼠标按下事件，捕获和冒泡分别监听，可以看到，最终产生的顺序是：</p><ul>\n<li>“key1”</li>\n<li>“key2”</li>\n<li>“key22”</li>\n<li>“key11”</li>\n</ul><p>这是捕获和冒泡发生的完整顺序。</p><p>在一个事件发生时，捕获过程跟冒泡过程总是先后发生，跟你是否监听毫无关联。</p><p>在我们实际监听事件时，我建议这样使用冒泡和捕获机制：默认使用冒泡模式，当开发组件时，遇到需要父元素控制子元素的行为，可以使用捕获机制。</p><p>理解了冒泡和捕获的过程，我们再看监听事件的API，就非常容易理解了。</p><p>addEventListener有三个参数：</p><ul>\n<li>事件名称；</li>\n<li>事件处理函数；</li>\n<li>捕获还是冒泡。</li>\n</ul><p>事件处理函数不一定是函数，也可以是个JavaScript具有handleEvent方法的对象，看下例子：</p><pre><code class="language-JavaScript">var o = {\n  handleEvent: event =&gt; console.log(event)\n}\ndocument.body.addEventListener("keydown", o, false);\n</code></pre><p>第三个参数不一定是bool值，也可以是个对象，它提供了更多选项。</p><ul>\n<li>once：只执行一次。</li>\n<li>passive：承诺此事件监听不会调用preventDefault，这有助于性能。</li>\n<li>useCapture：是否捕获（否则冒泡）。</li>\n</ul><p>实际使用，在现代浏览器中，还可以不传第三个参数，我建议默认不传第三个参数，因为我认为冒泡是符合正常的人类心智模型的，大部分业务开发者不需要关心捕获过程。除非你是组件或者库的使用者，那就总是需要关心冒泡和捕获了。</p><h2>焦点</h2><p>我们讲完了pointer事件是由坐标控制，而我们还没有讲到键盘事件。</p><p>键盘事件是由焦点系统控制的，一般来说，操作系统也会提供一套焦点系统，但是现代浏览器一般都选择在自己的系统内覆盖原本的焦点系统。</p><p>焦点系统也是视障用户访问的重要入口，所以设计合理的焦点系统是非常重要的产品需求，尤其是不少国家对可访问性有明确的法律要求。</p><p>在旧时代，有一个经典的问题是如何去掉输入框上的虚线框，这个虚线框就是Windows焦点系统附带的UI表现。</p><p>现在Windows的焦点已经不是用虚线框表示了，但是焦点系统的设计几十年间没有太大变化。</p><p>焦点系统认为整个UI系统中，有且仅有一个“聚焦”的元素，所有的键盘事件的目标元素都是这个聚焦元素。</p><p>Tab键被用来切换到下一个可聚焦的元素，焦点系统占用了Tab键，但是可以用JavaScript来阻止这个行为。</p><p>浏览器API还提供了API来操作焦点，如：</p><pre><code class="language-JavaScript">document.body.focus();\n\ndocument.body.blur();\n</code></pre><p>其实原本键盘事件不需要捕获过程，但是为了跟pointer设备保持一致，也规定了从外向内传播的捕获过程。</p><h2>自定义事件</h2><p>除了来自输入设备的事件，还可以自定义事件，实际上事件也是一种非常好的代码架构，但是DOM API中的事件并不能用于普通对象，所以很遗憾，我们只能在DOM元素上使用自定义事件。</p><p>自定义事件的代码示例如下（来自MDN）：</p><pre><code class="language-JavaScript">var evt = new Event("look", {"bubbles":true, "cancelable":false});\ndocument.dispatchEvent(evt);\n</code></pre><p>这里使用Event构造器来创造了一个新的事件，然后调用dispatchEvent来在特定元素上触发。<br>\n我们可以给这个Event添加自定义属性、方法。</p><p>注意，这里旧的自定义事件方法（使用document.createEvent和initEvent）已经被废弃。</p><h2>总结</h2><p>今天这一节课，我们讲了浏览器中的事件。</p><p>我们分别介绍了事件的捕获与冒泡机制、焦点机制和自定义事件。</p><p>捕获与冒泡机制来自pointer设备输入的处理，捕获是计算机处理输入的逻辑，冒泡是人类理解事件的思维，捕获总是在冒泡之前发生。</p><p>焦点机制则来自操作系统的思路，用于处理键盘事件。除了我们讲到的这些，随着输入设备的不断丰富，还有很多新的事件加入，如Geolocation和陀螺仪等。</p><p>最后给你留个小问题。请你找出你所知道的所有事件类型，和它们的目标元素类型。</p><h2>WIMP的小故事</h2><p>WIMP是由Alan Kay主导设计的，这位巨匠，同时也是面向对象之父和Smalltalk语言之父。</p><p>乔布斯曾经受邀参观施乐，他见到当时的WIMP界面，认为非常惊艳，不久后就领导苹果研究了新一代麦金塔系统。</p><p>后来，在某次当面对话中，乔布斯指责比尔盖茨抄袭了WIMP的设计，盖茨淡定地回答：“史蒂夫，我觉得应该用另一种方式看待这个问题。这就像我们有个叫施乐的有钱邻居，当我闯进去想偷走电视时，却发现你已经这么干了。”</p><p>但是不论如何，苹果和微软的数十代操作系统，极大地发展了这个体系，才有了我们今天的UI界面。</p><p></p>',
        article_title: "浏览器事件：为什么会有捕获过程和冒泡过程？",
      },
      {
        title: "浏览器API（小实验）：动手整理全部API",
        herf: "https://time.geekbang.org/column/article/90998",
        id: "90998",
        content:
          '<p>你好，我是winter。今天我们来讲讲浏览器API。</p><p>浏览器的API数目繁多，我们在之前的课程中，已经一起学习了其中几个比较有体系的部分：比如之前讲到过的DOM和CSSOM等等。但是，如果你留意过，会发现我们讲到的API仍然是标准中非常小的一部分。</p><p>这里，我们不可能把课程变成一本厚厚的API参考手册，所以这一节课，我设计了一个实验，我们一起来给API分分类。</p><p>我们按照每个API所在的标准来分类。所以，我们用代码来反射浏览器环境中全局对象的属性，然后我们用JavaScript的filter方法来逐步过滤掉已知的属性。</p><p>接下来，我们整理API的方法如下：</p><ul>\n<li>从Window的属性中，找到API名称；</li>\n<li>查阅MDN或者Google，找到API所在的标准；</li>\n<li>阅读标准，手工或者用代码整理出标准中包含的API；</li>\n<li>用代码在Window的属性中过滤掉标准中涉及的API。</li>\n</ul><p>重复这个过程，我们可以找到所有的API对应的标准。首先我们先把前面已经讲过的API过滤掉。</p><p>##JavaScript中规定的API</p><p>大部分的API属于Window对象（或者说全局对象），我们可以用反射来看一看现行浏览器中已经实现的API，我这里使用Mac下的Chrome 72.0.3626.121版本。</p><!-- [[[read_end]]] --><p>我们首先调用 Object.getOwnPropertyNames(window)。在我的环境中，可以看到，共有821个属性。</p><p>这里包含了JavaScript标准规定的属性，我们做一下过滤：</p><pre><code class="language-JavaScript">{\n    let js = new Set();\n    let objects = ["BigInt", "BigInt64Array", "BigUint64Array", "Infinity", "NaN", "undefined", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "Array", "Date", "RegExp", "Promise", "Proxy", "Map", "WeakMap", "Set", "WeakSet", "Function", "Boolean", "String", "Number", "Symbol", "Object", "Error", "EvalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError", "ArrayBuffer", "SharedArrayBuffer", "DataView", "Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray", "Atomics", "JSON", "Math", "Reflect", "escape", "unescape"];\n    objects.forEach(o =&gt; js.add(o));\n    let names = Object.getOwnPropertyNames(window)\n    names = names.filter(e =&gt; !js.has(e));\n}\n</code></pre><p>这一部分我们已经在JavaScript部分讲解过了（JavaScript对象：你知道全部的对象分类吗），所以这里我就采用手工的方式过滤出来。</p><h2>DOM中的元素构造器</h2><p>接下来我们看看已经讲过的DOM部分，DOM部分包含了document属性和一系列的构造器，我们可以用JavaScript的prototype来过滤构造器。</p><pre><code class="language-JavaScript">    names = names.filter( e =&gt; {\n        try { \n            return !(window[e].prototype instanceof Node)\n        } catch(err) {\n            return true;\n        }\n    }).filter( e =&gt; e != "Node")\n</code></pre><p>这里我们把所有Node的子类都过滤掉，再把Node本身也过滤掉，这是非常大的一批了。</p><h2>Window对象上的属性</h2><p>接下来我们要找到Window对象的定义，我们在下面链接中可以找到。</p><ul>\n<li><a href="https://html.spec.whatwg.org/#window">https://html.spec.whatwg.org/#window</a></li>\n</ul><p>这里有一个Window接口，是使用WebIDL定义的，我们手工把其中的函数和属性整理出来，如下：</p><pre><code>\n window,self,document,name,location,history,customElements,locationbar,menubar, personalbar,scrollbars,statusbar,toolbar,status,close,closed,stop,focus, blur,frames,length,top,opener,parent,frameElement,open,navigator,applicationCache,alert,confirm,prompt,print,postMessage\n</code></pre><p>接下来，我们编写代码，把这些函数和属性，从浏览器Window对象的属性中去掉，JavaScript代码如下：</p><pre><code class="language-JavaScript">{\n    let names = Object.getOwnPropertyNames(window)\n    let js = new Set();\n    let objects = ["BigInt", "BigInt64Array", "BigUint64Array", "Infinity", "NaN", "undefined", "eval", "isFinite", "isNaN", "parseFloat", "parseInt", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "Array", "Date", "RegExp", "Promise", "Proxy", "Map", "WeakMap", "Set", "WeakSet", "Function", "Boolean", "String", "Number", "Symbol", "Object", "Error", "EvalError", "RangeError", "ReferenceError", "SyntaxError", "TypeError", "URIError", "ArrayBuffer", "SharedArrayBuffer", "DataView", "Float32Array", "Float64Array", "Int8Array", "Int16Array", "Int32Array", "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray", "Atomics", "JSON", "Math", "Reflect", "escape", "unescape"];\n    objects.forEach(o =&gt; js.add(o));\n    names = names.filter(e =&gt; !js.has(e));\n\n    names = names.filter( e =&gt; {\n        try { \n            return !(window[e].prototype instanceof Node)\n        } catch(err) {\n            return true;\n        }\n    }).filter( e =&gt; e != "Node")\n\n    let windowprops = new Set();\n    objects = ["window", "self", "document", "name", "location", "history", "customElements", "locationbar", "menubar", " personalbar", "scrollbars", "statusbar", "toolbar", "status", "close", "closed", "stop", "focus", " blur", "frames", "length", "top", "opener", "parent", "frameElement", "open", "navigator", "applicationCache", "alert", "confirm", "prompt", "print", "postMessage", "console"];\n    objects.forEach(o =&gt; windowprops.add(o));\n    names = names.filter(e =&gt; !windowprops.has(e));\n}\n</code></pre><p>我们还要过滤掉所有的事件，也就是on开头的属性。</p><pre><code class="language-JavaScript">names = names.filter( e =&gt; !e.match(/^on/))\n</code></pre><p>webkit前缀的私有属性我们也过滤掉：</p><pre><code class="language-JavaScript">names = names.filter( e =&gt; !e.match(/^webkit/))\n</code></pre><p>除此之外，我们在HTML标准中还能找到所有的接口，这些我们也过滤掉：</p><pre><code class="language-JavaScript">\n    let interfaces = new Set();\n    objects = ["ApplicationCache", "AudioTrack", "AudioTrackList", "BarProp", "BeforeUnloadEvent", "BroadcastChannel", "CanvasGradient", "CanvasPattern", "CanvasRenderingContext2D", "CloseEvent", "CustomElementRegistry", "DOMStringList", "DOMStringMap", "DataTransfer", "DataTransferItem", "DataTransferItemList", "DedicatedWorkerGlobalScope", "Document", "DragEvent", "ErrorEvent", "EventSource", "External", "FormDataEvent", "HTMLAllCollection", "HashChangeEvent", "History", "ImageBitmap", "ImageBitmapRenderingContext", "ImageData", "Location", "MediaError", "MessageChannel", "MessageEvent", "MessagePort", "MimeType", "MimeTypeArray", "Navigator", "OffscreenCanvas", "OffscreenCanvasRenderingContext2D", "PageTransitionEvent", "Path2D", "Plugin", "PluginArray", "PopStateEvent", "PromiseRejectionEvent", "RadioNodeList", "SharedWorker", "SharedWorkerGlobalScope", "Storage", "StorageEvent", "TextMetrics", "TextTrack", "TextTrackCue", "TextTrackCueList", "TextTrackList", "TimeRanges", "TrackEvent", "ValidityState", "VideoTrack", "VideoTrackList", "WebSocket", "Window", "Worker", "WorkerGlobalScope", "WorkerLocation", "WorkerNavigator"];\n    objects.forEach(o =&gt; interfaces.add(o));\n\n    names = names.filter(e =&gt; !interfaces.has(e));\n\n</code></pre><p>这样过滤之后，我们已经过滤掉了所有的事件、Window对象、JavaScript全局对象和DOM相关的属性，但是，竟然还剩余了很多属性！你是不是很惊讶呢？好了，接下来我们才进入今天的正题。</p><h2>其它属性</h2><p>这些既不属于Window对象，又不属于JavaScript语言的Global对象的属性，它们究竟是什么呢？</p><p>我们可以一个一个来查看这些属性，来发现一些我们以前没有关注过的标准。</p><p>首先，我们要把过滤的代码做一下抽象，写成一个函数：</p><pre><code class="language-JavaScript">function filterOut(names, props) {\n    let set = new Set();\n    props.forEach(o =&gt; set.add(o));\n    return names.filter(e =&gt; !set.has(e));\n}\n</code></pre><p>每次执行完filter函数，都会剩下一些属性，接下来，我们找到剩下的属性来看一看。</p><h3>ECMAScript 2018 Internationalization API</h3><p>在我的浏览器环境中，第一个属性是：Intl。</p><p>查找这些属性来历的最佳文档是MDN，当然，你也可以使用Google。</p><p>总之，经过查阅，我发现，它属于ECMA402标准，这份标准是JavaScript的一个扩展，它包含了国际化相关的内容：</p><ul>\n<li><a href="http://www.ecma-international.org/ecma-402/5.0/index.html#Title">http://www.ecma-international.org/ecma-402/5.0/index.html#Title</a></li>\n</ul><p>ECMA402中，只有一个全局属性Intl，我们也把它过滤掉：</p><pre><code class="language-JavaScript">names = names.filter(e =&gt; e != "Intl")\n</code></pre><p>再来看看还有什么属性。</p><h3>Streams标准</h3><p>接下来我看到的属性是： ByteLengthQueuingStrategy。</p><p>同样经过查阅，它来自WHATWG的Streams标准：<br>\n<a href="https://streams.spec.whatwg.org/#blqs-class">https://streams.spec.whatwg.org/#blqs-class</a></p><p>不过，跟ECMA402不同，Streams标准中还有一些其它属性，这里我手工查阅了这份标准，并做了整理。</p><p>接下来，我们用代码把它们跟 ByteLengthQueuingStrategy 一起过滤掉：</p><pre><code class="language-JavaScript">names = filterOut(names, ["ReadableStream", "ReadableStreamDefaultReader", "ReadableStreamBYOBReader", "ReadableStreamDefaultController", "ReadableByteStreamController", "ReadableStreamBYOBRequest", "WritableStream", "WritableStreamDefaultWriter", "WritableStreamDefaultController", "TransformStream", "TransformStreamDefaultController", "ByteLengthQueuingStrategy", "CountQueuingStrategy"]);\n</code></pre><p>好了，过滤之后，又少了一些属性，我们继续往下看。</p><h3>WebGL</h3><p>接下来我看到的属性是：WebGLContext​Event。</p><p>显然，这个属性来自WebGL标准：</p><ul>\n<li><a href="https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15">https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15</a></li>\n</ul><p>我们在这份标准中找到了一些别的属性，我们把它一起过滤掉：</p><pre><code class="language-JavaScript">names = filterOut(names, ["WebGLContextEvent","WebGLObject", "WebGLBuffer", "WebGLFramebuffer", "WebGLProgram", "WebGLRenderbuffer", "WebGLShader", "WebGLTexture", "WebGLUniformLocation", "WebGLActiveInfo", "WebGLShaderPrecisionFormat", "WebGLRenderingContext"]);\n</code></pre><p>过滤掉WebGL，我们继续往下看。</p><h3>Web Audio API</h3><p>下一个属性是 WaveShaperNode。这个属性名听起来就跟声音有关，这个属性来自W3C的Web Audio API标准。</p><p>我们来看一下标准：</p><ul>\n<li><a href="https://www.w3.org/TR/webaudio/">https://www.w3.org/TR/webaudio/</a></li>\n</ul><p>Web Audio API中有大量的属性，这里我用代码做了过滤。得到了以下列表：</p><pre><code>[&quot;AudioContext&quot;, &quot;AudioNode&quot;, &quot;AnalyserNode&quot;, &quot;AudioBuffer&quot;, &quot;AudioBufferSourceNode&quot;, &quot;AudioDestinationNode&quot;, &quot;AudioParam&quot;, &quot;AudioListener&quot;, &quot;AudioWorklet&quot;, &quot;AudioWorkletGlobalScope&quot;, &quot;AudioWorkletNode&quot;, &quot;AudioWorkletProcessor&quot;, &quot;BiquadFilterNode&quot;, &quot;ChannelMergerNode&quot;, &quot;ChannelSplitterNode&quot;, &quot;ConstantSourceNode&quot;, &quot;ConvolverNode&quot;, &quot;DelayNode&quot;, &quot;DynamicsCompressorNode&quot;, &quot;GainNode&quot;, &quot;IIRFilterNode&quot;, &quot;MediaElementAudioSourceNode&quot;, &quot;MediaStreamAudioSourceNode&quot;, &quot;MediaStreamTrackAudioSourceNode&quot;, &quot;MediaStreamAudioDestinationNode&quot;, &quot;PannerNode&quot;, &quot;PeriodicWave&quot;, &quot;OscillatorNode&quot;, &quot;StereoPannerNode&quot;, &quot;WaveShaperNode&quot;, &quot;ScriptProcessorNode&quot;, &quot;AudioProcessingEvent&quot;]\n</code></pre><p>于是我们把它们也过滤掉：</p><pre><code class="language-JavaScript">\nnames = filterOut(names, ["AudioContext", "AudioNode", "AnalyserNode", "AudioBuffer", "AudioBufferSourceNode", "AudioDestinationNode", "AudioParam", "AudioListener", "AudioWorklet", "AudioWorkletGlobalScope", "AudioWorkletNode", "AudioWorkletProcessor", "BiquadFilterNode", "ChannelMergerNode", "ChannelSplitterNode", "ConstantSourceNode", "ConvolverNode", "DelayNode", "DynamicsCompressorNode", "GainNode", "IIRFilterNode", "MediaElementAudioSourceNode", "MediaStreamAudioSourceNode", "MediaStreamTrackAudioSourceNode", "MediaStreamAudioDestinationNode", "PannerNode", "PeriodicWave", "OscillatorNode", "StereoPannerNode", "WaveShaperNode", "ScriptProcessorNode", "AudioProcessingEvent"]);\n</code></pre><p>我们继续看下一个属性。</p><h3>Encoding标准</h3><p>在我的环境中，下一个属性是 TextDecoder，经过查阅得知，这个属性也来自一份WHATWG的标准，Encoding：</p><ul>\n<li><a href="https://encoding.spec.whatwg.org/#dom-textencoder">https://encoding.spec.whatwg.org/#dom-textencoder</a></li>\n</ul><p>这份标准仅仅包含四个接口，我们把它们过滤掉：</p><pre><code class="language-JavaScript">names = filterOut(names, ["TextDecoder", "TextEncoder", "TextDecoderStream", "TextEncoderStream"]);\n</code></pre><p>我们继续来看下一个属性。</p><h3>Web Background Synchronization</h3><p>下一个属性是 SyncManager，这个属性比较特殊，它并没有被标准化，但是我们仍然可以找到它的来源文档：</p><ul>\n<li><a href="https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface">https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface</a></li>\n</ul><p>这个属性我们就不多说了，过滤掉就好了。</p><h3>Web Cryptography API</h3><p>我们继续看下去，下一个属性是 SubtleCrypto，这个属性来自Web Cryptography API，也是W3C的标准。</p><ul>\n<li><a href="https://www.w3.org/TR/WebCryptoAPI/">https://www.w3.org/TR/WebCryptoAPI/</a></li>\n</ul><p>这份标准中规定了三个Class和一个Window对象的扩展，给Window对象添加了一个属性crypto。</p><pre><code class="language-JavaScript">names = filterOut(names, ["CryptoKey", "SubtleCrypto", "Crypto", "crypto"]);\n</code></pre><p>我们继续来看。</p><h3>Media Source Extensions</h3><p>下一个属性是 SourceBufferList，它来自于：</p><ul>\n<li><a href="https://www.w3.org/TR/media-source/">https://www.w3.org/TR/media-source/</a></li>\n</ul><p>这份标准中包含了三个接口，这份标准还扩展了一些接口，但是没有扩展window。</p><pre><code class="language-JavaScript">names = filterOut(names, ["MediaSource", "SourceBuffer", "SourceBufferList"]);\n</code></pre><p>我们继续看下一个属性。</p><h3>The Screen Orientation API</h3><p>下一个属性是ScreenOrientation，它来自W3C的The Screen Orientation API标准：</p><ul>\n<li><a href="https://www.w3.org/TR/screen-orientation/">https://www.w3.org/TR/screen-orientation/</a></li>\n</ul><p>它里面只有ScreenOrientation一个接口，也是可以过滤掉的。</p><h2>结语</h2><p>到 Screen Orientation API，我这里看到还剩300余个属性没有处理，剩余部分，我想把它留给大家自己来完成。</p><p>我们可以看到，在整理API的过程中，我们可以找到各种不同组织的标准，比如：</p><ul>\n<li>ECMA402标准来自 ECMA；</li>\n<li>Encoding标准来自WHATWG；</li>\n<li>WebGL标准来自 Khronos；</li>\n<li>Web Cryptography标准来自 W3C；</li>\n<li>还有些API，根本没有被标准化。</li>\n</ul><p>浏览器环境的API，正是这样复杂的环境。我们平时编程面对的环境也是这样的一个环境。</p><p>所以，面对如此繁复的API，我建议在系统掌握DOM、CSSOM的基础上，你可以仅仅做大概的浏览和记忆，根据实际工作需要，选择其中几个来深入学习。</p><p>做完这个实验，你对Web API的理解应该会有很大提升。</p><p>这一节课的问题就是完成所有的API到标准的归类，不同的浏览器环境应该略有不同，欢迎你把自己的结果留言一起讨论。</p><p></p>',
        article_title: "浏览器API（小实验）：动手整理全部API",
      },
    ],
  },
  {
    chapterTitle: "模块四：前端综合应用 (5讲)",
    children: [
      {
        title: "性能：前端的性能到底对业务数据有多大的影响？",
        herf: "https://time.geekbang.org/column/article/94156",
        id: "94156",
        content:
          '<p>你好，我是winter。</p><p>从今天开始，我们就从前端知识学习的部分，过渡到了实践部分。这节课我来谈谈性能。</p><p>性能是个特别有意思的话题，在我之前的工作中，从入门的初级工程师到高级别的技术专家，大家都很喜欢谈性能，我以前参与晋升评审，每年总能听到很多关于性能的晋升述职。</p><p>那么，今天我就来谈谈我眼中的性能。</p><h2>性能总论</h2><blockquote>\n<p>while循环快还是for循环快？</p>\n</blockquote><blockquote>\n<p>|0 是不是比 Math.floor 性能好？</p>\n</blockquote><p>网上随处可以见到一类对性能的讨论。一些新人也非常热衷此类讨论。但是实际上，它们除了让你写代码的时候纠结之外，毫无意义。</p><p>为什么这样讲呢？我想讲一个小故事。</p><p>从前有个工程师，特别注重代码细节，有一天他发现系统中的一段代码写的性能很差，因此，他用汇编重写了整段代码，执行效率足足提升了三倍。但是最后，大家发现，用户反馈性能丝毫没有提高，因为他优化的那个进程名字叫“System Idle”。</p><p>所以你看，性能优化不能只着眼于局部的代码。这里，我要提出一个我的观点：<strong>一切没有profiling的性能都是耍流氓</strong>。凡是真正有价值的性能优化，必定是从端到端的业务场景建立体系来考虑的。</p><p>在我的认识中，性能体系的建立可以分成以下几部分：</p><ul>\n<li>现状评估和建立指标；</li>\n<li>技术方案；</li>\n<li>执行；</li>\n<li>结果评估和监控。</li>\n</ul><!-- [[[read_end]]] --><p>下面，我就来为你一一讲解。</p><h2>现状评估和建立指标</h2><p>要想做好性能优化，正确地评估现状和建立指标是最关键的一步，它又往往是会被轻视的一步。</p><p>作为一个工程师，指标又要考虑两个因素。一方面，对用户来说，什么样的性能指标能更好地评估它的体验？另一方面，对公司来说，什么样的指标会影响业务价值呢？</p><p>在我公布答案之前，我希望你能思考一下，你所负责的业务，是否有前端性能指标？它是否能够满足我上面提到的两个要求？</p><p>在我之前的工作中，整个用了长达一年的时间来探索，才找到了合适的指标，并且回答好了两个问题。</p><p>性能问题可以分成很多方面，最重要的几个点是：</p><ul>\n<li>页面加载性能；</li>\n<li>动画与操作性能；</li>\n<li>内存、电量消耗。</li>\n</ul><p><strong>注意，这里我们仅仅是对“性能”两个字的分析和解读，在对大量的用户数据分析后，我们发现，其实这三部分中，“页面加载性能”跟用户的流失率有非常强的关联性，而用户流失率，正是公司业务非常看重的指标。</strong></p><p>因此，在开始阶段，我们决定把性能优化的重点放在页面加载性能上。</p><p>那么，用什么指标来衡量页面加载性能呢？最容易想到的方案是“用户平均加载时间”，事实上，我们在相当长的一段时间，也都是在使用用户平均加载时间作为性能指标。</p><p>但是，很快我们发现，这个指标有严重的问题：</p><ul>\n<li>当加载时间低于一定数字，用户体感差别不大了，我们经过一定的研究，认为这个数字大约是1秒；</li>\n<li>少数超长时间加载的用户（如2G），会极大影响整个指标，即指标不能反映大多数用户的体验。</li>\n</ul><p>于是，基于以上分析，我们设计了一个新的指标——秒开率，即一秒之内打开的用户占用户总量的百分比。这个指标后来逐渐推广到整个公司，甚至影响到了一些业内的其它企业，现在，谈秒开率已经是个非常自然的事情了，但是当初的设计确实走了不少弯路。</p><h2>技术方案</h2><p>有了指标，我们就有了优化的目标，接下来，就到了技术出场的环节了。</p><p>我们这里还是以加载过程为例，来讲解一下。</p><p>首先我们要简单分析一下，从输入URL后按下回车，到底发生了什么。</p><p>我们在浏览器的原理课程中，已经讲解了浏览器大致的工作过程，但是，我们必须理解几件事：</p><ul>\n<li>从域名到IP地址，需要用DNS协议查询；</li>\n<li>HTTP协议是用TCP传输的，所以会有TCP建立连接过程；</li>\n<li>如果使用HTTPS，还有有HTTPS交换证书；</li>\n<li>每个网页还有图片等请求。</li>\n</ul><p>从这个分析和实际试验的结果看，网页的加载时间，不但跟体积有关系，还跟请求数有很大关系，因此，我们最终设计的技术方案大约可以这样划分：</p><p><img src="https://static001.geekbang.org/resource/image/6b/f2/6b5051c452af8c3db5fbb8ba6b9e34f2.jpg" alt=""></p><p>这里仅仅列出了性能优化的一部分技术方案，是我认为比较重要的部分，可以看到，这里涉及的并不仅仅是前端技术，有服务端、客户端、设计师团队，所以要想做好性能优化，绝对不能把自己限制在局部的视角，必须是整个业务一起考虑，才能有良好的收效。</p><h2>执行</h2><p>技术方案设计好了，它是不会自己变成线上页面的，所以，有了技术方案，我们只完成了一半的工作，接下来我们还需要一个执行过程。</p><p>执行也不简单，如果说方案主要靠技术，那么执行就是靠工程实施了。</p><p>根据公司的实际情况，工程实施可能有不同的程度，我把工程水平从低到高分成三个阶段：</p><ul>\n<li>纯管理；</li>\n<li>制度化；</li>\n<li>自动化。</li>\n</ul><p>纯行政管理，是由经理用纯粹的管理手段来执行方案，比如说，作为前端团队的Leader，我可以组织会议，要求整个团队使用我们前面谈的技术方案。</p><p>但是纯行政管理有一些问题，一方面，需要的行政资源不一定有，比如我没法强制让后端团队配合我，另一方面，纯粹的管理方式，团队本身的体验并不好，也不利于团队成长，最重要的是，纯粹管理方式容易造成执行不到位。这样的执行方式多数出现在非技术岗位。</p><p>制度化执行方式是用规则代替人的命令，指定责任人，通过培训、checklist、定期review等具体措施来保证实施。制度化执行可以极大地减轻管理工作量，一般现代互联网公司都会采用类似的方式。但是制度化执行方式还有很大成分是依靠人的主动性的，对程序员来说，还有更好的方式：自动化。</p><p>自动化的方式是在一些重要的操作路径上设置规则，针对我们的性能优化，有两个点适合做这件事：一个是把开发好的页面发布上线，另一个是开发好的页面URL投放到首页等处的链接。</p><p>在我之前的工作中，我们跟测试团队配合，开发了一套页面性能打分系统，它会自动扫面页面上的可优化点，并且跟发布平台和投放平台合作，把它加入日常机制中。现在多数公司都会采用制度化和自动化结合的执行方案。</p><h2>结果评估和监控</h2><p>执行完了之后，<strong>就要向老板汇报争取升职加薪了</strong>，还要有一定的结果总结，才是一个完整的工程实施，而且，凡是工程实施，肯定要有一定长效机制，不能优化完了退化，这些都要求有线上监控机制。</p><p>要想做线上监控，分两个部分：</p><ul>\n<li>数据采集；</li>\n<li>数据展现。</li>\n</ul><p>数据采集部分，同样需要发布平台或者开发工具来配合，对性能数据来说，Performance API非常好用，它是浏览器记录的性能数据，一般来说，我们用统一的代码把它上传到服务器端就够用了。</p><p>数据的展现部分就比较自由了，可以用不同的数据可视化方案来展现性能数据，没有一定之规。一般的数据监控平台，会提供报警机制，对性能来说，报警需求不是特别强烈，但是也可以设置一些条件，针对秒开率特别低的网页报警。</p><p>有了监控，再配合一定制度，就可以保障整个团队产出的性能了，要注意，性能不是一个静态的事情，指标需要不断优化，技术方案还需要不断随着技术发展迭代，制度、自动化工具也需要不断改进，最终的监控平台产品也不能不做新需求，所以性能应该成为一个团队的日常工作的一部分，持续进行。</p><h2>总结</h2><p>今天我们学习了前端团队工程实施中的性能体系，首先我们介绍了总体思想：性能应该是基于业务和实际用户体验需求的一种工程实施，不是纯粹的技术游戏。</p><p>接下来我们分成四个步骤介绍了性能工程体系，首先介绍了现状评估和建立指标，建立指标应当从业务的角度考虑，接下来讲了技术方案设计，技术方案应当从整体角度，基于Profiling的结果分析来设计。</p><p>之后我们讲了实施，我们讲了工程实施的三个层次：纯管理、制度化、工程化，最后，我们讲了结果评估和线上监控，线上监控需要从数据采集和数据展现两个部分分别实现。</p><p>最后，留一个小问题，请你为自己的团队和业务设计一下性能的整体方案，欢迎来留言分享。</p><p></p>',
        article_title: "性能：前端的性能到底对业务数据有多大的影响？",
      },
      {
        title: "工具链：什么样的工具链才能提升团队效率？",
        herf: "https://time.geekbang.org/column/article/94644",
        id: "94644",
        content:
          "<p>你好，我是winter。今天我们的主题是工具。</p><p>古语云：“工欲善其事，必先利其器”，程序员群体对工具的爱好和重视是一个悠久的传统。简单趁手的工具是程序员开发的好帮手。</p><p>但是在工程方面，工具不仅仅是简单的“趁手”即可，假如一个团队人人都自己发明几个小工具，那么后果将会是灾难性的：同一个团队的同学无法互相配合写代码，一旦有人离职，可能某一个项目就永远无法跑起来了。</p><p>所以我们今天从工程的角度谈一谈工具体系的规划。</p><h2>工具总论</h2><p>跟性能不同，工具体系并非业务结果，所以我们没法用简单的数据指标来衡量工具，它的结果更多程度是一种开发体验：帮助技术团队内的同学提升效率和体验。</p><p>作为工程体系，我们考虑工具的时候同样要遵循基本规则：现状与指标、方案、实施、结果和监控。</p><p>不过，对工具而言，指标和结果都是一种“软性指标”，也就是团队的开发效率和开发体验。这里我不太推荐把开发效率和开发体验过度数据化，我的经验是：开发效率提升n倍永远是一种臆想或者主观论断。</p><h2>工具体系的目标</h2><p>前面已经讲到，工具是为技术团队本身服务的工程体系，那么，工具的目标是什么呢？其实每一种工具的出现，必然都有一个非常具体的目标，比如npm帮助我们进行包管理，Yeoman帮助我们初始化项目模板。</p><!-- [[[read_end]]] --><p>但是这些目标是工具的目标，不是工具体系的目标。我们做一个假设，<strong>假如你是一个前端团队的工具体系负责人，现在要你来规划团队的工具体系，你会怎么做呢？</strong></p><p>如果你到社区找了一大堆工具，并且把它们要解决的问题都罗列出来，作为工具体系的目标，那就完全走上了错误的道路。</p><p>实际上，在考虑具体的工具之前，我们应该解决工具体系的“元问题”，即：我们对工具本身的要求是什么？</p><p><strong>考虑到工程行为都是团队合作，我们对工具最基本的要求就是：版本一致。</strong></p><p>只有整个团队的工具版本一致，至少要做到避免大版本差异，才能做到互相接手代码时，团队成员能够正确的使用工具开发。</p><p><strong>工具体系的另一个重要需求是：避免冲突</strong>，一些工具可能互相没有干扰，比如Yeoman和gulp，有一些工具则由社区设计了配合方案，比如webpack和babel，有一些工具，则存在着根本性冲突，如gulp和grunt。</p><p>所以，在谈及具体问题之前，我们必须要有这两个要求的解决方案。<strong>这就需要引入一个新的概念：工具链。</strong></p><p>工具链是一系列互相配合的工具，能够协作完成开发任务（注：工具链这个词最早是由C/C++程序员引入的概念，一般包含编译、链接、调试等工具）。</p><p>下面我们就来谈谈工具链的设计。</p><h2>工具体系的设计</h2><p>要想设计一个工具链，首先我们需要整理一下，前端开发大约要做哪些事，下面是我的答案：</p><ul>\n<li>初始化项目；</li>\n<li>运行和调试；</li>\n<li>测试（单元测试）；</li>\n<li>发布。</li>\n</ul><p>那么，一个前端项目的工具链，大约就会包含这些功能。一个典型的社区项目工具链可能就类似下面这样：</p><ul>\n<li>Yeoman</li>\n<li>webpack</li>\n<li>ava/nyc</li>\n<li>aws-cli</li>\n</ul><p>但是，这显然不够，我们还需要一种机制，保证团队使用的工具版本一致。</p><p>轻量级的做法是，在项目初始化模板中定义npm script并且在npm dev-dependency中规定它的版本号。</p><p>重量级的做法是，开发一个包装工具，在命令行中不直接使用命令，而使用包装过的命令。如在我之前的团队，使用的工具名为def，它规定了一些命令：</p><ul>\n<li>def init</li>\n<li>def dev</li>\n<li>def test</li>\n<li>def publish</li>\n</ul><p>这样，工具链的使用者只需指定工具链名称，就不需要知道项目具体使用了哪些工具，这样只需要专注自己的需求就够了。</p><p>同时，统一的命令行入口，意味着整个团队不需要互相学习工具链，就可以接手别人的项目开发。</p><p>在稍微大一些的团队内部，往往会需要不止一种开发模式，如移动开发和桌面开发，这样，所需要的工具链也不一样，因此我们需要多条工具链。</p><p>要想开发新的工具链，可以使用复制分支的方式来扩展原来的工具链。在我原来的工作中，不同的工具链被称作“套件”，每一种套件对应着一组互相配合的工具。</p><h2>工具体系的执行</h2><p>因为工具体系服务的是团队内部成员，所以执行非常简单，同时，工具体系的入口是初始化项目，所以只要初始化工具在手，可以控制其它所有工具。</p><p>我们在性能的那一课里，已经讲过工程体系的执行分成三个层次：纯管理、制度化和自动化。</p><p>工具体系因为其自身特性，可以说是最容易做到自动化的一个体系了。</p><h2>工具体系的监控</h2><p>工具体系的结果虽然是软性的，也不能完全不做监控。</p><p>纯粹的社区方案比较难做到监控，但是如果我们使用了前面提到的统一命令行入口包装，那么就可以做一些简单的统计工作了。</p><p>一般来说，以下指标跟开发者体验较为相关：</p><ul>\n<li>调试/构建次数；</li>\n<li>构建平均时长；</li>\n<li>使用的工具版本；</li>\n<li>发布次数。</li>\n</ul><p>在我之前的工作中，工具团队曾经从构建平均时长数据中发现构建效率问题，对webpack做了大量深度优化来改善开发体验。</p><p>同时，工具的相关数据还能够帮助发现一些问题，比如某个项目频繁发布，可能说明它风险很高。工具的相关数据还能帮我们发现老旧的工具，如果某个套件使用频率极低，则可以考虑把它下线。</p><p>总之，工具体系的监控不仅仅是衡量工具体系的好帮手，也是非常珍贵的研发数据，里面有很多可挖掘的价值。</p><h2>总结</h2><p>这一课，我们讲解了工具相关的工程知识。</p><p>我们仍然从目标、方案设计、执行和结果四个方面来讲解，工具体系的目标除了单个工具解决具体问题之外，还要注意一致性和配合问题，因此我们需要工具链。</p><p>工具链一般会涵盖研发阶段的各个主要操作。工具体系的执行比较简单，很容易就可以做到完全的自动化。工具体系的监控同样非常重要，工具的监控除了帮助我们改进工具体系，对研发体系的其它部分也有帮助。</p><p>最后，请你思考下自己所在的团队，是否已经建立了工具体系？听完了今天的课程，你认为它有哪些可改进的部分？</p><p></p>",
        article_title: "工具链：什么样的工具链才能提升团队效率？",
      },
      {
        title: "持续集成：几十个前端一起工作，如何保证工作质量？",
        herf: "https://time.geekbang.org/column/article/94979",
        id: "94979",
        content:
          "<p>你好，我是winter。今天我们来聊聊持续集成。</p><p>持续集成是近现代软件工程中的一个非常重要的概念。它是指在软件开发过程中，以定期或者实时的方式，集成所有人的工作成果，做统一的构建和测试。</p><p>与持续集成相对的做法是：独立开发各个模块，在软件开发的最终阶段才做集成。持续集成的优势是及早处理集成阶段的问题，使软件质量和开发进度可控。</p><p>现在持续集成还有升级版本：持续交付和持续部署，这些因为需要更为完善的基础设施，目前很少有公司前端团队可以用上，我们暂且不谈。</p><p>传统的持续集成概念诞生于桌面客户端开发，在Web前端领域，由于技术和产品形态的差别，我们需要构建的持续集成体系也有一些区别。</p><h2>持续集成总论</h2><p>传统软件的持续集成主要有以下措施。</p><ul>\n<li>daily build：每日构建，开发者每天提交代码到代码仓库，构建一个可运行的版本。</li>\n<li>build verification test（BVT）：构建验证测试，每日构建版本出来后，运行一组自动化的测试用例，保证基本功能可用。</li>\n</ul><p>对于前端来说，有一些现实的区别：</p><ul>\n<li>前端代码按页面自然解耦，大部分页面都是单人开发；</li>\n<li>前端构建逻辑简单，一般开发阶段都保证构建成功，不需要构建；</li>\n<li>前端代码一般用于开发界面，测试自动化成本极高；</li>\n<li>前端页面跳转，是基于url，没有明确的产品边界。</li>\n</ul><!-- [[[read_end]]] --><p>基于以上分析，传统的持续集成方案放在前端，要么不需要，要么不适用，要么实施成本高，因此我们不能套用传统的持续集成理论，而需要重新思考前端领域的持续集成体系。</p><h2>持续集成的目标</h2><p>前面我们已经分析过，每日构建不需要，前端构建验证测试成本过高难以实施，那么我们是不是可以有一些代替的措施呢？</p><p>首先我们要确定前端持续集成的目标，我们回到持续集成的根本理念，一是要及早集成代码形成可测试的版本，二是通过一定的测试来验证提交的代码的有效性。</p><h2>持续集成的方案</h2><p>我们进一步思考，前端持续集成如何完成这两个目标呢？</p><p>前端代码不需要构建，或者说只需要单页面构建，但是页面与页面之间的跳转是用url构成的，所以我们的可测试的版本，不可能通过“构建”来获得。</p><p>我们只能通过“发布”来获得一个前端代码的可执行版本，在传统语境中，“发布”的目标是线上生产环境，这显然不行。于是，我们就需要一个预览环境，来做一种“虚拟发布”的操作。</p><p>我们再来考虑一下，为界面编写自动化测试用例成本很高，那么如何代替构建验证测试呢？</p><p>我们回忆一下，在性能一课，我有讲过，页面的性能可以通过一些自动化工具来分析，还可以通过一些数据采集方案来发现性能问题，对于预览环境前端页面，我们可以采用同样的措施。</p><p>除了基于页面结构的分析和数据采集，我们还可以扫描代码。</p><p>综上，我认为前端的持续集成的措施应该是这样的：</p><ul>\n<li>预览环境，代替每日构建，前端每次（或指定次）提交代码到仓库都同步到预览环境，保证预览环境总是可用；</li>\n<li>规则校验，代替构建验证测试，通过数据采集（如前面提到的性能数据）和代码扫描，保证提交的代码满足一定的质量要求。</li>\n</ul><p>接下来，让我来详细介绍一下预览环境的设计和规则校验的设计。</p><h3>预览环境</h3><p>前端代码发布到线上生产环境需要有线上的机器和域名，而预览环境同样需要机器和域名，不过，只需要在公司内网即可。</p><p>所以建立预览环境的第一步就是申请机器和域名，我们需要运维协助，在预览环境的机器上部署Web应用服务器。</p><p>有了预览环境的机器，下一步就是建立预览环境发布机制。</p><p>有些公司使用脚本发布，有些公司使用git hook，有些公司则使用一个Web应用平台，进行白屏操作，因为各个公司的发布机制千差万别，我这里没办法讲解具体的方案。这里我建议，预览环境的机器发布流程应该跟线上发布保持一致，这样可以最大程度降低成本和降低心智负担。</p><p>预览环境的部署和发布机制建立是最基本的需求，在实际应用中，情况要复杂的多，可能需要多个预览环境同时存在。</p><p>比如，测试工程师可能要求一个相对稳定的环境来测试，这是一个合理的诉求，比如，全公司大部分业务都可能依赖登录页面，一旦登录页面在频繁发布导致一些预览环境的故障，可能全公司都没办法工作了。</p><p>又比如，当服务端工程师联调时，会希望前端的预览环境跟服务端的预览环境对接，而当服务端的代码部署到线上生产环境后，可能又需要前端的预览环境跟服务端线上环境对接。</p><p>这些问题都是我曾经遇到过的非常现实的问题，如果今天回过头来设计，我认为应该设计一套带参数和版本号的预览环境，为测试提供特定版本的预览环境，用参数解决那些跟服务端API对接问题，但是任何系统都不可能从一开始就设计完善，所以，建议你把重心放到建立预览环境的基本需求上来。</p><h3>规则校验</h3><p>接下来我们讲讲规则校验，规则校验可以分成三种措施：</p><ul>\n<li>页面结构扫描；</li>\n<li>运行时数据采集；</li>\n<li>代码扫描。</li>\n</ul><p>页面结构扫描可以使用无头浏览器（如phantomjs）配合一些JavaScript代码编写的规则来完成。</p><p>运行时数据采集，可以通过在页面插入公共js文件的方式来完成，最基本的是用Performance API来采集性能数据，用window.onerror来采集js错误。</p><p>代码扫描，社区有一些现成的方案，比如JSHint，你可以根据实际需要，选择社区方案或者自研。</p><h2>持续集成的实施</h2><p>持续集成的实施，是必须严格做到自动化和制度化的。我们可以通过上节课讲的工具来完成持续集成。其它部分，都可以通过工具和制度来完成，这里需要重点讲的是规则校验中的规则部分。</p><p>我们刚刚讲解的规则校验仅仅是搭建好了平台，而规则本身，我们需要先形成一个共识，然后在前端团队内部形成一定的更新机制。</p><p>这里，我建议用issue的方式来管理规则的提案，可以在周会或者月会上讨论，充分保证整个团队对校验规则的一致意见。</p><p>这里，我们必须警惕三种错误：</p><ul>\n<li>少数人拍脑袋决定校验规则；</li>\n<li>一成不变的校验规则；</li>\n<li>频繁无规律变化的校验规则。</li>\n</ul><p>只有经过民主讨论、定期更新的校验规则，才能在团队中起到积极作用。校验规则决定了整个前端团队的开发体验，所以必须非常慎重。</p><h2>持续集成的结果</h2><p>持续集成机制的建立本身就可以视为一种结果，它能够让整个团队的代码质量有一个基本的保障，提前发现问题，统一代码风格，从而带来开发体验和效率的提升。</p><p>此外，持续集成的结果也能够以数据的方式呈现出整个开发团队的健康状态，这是管理者会非常关注的一个点。</p><h2>总结</h2><p>今天我们讲解了持续集成，持续集成这个概念最早来自桌面客户端软件开发，应用到前端领域，会有一定的变化。这里我提出了一个预览环境+规则校验的前端持续集成体系。</p><p>预览环境需要申请机器和域名、部署和建立发布机制，规则校验有三种方法：结构扫描、数据采集和代码扫描。</p><p>持续集成的实施需要重点关注校验规则部分，要建立一个民主讨论、定期更新的校验规则。持续集成机制的建立就是其结果本身，此外，系统中产生的数据也可以有一定管理价值。</p><p>最后留一个问题，你所在的团队，是否有做持续集成呢？请你设计或者改进这个持续集成方案。</p><p></p>",
        article_title: "持续集成：几十个前端一起工作，如何保证工作质量？",
      },
      {
        title: "搭建系统：大量的低价值需求应该如何应对？",
        herf: "https://time.geekbang.org/column/article/95469",
        id: "95469",
        content:
          "<p>你好，我是winter。</p><p>不知道你在工作中有没有遇到过这样的事情：一个运营找过来说，有一个紧急又简单的临时活动页面要做，希望打断现有的产品开发节奏临时插入。</p><p>这类页面技术难度不高，业务上通常属于“紧急不重要”的事情。</p><p>这些需求技术上没挑战，线上存在时间短，上线时间紧又没有任何调整空间，它们往往会成为前端团队里人人都不喜欢的“垃圾需求”，谁要是接了这种需求，就只能自认倒霉。</p><p>但是，这些真的是垃圾需求吗？换个视角来看，我认为它反而是宝藏。</p><p>所谓工程师，就是为了解决这些问题而存在的岗位，我们从工程的视角来看，“大量紧急不重要的页面”，才是真正的需求，现在需求有了，我们就应该按照工程的方式，定目标、设计方案、做实施、拿结果来解决问题。这就是我们今天要讲的搭建系统。</p><h2>搭建系统的目标</h2><p>搭建系统的目标是解决大量的简单页面生产问题。衡量这个目标的指标应该是生产页面的数量，这部分非常的明确，你如果要做搭建系统，可以根据业务的体量和服务的范围来决定具体的指标要求。</p><h2>搭建系统的设计</h2><p>搭建系统设计大概有几种流派，这里我介绍几种常见的搭建系统的设计。</p><p>第一种，是模板化搭建，由前端工程师生产页面模板，再由运营提供数据来完成页面，可以用以下公式来理解：</p><!-- [[[read_end]]] --><blockquote>\n<p>模板 + 数据 = 页面</p>\n</blockquote><p>模板化搭建是一种简单的思路，它的优点是整个系统实现简单。</p><p>第二种思路是，模块化搭建，由前端工程师生产模块，由运营把模块和数据组织成页面。</p><p>第三种思路，是数据驱动界面，这是一种比较新的思路，即数据中包含了展现自身所需要的模块相关的信息，本身决定了界面。</p><p>但是不论何种流派，都可以认为是数据、模块、模板、页面几种实体的相互作用，下面我就来详细讲解一下这几样实体。</p><h3>数据</h3><p>数据是用于展现界面所需要的信息。</p><p>我们按照数据用途，可以分成界面配置数据和内容数据。</p><ul>\n<li>界面配置数据：决定了页面上颜色、尺寸、位置、图片、文字等展现形式的数据，通常是以页面为单位的配置。</li>\n<li>内容数据：页面要展示的信息，如电商活动页面的商品信息、文章的文字信息等。</li>\n</ul><p>按照数据来源，我们又可以分成运营人员手工填写的数据和来自API产生的数据。</p><ul>\n<li>运营手工填写固定数据：运营人员依靠自己的专业技能决定的数据，可能包含线下招商信息、商品选品、文章等。</li>\n<li>来自API的数据：\n<ul>\n<li>固定数据，由服务端逻辑到指定存储处获取的数据；</li>\n<li>用户相关数据，由算法系统或者服务端逻辑，根据用户信息或者用户喜好推荐的数据。</li>\n</ul>\n</li>\n</ul><p>搭建系统本身是个产品，我们针对数据这个实体，要设计增、删、改、查的能力，根据我们以上的分析，搭建系统的数据部分有两个难点。</p><p>第一个难点是数据的手工编辑能力，现在一般的数据都会采用JSON格式，JSON格式中有数字、字符串、数组、对象、布尔等数据类型，我们需要根据数据的格式定义为每一种类型设计编辑器。</p><p>但是仅仅是基本类型还不够，我们实际开发中，还需要跟实际业务结合来设计编辑器，下面，我就把我在之前的工作中设计的数据编辑器列一下。</p><ul>\n<li>整数：整数编辑器，可用HTML原生输入框<code>&lt;input type=number min=1 max=100/&gt;</code>实现。</li>\n<li>数字：数字编辑器，可用<code>&lt;input type=number min=1.0 max=100.0/&gt;</code>实现</li>\n<li>字符串：字符串编辑器，可用<code>&lt;input /&gt;</code>实现。</li>\n<li>URL：URL编辑器，可用<code>&lt;input /&gt;</code>配合格式校验。</li>\n<li>图片：图片编辑器，需要自研图片上传功能。</li>\n<li>固定字段对象：对象和字段编辑器，可用多个<code>&lt;input /&gt;</code>和<code>&lt;label&gt;</code>实现。</li>\n<li>布尔型：开关，可用<code>&lt;select&gt;</code>或者自研组件实现。</li>\n<li>自由字段对象：需要自研KV输入组件。</li>\n<li>数组：需要自研列表组件实现。</li>\n<li>对象数组：需要自研表格组件或者列表组件实现。</li>\n<li>矩形区域：需要自研区域选择组件。</li>\n</ul><p>这里要注意JSON是一个级联的格式，所以对象、数组中很可能需要插入各种不同的数据类型的编辑器，这部分技术上有一定挑战。此外，实践中，对象数组很多时候都来自Excel数据，Excel导入也是非常重要的。</p><p>第二个难点则是跟服务端API的对接，对于服务端系统统一性较好的公司，这不是什么难事，对服务端系统比较奔放的公司，如果服务端API调用方式不统一，就非常麻烦了。这一块只能根据实际情况见招拆招，我这里没办法详细介绍，</p><h3>模板</h3><p>模板可以简单得理解成挖了许多坑的页面，它一般是由前端工程师来生产的一种实体。与数据之间的连接是数据的格式，对JSON格式来说，JSON Schema是社区接受度较高的一个方案。</p><p>最简单的模板可以用字符串模板来设计，复杂一点的模板则可以由JavaScript进行渲染，通过约定全局变量名称或者约定调用函数入口做到把数据传递给模板，你可以根据实际需求复杂程度选择合适的方案。</p><p>需要注意，在产品设计上，模板可不是“增、删、改、查”那么简单，考虑到实际工程需要，模板必须是版本化的，也就是说，前端每发布一个模板，都需要永久性存储一条记录，并且产品设计上必须保持可以回滚，这样，一旦线上发现问题，可以迅速回滚到一个可工作的版本，有效降低不可用时长。</p><p>此外，模板设计还有批量更新的需求，一些运营活动可能包含数百个页面，它们使用同一套模板，产品设计上必须要注意提供批量更新机制。</p><h3>模块</h3><p>模块跟模板非常相似，但是从产品的角度，模块是可组合的。跟模板相似的部分如数据连接、版本化发布、批量更新等，这里就不再赘述。</p><p>模块化搭建有额外的技术难点，就是可拖拽的模块编辑器，移动端搭建布局相对简单，可以通过简单的自上而下布局和拖拽改变位置来实现。</p><p>桌面的模块拖拽比较复杂，一般都会采用一些变通的思路简化设计，如提供几种固定的布局模板，提供布局容器，或者采用纯绝对定位布局。</p><p>在一些产品设计中，会先用模块拼成模板，再指定数据源，这种模式中的“模块”，我们认为是一种开发模板的技术方案，跟我们此处讲的产品上的模块概念不同。因为在我们的认知中，模板应该是由前端工程师产生的，具有复用性的一种实体。</p><h3>页面</h3><p>不论是模板搭建还是模块搭建，我们的最终生产的目标都是页面。页面同样需要版本化发布，便于回滚。</p><p>页面部分实现的难点是跟发布系统的结合，在我们前面讲的所有产品实体中，模板、模块、数据都是存储在搭建系统本身的，但是页面不一样，页面必须要提供线上服务，所以页面是要发布到线上生产环境的。</p><p>如我们上一课讲的，假设前端持续集成系统有校验规则，页面也必须经过这个过程。</p><p>在我之前的工作中，是通过自建静态Web服务器+CDN回源的方式来支撑搭建系统的线上应用的。</p><p>因为服务器上只发布静态内容，并且有CDN挡住用户流量，所以只需要少量几台线上机器即可。</p><h2>搭建系统的实施</h2><p>在我工作的实践中，搭建系统的实施可以说是所有系统中最容易的了，对多数公司来说搭建系统是一种刚性需求，只要完成了产品开发，立刻会有大量的用户。</p><p>所以只要正确识别了需求，搭建系统的推行几乎完全不需要担心。</p><h2>搭建系统的监控</h2><p>作为一个工具型技术产品，搭建系统同样会产生大量有价值的数据，搭建系统的用户访问和生产页面数量是衡量自身的重要指标。</p><h2>总结</h2><p>本课我为你讲解了搭建系统，搭建系统是为了应对大量简单页面的生产需求而设计的一种工具型产品，它的目标非常明确，就是快速生产大量的页面。</p><p>方案上，它重点和难点在于几个产品实体的设计，数据部分重点在于编辑器和跟服务端API的对接，模板部分则主要是版本化和数据的格式定义，模块除了模板的重点，还有拖拽系统，最终产生的页面主要的难点是跟生产环境的对接。</p><p>搭建系统的实施主要是把产品在做出来，一般来讲推广是非常自然的事情，最后，搭建系统产生的数据监控关键的指标是用户访问数和生产页面数。</p><p>本课的思考问题是，请你分析一下你们公司是否有搭建系统的需求，尝试用本课的知识来设计或者改进一下你们的搭建系统。</p><p></p>",
        article_title: "搭建系统：大量的低价值需求应该如何应对？",
      },
      {
        title: "前端架构：前端架构有哪些核心问题？",
        herf: "https://time.geekbang.org/column/article/95833",
        id: "95833",
        content:
          "<p>你好，我是winter，今天我们来谈谈架构。</p><p>在传统桌面软件开发中，架构师是一种通过设计架构保证团队能够良好分工和有序工作的岗位。</p><p>在工程领域，我们凡是要做点什么事儿，都会有明确的目的性，这个目的性，一定是为了完成生产服务业务的。</p><p>为什么桌面软件开发需要架构师和架构设计呢？因为桌面软件开发具有高度的复杂性，如果没有架构，就没法分解成互相耦合低的模块来分工。</p><p>所以一般来说，架构是为了分工而存在的。但是到了前端领域，这个问题是否还存在呢？答案是，不存在。</p><p>前端是个天然按照页面解耦的技术，在多页面架构中，页面的复杂度大约刚好适合一个人的工作量。（所以，我们的结论是，前端根本不需要架构设计。当然，我这句话是开玩笑的。）</p><p>前端不存在分工问题，但是在多人协同时，仍然要解决质量和效率的问题，这就需要组件化了。除此之外还有前端特有的兼容性问题，也是需要从架构的角度去解决的。</p><p>对于一些追求极致的团队来说，会挑战“单页面应用”，通过单页面应用来提升用户体验，单页面应用的升级版本是谷歌提出的PWA，PWA既是业务方案也是技术方案，在技术层面，它近乎苛刻地规定了网页的各方面的体验标准。</p><p>前端领域还有一个特有的生态：框架，第一代前端框架（如jQuery, PrototypeJS）重点解决了兼容问题和API的易用性问题，在现代浏览器普及之后，这些问题逐渐变得不存在或者不重要，所以第二代前端框架（如Vue，Angular，React）重点解决了组件化问题。选择合适的框架，可以节约架构的成本，还能够享受社区资源。</p><!-- [[[read_end]]] --><p>本节课，我会围绕前端架构的几个核心问题，为你介绍前端架构工作。</p><p>首先我们来讲讲组件化。</p><h2>组件化</h2><p>组件化讲起来是个非常简单的概念，前端主要的开发工作是UI开发，而把UI上的各种元素分解成组件，规定组件的标准，实现组件运行的环境就是组件化了。</p><p>现行的组件化方案，目前有五种主流选择：</p><ul>\n<li>Web Component；</li>\n<li>Vue；</li>\n<li>React；</li>\n<li>Angular；</li>\n<li>自研。</li>\n</ul><p>Web Component 是W3C推行的规范，理论上是未来的选项；但是实际上这份标准的状态堪忧，Shadow DOM 的设计比较复杂，一般的前端掌握起来都比较困难。</p><p>此外，CSS也比较难以应用，需要依靠CSS Houdini。目前来说，我还没有看到那个前端团队实际在使用Web Component作为组件化方案。当然，它的优势也非常明显：不需要任何额外的运行时支持，就能在现代浏览器环境运行，也可以跟HTML无缝结合。</p><p>Vue 是目前最受欢迎的框架（从github star来看），由华人程序员尤小右开发和维护。它有两个主要特点，一个是比较符合原本的JavaScript/CSS/HTML书写习惯；另一个是它绑定了MVVM模式，直接确定了UI架构，通过DSL的支持，数据交互非常简洁。</p><p>React 是Facebook推行的新一代Web框架。它利用JSX模式，把HTML、CSS和JavaScript都放进了js文件中，对于不喜欢CSS和HTML的前端工程师来说，是很理想的。它还可以迁移到React Native，直接编写简单的客户端应用。</p><p>Angular 是Google推出的Web框架，它是比较标准的MVVM模式。Angular曾经因为大版本兼容性而饱受诟病，目前它的核心竞争力是与TypeScript结合得较好。</p><p>上面是我对几种方案的简单介绍。但是实际上，我们做技术选型时的主要依据是团队的现状，开发移动端还是桌面端、是否跟Native结合、团队成员的技能分布都是需要考虑的因素，这些框架本身的特点，目前我认为仅仅是一种偏好选项，而不是关键因素。</p><h2>兼容性和适配性</h2><p>前端开发的特有问题就是兼容性，到了移动时代，需要面对不同的机型，我们又需要解决适配性问题。</p><p>兼容性问题到2011年左右都是前端的主旋律，但是在之后，随着现代浏览器的逐渐普及，兼容性问题逐渐减小，所以我们这里就不多谈兼容性问题了。</p><p>适配问题主要适配的是屏幕的三个要素。</p><ul>\n<li>单位英寸像素数（Pixel Per Inch，PPI）：现实世界的一英寸内像素数，决定了屏幕的显示质量。</li>\n<li>设备像素比率（Device Pixel Ratio，DPR）：物理像素与逻辑像素（px）的对应关系。</li>\n<li>分辨率（Resolution）：屏幕区域的宽高所占像素数。</li>\n</ul><p>在当前环境下，分辨率适配可以使用vw单位解决，DPR适配则需要用到CSS的viewport规则来控制缩放比例解决，而PPI主要影响的是文字，可以采用media规则来适配。</p><h2>单页应用</h2><p>前文已经讲过，前端架构的解耦问题不大，因为页面是天然解耦的，但是，大家都知道，浏览器加载HTML时是会有白屏过程的，对追求极致体验的团队来说，希望能够进一步提升体验，于是就有了“单页应用（SPA）”的概念。</p><p>单页应用是把多个页面的内容实现在同一个实际页面内的技术，因为失去了页面的天然解耦，所以就要解决耦合问题。也就是说，我们要在一个“物理页面”内，通过架构设计来实现若干个“逻辑页面”。</p><p>逻辑页面应该做到独立开发和独立发布，一种思路是，每个逻辑页面一个js，用一个SPA框架加载js文件。</p><p>从交互的角度，这并不困难，但是，这里还有一个隐性需求：保持前进后退历史。</p><p>一般来说，前进后退历史使用URL的Hash部分来控制，但是onhashchange事件并没有提供前进或者后退信息，目前还没有完美的解决方案，只能牺牲一部分体验。实现单页应用的逻辑页面发布需要改造发布系统，在工程上，这也是一个比较大的挑战。</p><h2>扩展前端新边界</h2><p>除了解决现实问题，我认为前端架构的职责还包括扩展前端的边界，所以前端架构还包含了很多Native开发任务：如客户端和前端结合的方案 Weex 和 React Native；如前端和图形学结合的方案 GCanvas；如前端的3D框架Three.js，这些都是试图用架构的手段赋予前端新的能力的尝试。</p><p>这些具体的尝试涉及很多领域知识，我这里就不做详细介绍了，但是如果你成为了一个前端架构师，我希望你也把“拓展前端边界”当做团队的核心目标之一。</p><h2>总结</h2><p>今天我从宏观的角度介绍了前端架构相关的知识，我重点介绍了“组件化”“适配性”“单页应用”三个前端架构需要解决的核心问题，组件化在社区有很多现成的方案，我们需要做的主要工作是框架选型。适配性需要用到CSS的几种特性：vw单位、viewport规则和media规则，单页应用重点是逻辑页面解耦、独立开发和发布和保持前进后退历史。</p><p>最后留一个思考问题，你所在的团队有前端架构师吗？如果有的话，他的工作职责是什么？</p><p></p>",
        article_title: "前端架构：前端架构有哪些核心问题？",
      },
    ],
  },
  {
    chapterTitle: "特别加餐 (10讲)",
    children: [
      {
        title: "新年彩蛋 | 2019，有哪些前端技术值得关注？",
        herf: "https://time.geekbang.org/column/article/80021",
        id: "80021",
        content:
          '<p>大家好，我是winter，想借这个机会跟大家聊一聊2019年前端会发生的一些事情。</p><p><video poster="https://static001.geekbang.org/resource/image/a0/10/a0546c4689896410a1808919eb63ad10.png" preload="none" controls=""><source src="https://media001.geekbang.org/customerTrans/fe4a99b62946f2c31c2095c167b26f9c/4010e2e0-16cfecae0c3-0000-0000-01d-dbacd.mp4" type="video/mp4"><source src="https://media001.geekbang.org/a6616e316d6d42bc8cfafc90151bbd09/8d76d01f5d4e45909a9a95af7150dafd-2ba878425340765427bcd402b49f1a21-sd.m3u8" type="application/x-mpegURL"><source src="https://media001.geekbang.org/a6616e316d6d42bc8cfafc90151bbd09/8d76d01f5d4e45909a9a95af7150dafd-eae7b4a51e00610064284515be52cd6b-hd.m3u8" type="application/x-mpegURL"></video></p><p>首先呢，我觉得可以谈一谈，我特别关注的图形学领域。</p><h2>进击吧，图形学！</h2><p>在淘宝工作的后期，我也有很大一部分精力放在了图形学上面，我是深刻地感觉到，在未来，图形学会和前端结合的更紧密。这是由于我觉得图形实际上是UI最重要的一部分计算机科学，同时它也是计算机领域里面的一个非常关键的学科。</p><p>我们的前端就是做UI的这样的一个职能，在未来，我觉得随着前端的工作层级逐渐地下沉，前端能够做到越来越多的事情。我们的图形也会逐渐的成为前端的一个基本的技能。</p><p>我在2018年已经可以看到很多2D和3D领域的应用了，我们会用2D的东西去做图片的渲染，我们会用3D的东西去做一些3D场景的呈现，在不同的公司我都会看到很多这样的案例。</p><p>另外，我觉得图形学也会大量地吸收以前在PS中由设计师做的功能，很多以前我们做得这种效果，包括半透明，包括模糊等等都是在PS里面，用图片来实现的。</p><p>但我认为在未来，随着图形学技术逐渐地发展，前端可以用代码来实现这样的效果，这样我们就可以不用设计师产出的图片了，而是设计师告诉我们用什么样的效果，我们来写代码把它实现。</p><p>这种下沉其实有个好处，我认为当前端工作层下沉到一定的程度，我们就不会有“做不出来这样的效果”这件事发生了。</p><!-- [[[read_end]]] --><p>这件事是很有意义的，今天你去问一个C++的工程师，这个东西能不能做，他只会说这个东西我不能做，他不会说，C++不能做，那在我们前端这样的情况往往是刚好相反的，所以说，我觉得未来下沉，技术下沉会给我们前端带来更多的职责，也同时是一种责任。</p><h2>包管理的救赎</h2><p>我觉得前端第二个会非常重要的发展趋势就是：包管理。我们都知道，NPM是一个非常好的包管理。</p><p>但是实际上，我们的NPM生态里也有很多的问题，包括安全问题，包括依赖太多造成的性能问题。我觉得目前到了一个重要的时间点了，那么NPM的这种问题，一定会有人解决。</p><p>但这种解决方案，到底是NPM的竞争对手会产生一个新的这样的包管理的平台；还是我们的NPM生态里面诞生一些更好的方案，最终把问题解决呢？这个就是我没有办法去预测的事情了。</p><h2>智能研发，前端有责</h2><p>另一个技术是我比较关注的是AI领域和前端的结合，我们的AI领域，今天虽然炒得非常火热，但是在我看来，真正应用的比较好的场景，就是视觉和推荐这两个领域。</p><p>我觉得智能研发的领域是整个学术界非常少关注的，那么我们的前端应该把这个责任背起来。</p><p>我在淘宝已经看到很多这个方面的努力了，我觉得在业界，这个东西在2019年产量应该也会越来越成熟，毕竟切图工作是一个机械性的劳动，机械性的劳动最终一定会被机器取代。</p><p>所以，我认为未来，我们前端的工作是不应该包含切图这项工作的。我也比较期待这方面能够尽快地产生一些成绩。</p><p>最后呢，我觉得其他的技术在2019年，应该会是一个稳定发展的状态，包括大家特别关心的三大框架，Vue、Angular、React。我认为应该是“继续繁荣发展，继续稳定发展，最后生态越来越成熟”这样的一个状态。</p><p>以上呢，就是我对2019年的一些预测和预期了。当然了，我非常希望我们今天中国的前端界能够诞生一些新的想法，能够让我大吃一惊，甚至是让我的预测落空，我觉得我也会非常高兴的。</p><p>在最后，再次祝大家新年快乐。你对前端的发展有什么样的判断和预测呢，欢迎给我留言，我们一起讨论。</p><p><a href="https://time.geekbang.org/column/intro/154?utm_term=zeusL6497&amp;utm_source=app&amp;utm_medium=geektime&amp;utm_campaign=onsell&amp;utm_content=0212textlink"><img src="https://static001.geekbang.org/resource/image/7c/b1/7ca7c24e92d25bde2e8609ed5386b5b1.jpg" alt="unpreview"></a></p>',
        article_title: "新年彩蛋 | 2019，有哪些前端技术值得关注？",
      },
      {
        title: "用户故事 | 那些你与“重学前端”的不解之缘",
        herf: "https://time.geekbang.org/column/article/87234",
        id: "87234",
        content:
          '<h2>写在前面的话</h2><p>不知不觉，专栏已经更新了一半有余了。在两个月的时间里，我收到了很多同学的留言，很开心可以跟大家保持交流，也很惊喜见证了大家的成长。</p><p>在整个学习过程中，你有没有一些学习感悟呢，有哪些新的学习收获，又有哪些实践感悟？有没有对前端的知识架构有了更为深刻的认识，是否规划好了自己的前端之路。</p><p>如果你有想分享的经验，可以在文章下留言，如果你的留言被选中作为用户故事，我们将会为你送出“极客时间”&amp; winter联名T恤一件。分享你的收获，我们一起成长。</p><p><img src="https://static001.geekbang.org/resource/image/aa/b3/aae94a1c13a5fefa7238999e271b82b3.png" alt=""></p><p>下面我们就一起来看看三位同学的分享。</p><h2>极客时间用户@阿成 分享</h2><p>在我进入知乎社区的时候，winter 老师就已经不在这个社区了，虽然是退隐了江湖，但是江湖上还流传着他的传说，后来我在 Google Feed 中看到 winter 老师的开篇词，看完就感觉是我要的东西，还正好赶上打折，就毫不犹豫地买了。</p><p>我本科学的是光电信息，所以并不算是科班出身的程序员（虽然也有学C啦）。我本身对计算机程序一直很有兴趣，所以从大三开始，我就决定放弃从事本专业，做一名程序员。要说为什么选择前端领域，自然也是烂俗的“门槛低”理由。</p><p>不过，我没想到的是，前端的学习曲线到后面是如此陡峭，并且前端发展的速度如此之快，让人目不暇接，也让很多人产生了“技术焦虑”。</p><!-- [[[read_end]]] --><p>在这样的环境中，我也产生了迷茫，作为一名前端开发人员，我到底应该学什么，怎么学。毕业后两年多的时间里，我从使用原生的HTML/CSS/JavaScript，到现在流行的视图库Vue/React，看似我好像学会了很多，但是离开这些库，或者说将来这些库被淘汰了，我又剩下了什么呢？</p><p><strong>我逐渐意识到，我需要的可能是一些更“底层”的东西。</strong></p><p>那么,什么是“底层”的东西呢，这里可不是指计算机底层，而是指不会被淘汰的东西，永远有用的东西。我认为对于任何程序员来说，最重要的就是：迅速获取某项知识的能力以及动手解决问题的能力。</p><p><strong>前者需要我们建立自己的知识体系，也就是winter老师在第一讲中提到的，我们需要完善的知识架构。</strong></p><p>我们不需要也不可能记住整个架构的知识，但我们却可以在需要的时候想起来这块知识的位置，是干什么的，能帮我们解决什么样的问题，可以通过什么关键词检索到，这就够了。</p><p>其实你让我回忆winter老师这么多节课的所有内容，我也是好多想不起来的，但多少都留下了印象。我们的大脑容量是有限的，所以“按需加载”也许对人脑也是个不错的策略。</p><p><strong>后者其实就归功于winter老师精心设计的课后题，光看这些课文总归是差了点什么，只有你动手去做，才能真正理解这节课所讲的内容。</strong></p><p>在做的过程中，你多半会遇到困难（这其实也是winter老师的本意），如果你通过努力解决掉了，这个提升才是最大的。你的方案不一定是最好的，或者你可能实在没什么头绪，这时候也可以利用搜索引擎去看看别人的方案。</p><p>因为我早上到公司要坐一个小时左右的公交，路上我基本上会用耳机听完课（不伤眼），然后剩下的时间去思考回顾一下，想想作业怎么完成。</p><p>在中午吃完饭休息的时候，动手做一下，有时候时间不一定够，就利用晚上和第二天的时间完成。每个人的情况都不一样，不过，想要有收获，就得付出多一些。</p><p>希望大家都能学有所成，有所收获。</p><h2>极客时间用户@峰峰峰  分享</h2><p>先感谢极客时间给了我这次学习分享的机会，如果文中有不足之处，希望小伙伴们可以多多指导。</p><p>我是转行过来学习前端的，目前在前端这个岗位上工作了大概一年半的样子，最初知道重学前端这个专栏，也是因为朋友圈里面的一些大牛分享的，比较好奇，并且老师又是非常有名的winter老师，就报了这门课程。</p><p>我本人是对前端的技术非常感兴趣的，尤其是原生基础知识，因为我觉得一个人基础的扎实程度，能决定这个人在这个领域所能发展的高度。</p><p>刚开始看到课程目录的时候我很吃惊，因为这个目录和我之前所学的所有的课的目录都不一样，从文法、运行时的角度去解释JavaScript这门语言，这让我非常兴奋，因为我知道，这正是我所需要的。</p><p>通过跟随winter老师不断学习，我发现这把我原有的一些知识结构打乱了，但这并不是坏事，因为我以前的学习和知识结构都非常的混乱。</p><p>通过这次学习，让我对JavaScript的理解更加深入了一些，同时，重新梳理我的知识点也让我的知识结构更加的清晰了起来。</p><p>可能是我工作时间尚短的原因吧，我觉得老师的每一节课对于我来说都是一个新的东西。举个例子，就拿第3讲和第4讲来说吧，标签语义化我一直都知道，但是我在工作中用得很少，并且在理解上也只停留在非常浅的层面上，但是通过老师的讲解，让我理解到了语义化标签真正的含义。</p><p>我现在在工作都会开始使用一些我比较熟悉的语义化标签。包括一些浏览器的工作原理，关于JavaScript这门语言是面向对象还是面向类的解释，以及JavaScript的执行等等，这些知识点都让我受益良多，非常感谢winter老师，希望以后还能有机会跟着老师继续学习。</p><p>最后，分享一下我的学习方法吧。</p><ol>\n<li>先提升知识的广度，再去拓展知识的深度。</li>\n<li>养成随时记录的习惯，可以是笔记，可以是代码（一定要写上注释）。</li>\n<li>多逛逛技术论坛，有条件的情况下多去实验一下论坛中自己感兴趣的代码。</li>\n<li>最后一条也是最重要的一条，坚持每天八小时工作外的学习和锻炼。</li>\n</ol><p>以上就是我的学习心得，不足之处还请多多见谅，希望对小伙伴们有帮助。</p><h2>极客时间用户@木易杨 分享</h2><p>我看了老师在“极客live”的直播，总结了他提到的一些观点。</p><ol>\n<li>\n<p>对于框架的使用没必要花太多时间，应该多研究一下三大框架背后的设计思想。</p>\n</li>\n<li>\n<p>当一个程序员对算法、语言标准、底层、原生、英文文档这些词汇产生恐惧感的时候，他的技术生命已经走到尽头。</p>\n</li>\n<li>\n<p>前端架构主要解决的是高复用性，架构能力提升方向主要是组件库开发、前端框架实现等。</p>\n</li>\n<li>\n<p>对于前端进阶这个问题，其实看书的作用和意义已经不太明显，需要寻找好的平台和合适的项目，在项目中不断克服难题并挑战自己，遇到问题再去查资料总结。如果只是闭门看书那很难成为高手，书只是基础而已，真正的应用还是在项目中。</p>\n</li>\n<li>\n<p>寒冬中能做的只有提升自己，但是光靠技术是不行的。</p>\n</li>\n<li>\n<p>推荐 TensorFlow、可视化切图、PWA、WebGL。</p>\n<ul>\n<li>TensorFlow 可以了解使用并做点东西出来，原理很难但不影响使用。</li>\n<li>PWA 有望进一步发展。</li>\n<li>WebGL 在未来会是一个很好的方向，它可以实现任何你想要的界面效果，但重点需要多掌握图形学的基础知识，它和算法，数据结构一样重要。</li>\n<li>Weex和 RN 虽然都叫 Hybird 但不太一样，前者适合大厂主要是嵌入 APP 中使用，后者更适合创业公司。</li>\n</ul>\n</li>\n<li>\n<p>不推荐 SSR、TypeScript、函数式编程。</p>\n<ul>\n<li>SSR 不太看好，其主要是用于SEO，不太建议用做服务端渲染，其能够使用的场景不多，而且成本代价太大。</li>\n<li>TypeScript 是好东西，是很有前景的语言，但适用于十万行以上代码级别的大型项目，小项目并不适合，反而徒增复杂。</li>\n<li>用 JavaScript 做函数式编程并不靠谱，Map/Reduce/Redux/Hooks等并不是函数式编程，只是长得像而已。</li>\n</ul>\n</li>\n</ol><p>PS：笔记内容由自己和群友提供，仅供参考。</p><h3>我的一些思考和尝试</h3><p>听完 winter 老师直播后对其观点很是赞同，但因为是面对所有人讲解，所以内容有点多范围有些广，但对个人来说还是找适合自己的方向，在自己相对熟悉的领域再去扩展去突破。横向只是拓宽你的眼界，纵向才是你的核心竞争力。</p><p>对我来说感触最大的就是 3、4、5 这几点，因为我一直在思考以下的几个问题。</p><ol>\n<li>我现在是高级前端，但又感觉自身很弱，那我如何才能夯实我高级的地基然后成为资深前端呢？</li>\n<li>项目迭代节奏快日常加班又多，那我如何做才能平衡工作和学习？</li>\n<li>单单提升技术好像还是有很大瓶颈，那我如何提升我的职场核心竞争力？</li>\n</ol><p>结合 winter老师的专栏和最近看的几篇文章，说说我对这几个问题的思考。</p><p>对于第一个问题，在 2 个多月前我还是不会写文章的小白，那个时候受到一些文章的触动，尝试把我的前端之路记录下来。</p><p>我的想法很简单，就是把前端进阶 28 期的重难点知识全部讲完，目前已经进行到第 4 期了，通过写作把知识通俗易懂的介绍给别人，在这个过程自己肯定会收获很多很多。</p><p>这就是我目前在尝试的学习方式，通过写作建立自己的知识架构，并且在这个架构上不断地进行优化，时间到了自然就进阶了。</p><p>对于第二个问题，刚开始写作时精力充沛时间也很多，每天都会更新技术文章，但随着项目迭代压力增大，文章更新速度相应就变慢了一些。</p><p>虽然文章质量提升了很多，但更新速度从日更变成了周更再变成了双周更，这个说实话我自身已经很难接受了，因为速度变慢导致我年初的计划要打折扣。</p><p>所以说做项目和自我学习要如何权衡，是否说我要减少项目难度和时间并在工作中摸鱼去学习呢？</p><p>我的结论是不，因为一句话，“最好的学习就是在项目中锻炼自己”。既然我有这么好的项目去锻炼，那为什么还要摸鱼去学习呢，这不就是南辕北辙嘛，道理很简单但不是所有人都懂。</p><p>我最近在执行的方法是专注 + 锻炼 + 利用周末。</p><p>专注即工作时专注于工作，努力做好每次迭代，遇到难题迎难而上，工作时不开微信，勤用笔记安排日常工作并整理文档。</p><p>锻炼即一周抽出三天时间每次去健身房锻炼1小时，强壮的体魄才能撑住高强度的工作和学习，因为网易有健身房所以冬天锻炼也没什么问题，没办法去健身房的小伙伴可以尝试跑步或者在瑜伽垫上做 Keep。</p><p>利用周末即加大周末和平常晚上熬夜的时间去写文章，减少娱乐的时间，正所谓时间挤一挤总会有的，但这件事情比较反人性，所以重在坚持。公众号写文章更容易坚持，原因在于文章发布后有正反馈，比如粉丝的增长，留言和鼓励，赞赏等等，这些都更能促使你坚持下去，时间长了自然就养成了习惯。</p><p>对于第三个问题，winter 老师也说了，寒冬中光靠技术是不行的，那应该靠什么呢？幸好在最近看到的一篇文章中找到了答案，那就是表达能力。</p><p>表达能力是形成自己的框架系统，有理有据并且逻辑清晰，而且能让外人听懂，大部分优秀的人都具备这样的能力。反观自己并没有这样的能力，所以我要努力提升这块，其中最重要的方法就是写作训练。</p><p>兜兜转转那么多，其实我一直在尝试的进阶方法就是通过写作建立自己的知识架构体系，同时提高自身的表达能力，通过正反馈机制和锻炼保证我长久的坚持下去并最终养成习惯，习惯这一模式之后变成优秀的人也只是时间问题罢了。</p><p>希望我的一些思考和尝试能对你有所帮助。</p><p>（直播回顾：<a href="https://v.qq.com/x/page/x0830fc8xoj.html%EF%BC%89">https://v.qq.com/x/page/x0830fc8xoj.html）</a></p><hr></hr><p><span class="orange">恭喜幸运用户&nbsp;@阿成、@峰峰峰、@木易杨，你们的经验被选取成为本期的用户故事。极客时间将送出“极客时间”&amp; winter联名T恤一件。1个工作日之内，工作人员会与你取得联系。</span></p><p>读完了三位同学的故事后，你有哪些感受呢，留下你的收获，我们一起成长。</p><p></p>',
        article_title: "用户故事 | 那些你与“重学前端”的不解之缘",
      },
      {
        title:
          "期中答疑 | name(){}与name: function() {}，两种写法有什么区别吗？",
        herf: "https://time.geekbang.org/column/article/88275",
        id: "88275",
        content:
          "<p>你好，我是winter。</p><p>随着专栏进度过半，我们专栏的评论区留言量也日渐上涨。除了大家的小作业和学习心得，我还看见很多同学们在学习过程中提出了不少问题。</p><p>这其实是一种很好的学习方式，通过问题，我们可以对这部分知识记得更为牢固。</p><p>所以，我鼓励你在阅读文章之外，多思考，多提问，把自己不懂的地方暴露出来，及时查缺补漏，这样可以更好地吸收知识。同时，你也可以通过回答别人的问题来检验自己对知识的掌握情况。</p><p>我们一起来看看，大家都提出什么问题。</p><hr></hr><p><strong>1.老师你好！我语义化标签用得很少，多数用到的是header、footer、 nav等语义化标签，想问老师section和div混合使用，会不会效果不好呢？</strong></p><p>答：不会效果不好的，因为本来就是这么用的。遇到不确定的情况，请千万不要乱用标签，用div和span就好。</p><p><strong>2.我一直看见闭包这个词，但是一直也没有弄清楚它是什么东西，老师可以简单概括一下什么是闭包吗？</strong></p><p>答：你可以这样理解，闭包其实就是函数，还是能访问外面变量的函数。</p><p><strong>3.“事实上，JavaScript 中的“类”仅仅是运行时对象的一个私有属性，而 JavaScript 中是无法自定义类型的。”</strong></p><ul>\n<li><strong>文中说“类”是私有属性，可以具体表现是什么，不是很能理解具体含义？</strong></li>\n</ul><!-- [[[read_end]]] --><p>答：私有属性当然是你无法访问的属性了，但是具体表现的话，还是有的，那就是Object.prorotype.toString.call(x) 的行为。</p><ul>\n<li><strong>无法自定义类型？请问如下编码是属于什么操作，应该怎么理解这个“类”？</strong></li>\n</ul><pre><code>function Person（）｛｝\nvar person = new Person（）；\n</code></pre><p>答：这个代码是定义类的操作，这里注意一下，你千万不要把类和类型的概念混淆。</p><p><strong>4.请教老师在对象中<code>name(){}</code> 等同于<code>name: function() {}</code> ，这两个写法有什么区别呢？</strong></p><p>答：这两个写法在使用上基本没什么区别。只有一点区别，就是函数的name属性不一样。可以看下这段代码：</p><pre><code class=\"language-JavaScript\">var o = {\n   myfunc(){}\n}\nconsole.log(o.myfunc.name)\n</code></pre><p>我们这里按照你的第一种方法定义了方法，然后输出它的name属性，我们看到name属性是\"myfunc\"。</p><p>值得一提的是，如果我们给你的第二种方法添加了名字，行为还是不一样，区别在于能否在函数内用名字递归，我们看看代码：</p><pre><code class=\"language-JavaScript\">var o2 = {\n    myfunc(){\n        consoe.log(myfunc); //error\n    }\n}\nvar o1 = {\n    myfunc: function myfunc(){\n        consoe.log(myfunc); //function myfunc\n    }\n}\no1.myfunc();\no2.myfunc();\n</code></pre><p>这段代码中，我们试着在用两种方式定义的方法中输出函数自身的名字变量，结果是不一样的。</p><p>不过现实中，我们几乎不会关心函数的name属性，所以不用太在意两种定义方式的区别。</p><p><strong>5.我对于JavaScript中Number安全整数有个疑问。</strong></p><p><strong>MDN中是（-(2^53-1)~(2^53-1)）, 犀牛书中是（-2^53~2^53）感觉都有道理。</strong></p><p><strong>JavaScript中采用IEEE754浮点数标准进行存储， 1个符号位，11位指数位， 52位尾数位。</strong></p><p><strong>按照分析，不考虑符号位，尾数位取值52个1就是表示的最大值了，不会有精度损失，此时指数位代表数值是52+1023=1075，此时即为(-(2^53-1)~(2^53-1))。</strong></p><p><strong>但是2^53这个值，存储的时候尾数是52个0， 指数位为53+1023=1076，这个值也是刚好没有精度损失的，这时表示的就是（-2^53~2^53）。</strong></p><p><strong>用Math.isSafeInteger()判断安全数范围和MDN中描述一样。</strong><strong>所以被问到这个的时候， 感觉两个都是有道理的吧！老师你说对吗？</strong></p><p>答：你分析得非常好，我觉得我都没啥可补充的了。这个地方JavaScript标准写得也非常模糊，我简单瞄了一下，似乎是用实验的方式来给出的安全数范围。考虑到犀牛书的时效性肯定不如MDN，应该是参考了某一版本旧引擎给出来的数据。</p><p>所以，这类行为我们还是以实测为准吧，我们不必纠结。</p><p><strong>6.老师您好，下面这个自己练习的例子希望您能帮解答：</strong></p><pre><code>console.log('sync1');\n\nsetTimeout(function () {\n    console.log('setTimeout1')\n}, 0);\n\nvar promise = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n        console.log('setTimeoutPromise')\n    }, 0);\n    console.log('promise');\n    resolve();\n});\n\n\npromise.then(() =&gt; {\n    console.log('pro_then');\n    setTimeout(() =&gt; {\n        console.log('pro_timeout');\n    }, 0)\n})\n\nsetTimeout(function () {\n    console.log('last_setTimeout')\n}, 0);\nconsole.log('sync2');\n</code></pre><p>答：这个例子挺经典的，虽然我觉得这样设计面试题非常不合适，但是我们可以以它为例，学习一下分析异步的方法。</p><p>首先我们看第一遍同步执行，这是第一个宏任务。</p><p>第一个宏任务中，调用了三次setTimeout（Promise中的代码也是同步执行的），调用了一次resolve，打印了三次。</p><p>所以它产生了三个宏任务，一个微任务，两次打印。</p><p>那么，首先显示的就是 sync1、promise 和 sync2。这时，setTimeout1，setTimeoutPromise，last_setTimeout在宏任务队列中，pro_then在微任务队列中。</p><p>接下来，因为微任务队列没空，第一个宏任务没有结束，继续执行微任务队列，所以pro_then，被显示出来，然后又调用了一次setTimeout，所以pro_timeout进入宏任务队列，成为第5个宏任务。</p><p>然后，没有微任务了，执行第二个宏任务，所以接下来顺次执行宏任务，显示setTimeout1，setTimeoutPromise，last_setTimeout，pro_timeout。</p><p>最终显示顺序是这样的。</p><ul>\n<li><strong>宏任务1</strong>\n<ul>\n<li>微任务1\n<ul>\n<li>sync 1</li>\n<li>promise</li>\n<li>sync 2</li>\n</ul>\n</li>\n<li>微任务2\n<ul>\n<li>pro_then</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>宏任务2</strong>\n<ul>\n<li>setTimeout1</li>\n</ul>\n</li>\n<li><strong>宏任务3</strong>\n<ul>\n<li>setTimeoutPromise</li>\n</ul>\n</li>\n<li><strong>宏任务4</strong>\n<ul>\n<li>last_setTimeout</li>\n</ul>\n</li>\n<li><strong>宏任务5</strong>\n<ul>\n<li>pro_timeout</li>\n</ul>\n</li>\n</ul><p><strong>7.为什么 promise.then中的settimeout是最后打印的？不用管是宏任务依次执行吗？</strong></p><p>答：因为then是第一个宏任务中最后执行的微任务，所以它发起的宏任务是最后入队的，依次执行就是最后。</p><p><strong>8.怎么确定这个微任务属于一个宏任务呢，JavaScript主线程跑下来，遇到setTImeout会放到异步队列宏任务中，那下面的遇到的promise怎么判断出它是属于这个宏任务呢？</strong></p><p>答：resolve在哪个宏任务中调用，对应的then里的微任务就属于哪个宏任务。宏任务没有从异步队列中取出，中间所碰到的所有微任务都属于这个宏任务。</p><p><strong>9.为什么要设计微任务（micro task），我知道这样JavaScript引擎可以自主地执行任务，但这样的好处是什么？提高性能吗？</strong></p><p>答：不是，微任务是JavaScript引擎内部的一种机制，如果不设计微任务，那么JavaScript引擎中就完全没有异步了呀，所以必须要设计微任务。</p><p><strong>10.现在浏览器多数实现是从右往左匹配的，那么无法保证选择器在 DOM 树构建到当前节点时，已经可以准确判断当前节点是否被选中。现在浏览器又是怎么实现在生成DOM树，同时进行CSS属性计算？</strong></p><p>答：其实现代浏览器已经为<code>:empty</code>、<code>:last</code>等伪元素写了很多例外了，不过你说的从右往左匹配，左边的要么是当前节点的父元素，要么是前置元素，所以是可以保证准确判断的呀。</p><p><strong>11.请问老师，页面资源的预加载是不是可以用link标签实现，还有其他的方式吗？</strong></p><p>答：预加载的方法就多啦，还可以用JavaScript代码预加载，甚至用本地存储缓存。</p><p><strong>12.老师，我有一个疑问：“词法环境”和“词法作用域”这两个概念的区别是什么？希望你能帮我解惑。</strong></p><p>答：词法环境是运行时概念，词法作用域是语言概念，就是说，作用域指的是变量生效的那段代码，而词法环境是指运行起来之后，你这段代码访问的存储变量的内存块。</p><p><strong>13.想问一个问题：import 进来的引用为什么可以获取到最新的值，是类似于 getter 的机制吗?</strong></p><p>答：这个地方略微有些复杂，我们在运行时并没有讲import的运行时机制，这里涉及了一个叫做ImportEntry Record的机制，它比getter的实现更底层。</p><p>我想这个地方我们没有必要去深究模块的运行时机制，它很复杂而且并不是经常要用到。你如果想了解的话，可以查阅一下。</p><p><strong>14.请问老师，JavaScript 的call stack size是多少，这个size的单位是啥，是调用栈中函数的个数，还是一个存储单位，比如MB之类的。如果调用栈中就一个函数，这个函数的参数有100万个，浏览器端依然会溢出，看起来是存储单位，但是没得到验证。</strong></p><p>答：这个似乎并没有什么特别规定，我知道JSC里面这个东西是可以用C++代码来调整的，至于浏览器调用JavaScript引擎的时候会怎么做，还真不好说。</p><p>不过，从编码风格上建议，不要把这种事情用函数解决啦，真要干这样的事，数组可能都不合适了，请老老实实写ArrayBuffer吧。</p><p><strong>15.老师您好，我一直有一个困惑，浏览器的鼠标事件是怎么识别到的，是碰撞检测的吗？</strong></p><p>答：这个问题很不错，我后面在浏览器API的事件部分会详细讲，可以先简单说一下，这里的检测方式是从外到内，逐级分配给子元素，所以我们的事件会有捕获过程。</p><p><strong>16.有个问题，如果我javaScript代码改变了DOM树元素的位置，需要启动重新排版（位置改变的元素只会影响其他部分元素的位置，甚至不影响其他元素的位置。），这时会导致这棵DOM树的所有元素都需要重新排版、绘制和渲染吗？</strong></p><p>答：排版应该是会重新排的，但是如果有些元素的尺寸没有改变，那么它内部不需要重排，当然也就更不需要重新渲染了，但是绘制应该是要重绘的，目前来看，浏览器还没有那么智能。</p><p><strong>17.老师，我是12年左右踏进半只脚到前端领域的，后来考研就放弃了，觉得前端不够高深，和传统工程师来说觉得门槛低很多，甚至前期我都觉得自己不是个程序员。</strong></p><p><strong>直到研究生毕业，才又选择前端，这是三大框架风靡，我却有点迷惘，感觉和自己认知的前端不一样，直到现在工作了差不多两年，才悟出了点道道。</strong></p><p><strong>作为工程师，我始终觉得前端也应该熟练算法和数据结构、数据库这些所谓的后端知识，但是平时工作场景中用到又少，不知如何学习？</strong></p><p>答：算法和数据结构可不是什么后端知识呀，是所有程序员的基本技能。</p><p>算法主要是靠大量练习提高，数据结构可以一个一个学习，不要指望工作中用到恰巧就学了，毕竟学习要教学费而工作是领工资的，哪里会有这样的好事呢，所以还是自己多多练习呀。</p><p><strong>18.重学前端是夯实前端基础，那前端进阶方向在哪里?还是一定要修一门后端语言扩展服务端，希望老师可以指点迷津。</strong></p><p>答：我觉得任何编程相关岗位的进阶方式都是做出某某东西，而不是学会某某东西。我会在专栏课程的第四模块会讲到一些进阶可能的方向，你可以关注一下。</p><p><strong>19.我主业是后端，工作中也会带着做前端，自认还是能完美还原设计师的设计。但是现在感觉很多时候提前端就是vue等，而我还是在用jQuery，想请老师说说看，我是不是落伍了？</strong></p><p>答：落伍的问题不是你用什么框架，而是你在做什么东西，学什么东西。</p><p>框架不是赶时髦，追潮流，每个框架都有解决的问题，我觉得你该焦虑的不是你用的框架为什么这么老，而是你该知道这些新框架要解决什么问题，以及这些问题为什么在你的工作中不存在。</p><p><strong>最后，我们来看看我在JavaScript类型那一篇中给你留的实践问题。</strong></p><p><strong>如果我们不用原生的Number和parselnt，用JavaScript代码实践String到Number，该怎么做呢？</strong></p><p>答：其实这个问题我在后台没看到特别满意的答案，好像大家都很喜欢偷懒啊。</p><p>我这里给你留个例子，处理十进制整数。</p><pre><code>function atoi(a){\n    let chars = a.split(&quot;&quot;).map(e =&gt; e.charCodeAt(0) - &quot;0&quot;.charCodeAt(0));\n    let n = 0;\n    for(var char of chars) {\n        n *= 10;\n    \tn += char;\n    }\n    return n;\n}\natoi(&quot;1001&quot;)\n</code></pre><p>我比较期待大家有人能写出来带小数，甚至带科学计数法的代码，你可以尝试一下。</p><p>好了，今天的答疑环节就进行到这里，你也可以把自己想要解答的问题留言。</p><p></p>",
        article_title:
          "期中答疑 | name(){}与name: function() {}，两种写法有什么区别吗？",
      },
      {
        title: "答疑加餐 | 学了这么多前端的“小众”知识，到底对我有什么帮助？",
        herf: "https://time.geekbang.org/column/article/91644",
        id: "91644",
        content:
          "<p>你好，我是winter。这一期我想跟你谈谈前端知识的学习姿势。</p><p>课程进展至今，我已经把大部分困难的知识点都讲完了。我在后台收到了一些留言，有的同学针对前端专栏的学习方法和学习方向提出了一些问题，在本期文章中，为了让同学们更好地理解我们专栏的重点，最大程度地吸收知识，在今天的文章中，我会逐一回答同学们在学习方法上的困惑。</p><h3>1.老师讲的内容是不是工作中用不到的，对掌握前端的实际工作有什么帮助呢，我们有必要掌握这些比较偏的内容吗？</h3><p>我自己一直奉行着一个观点，不要执着于知识的“临时”实用性。因为我总是感觉，掌握知识越多的人，更喜欢花费时间学习一些暂时可能无法变现的知识，原因有两点：一是其实学知识花费的时间比想象中的要少，这边在纠结它有没有用，那边可能都学完了；二是知识的实用性其实不怎么好判定，比如当年黎曼搞出非欧几何的时候，全世界都觉得纯粹是数学的思维游戏，直到黎曼死了很多年后，相对论出世，黎曼几何有了实际用途。</p><p>不过，这里我还是希望讲清楚，我想通过我们的课程传达一些什么样知识内容。</p><p>我们的每一节课标题中，都会带一个有点“小众”的问题，但是，实际上，这个标题主要是引起你学习兴趣的一个引子，解决问题只是我们学习课程的一个自然结果。</p><!-- [[[read_end]]] --><p><strong>我希望的是，通过这个有点偏的问题，引起你对这部分知识领域的关注，知道这部分知识的边界在哪里，从而形成一个完备的知识网络。让你在遇见不会的问题时候，可以快速定位到知识点，达成有效学习。并且，你也可以通过自己之前没有关注过的不同视角，来重新学习一遍这部分的知识。</strong></p><p>比如在JavaScript课程中，我提供了几个不同的视角来讲解JavaScript语言，每一个视角下，都是完整的JavaScript知识。</p><p>比如说，当我们写下 1+1 的时候，我们从词法的角度看，这是两个数字直接量和一个加法符号，我们从类型的角度看，两个Number类型相加得到的也是Number类型，我们从语法的角度看，这是一个加法表达式。</p><p>我们从不同的维度去认识了JavaScript语言，这些视角，远比你记住我们课上讲的细节更重要。如果你记住了“数字直接量可以用科学计数法，E还可以小写”，却没有学会从词法的角度去分析JavaScript语言，那可谓是“入宝山空手而归了”。</p><h3>2.我从业时间不长，文章看得迷迷糊糊，是我的基础不够吗？该怎么办？</h3><p>有一种说法，世界上的知识分成“我知道的”“我知道自己不知道的”和“我不知道自己不知道的”。</p><p>重学前端定位是有一定经验的前端工程师，所以它最重要的作用之一，就是帮助前端工程师发现问题，找出知识盲点。</p><p><strong>课程设计上，我的主要思路也是“帮助”大家形成自己的体系，而不是“替”大家形成自己的体系。我在前言部分就讲到过，若论丰富全面，有MDN文档；若论准确权威，有标准文本，但是，我们课程的作用是传达思路，如果有知识上的缺失，你其实可以通过阅读MDN来补全。</strong></p><h3>3.如果阅读文章时候有的内容看不懂，该如何学习，如何定位这块的知识呢？</h3><p>这个问题比较抽象，我认为这个课程设计其实也是一种定位了。</p><p>比如，对JavaScript问题，先搞清楚看不懂的是词法问题、语法问题、还是运行时问题？定位清楚了问题，你已经距离解决问题前进了一大步。</p><p><strong>在这里，我想跟大家说一下：如果你看不懂文章里的某一块知识，你可以给我留言，把具体的位置和知识点告诉我，这样我们可以进行更好的沟通和反馈，从而解决这个问题。如果你只是说不懂，我可能会一头雾水，也无从下手去帮助你解决问题。多做实时、有效的反馈，会让知识吸收的效果更好。</strong></p><h3>4.为什么文章里有那么多的术语和英文呢，为什么不换成更通俗的名字呢？</h3><p>其实，在我们的课程中，有很多次讨论到术语问题，比如“排版”，我们讲了中国古代的活字印刷，比如“渲染”，我们讲到了国画的技法。恰当地使用术语，对于传达知识是非常关键的。</p><p>翻译是一项很专业的工作，文学类的翻译讲究信、达、雅，对于技术类的名词，或许“雅”这方面可以稍微打点折扣，但是表意清晰，字句通达仍然是必须的。</p><p>很多术语有约定俗成的翻译，当我们阅读不同的文档时，可以快速地通过术语建立联系。并且，有的时候翻译本身也会造成一部分信息的丢失，所以，我有时会直接把英文也写出来，这样有助于你通过原文去理解和对照。</p><p>而为什么我不把术语换成更通俗的名字呢？</p><p>我们所讲的多数技术，跟现实生活联系不大，这种情况下，“通俗”的名字往往意味着误导。有时候，我们确定术语时，反而会尽量使它远离已有的概念。当然，确定术语并非是我的工作与专长，我们课程中的绝大多数术语，都不是我的发明创造。</p><h3>5.标准里有些东西还是看不太懂，如果可以的话，希望老师可以稍微讲解一下如何看懂标准？</h3><p>我并不推荐每一个前端工程师都去阅读标准，标准一半是写给实现者，一半是写给使用者，这里本来就有很多知识上的落差，多数时候，MDN是更好的选择。</p><p>如果一定要阅读标准，建议从自己做一个极简实现开始，我在浏览器部分，有讲解浏览器相关的知识，在JavaScript部分，我还设计了编译原理实验。我想，把它们落到代码上会是一个很好的开始。</p><h3>6.接手了一个新项目, 怎么对前端合理规划, 老师能不能提供一些这方面的指导和建议？</h3><p>这个问题其实跟前端学习关系不大，但是我可以讲讲。</p><p>任何规划其实都差不多，得有背景、目标、方案、计划、预期结果。其实在我看来，“项目”是规划的最小单位，在项目中拆出前端来做规划，是不太合适的。</p><p>背景和目标通常来自公司的业务，方案跟具体的技术相关，计划是项目管理的领域，最后根据这些来给出预期结果。</p><p>再往下细说，一个完整的方案可能包括产品、运营、市场、技术，不同的项目，各个职能的难度不一样，有些项目可能干脆不需要某些方案——比如多数淘宝的产品，首页开个入口就有访问量了，不需要独立去做市场。</p><p>具体到技术方案，前端、后端和公司的基础设施都有一定影响，有些公司会找一个架构师来做整体方案，有些公司则是哥几个商量一下边做边出，其实因地制宜最重要，能达到目标的方案都是好方案。</p><p>有了整体方案，到前端的一亩三分地上，技术选型、工程规范是绕不开的，有些公司有统一的前端团队，框架和工具都定好了，那么项目里面，就剩下分工和代码设计问题了，也有些公司有些项目具有特殊性，需要特别定制。</p><p>实际上，我很难给出具体的“框架选Vue”，工具用“webpack”这样的建议，因为工程领域本来就是需要很多妥协和权衡的。</p><p>不过，在我们课程的最后一部分，我选择了几个典型的基础设施和体系来讲，会给你分享这几个领域中我的认知。</p><p>在本篇文章中，我主要针对一些同学在学习上的疑问，给出了我的答案。你对前端的学习方法有什么样的困惑，欢迎给我留言，我们一起讨论。</p><p></p>",
        article_title:
          "答疑加餐 | 学了这么多前端的“小众”知识，到底对我有什么帮助？",
      },
      {
        title: "加餐 | 前端与图形学",
        herf: "https://time.geekbang.org/column/article/93216",
        id: "93216",
        content:
          '<p><video poster="https://media001.geekbang.org/bb431a0b16a54be1baca0718ce192e80/snapshots/8a2a4ac6c2024566a31b0a221f61edd8-00005.jpg" preload="none" controls=""><source src="https://media001.geekbang.org/customerTrans/fe4a99b62946f2c31c2095c167b26f9c/55bb6243-16d203ce6d5-0000-0000-01d-dbacd.mp4" type="video/mp4"><source src="https://media001.geekbang.org/19d9c08fafdf43349f09faffb8379a40/4eb30701b8644c12aa87d55a1c2a1091-27c78be0977def21aea064402b959180-sd.m3u8" type="application/x-mpegURL"></video></p><p>（点击视频观看完整分享内容。）</p><h2>主要内容</h2><p>关于前端和图形学，我分成了三个部分来讲解。</p><p><img src="https://static001.geekbang.org/resource/image/40/f6/40d8d263d15f779a232816a67230f0f6.jpg" alt=""></p><ul>\n<li>\n<p>第一部分是讲前端和图形学有什么样的关系。我们为什么要在前端里引入图形学，这个也是我的一段心路历程。</p>\n</li>\n<li>\n<p>第二部分相对来说是比较实用的，就是图形学的应用场景。如何在前端的日常的工作中，把图形学的知识用进去，为我们的工作和业务创造价值。</p>\n</li>\n<li>\n<p>最后一部分是对图形学基础设施的一些建设，目前还是一个比较初级的阶段，但是对大家来说，应该有些思路还是可以去思考的。</p>\n</li>\n</ul><h2>前端和图形学</h2><p>首先讲第一部分前端和图形学，先讲讲缘起。</p><h3>缘起</h3><p><img src="https://static001.geekbang.org/resource/image/34/3c/342921012fbcd30bd231fb37c99e293c.jpg" alt=""></p><p>2011年我做了一个分享，当时HTML5正火，我讲了这么一个内容叫做gesture animation，我是用HTML5上的TouchEvent，去模拟当时非常惊艳的iOS的操作风格。</p><p>2013年我又开始讲一个叫做flexible design的东西，这是针对当时一个非常火的概念提的。那个概念能从最大的屏幕适配到最小的屏幕的一个技术方案，但是从我们当时的实现来看，这个想法是好的，概念也是高大上的，但是从落地上来看非常困难。考虑到现实情况，我提了一个flexible design这样的一个次级概念。</p><p>这个就是一个弹性、小范围的适配，我们只把不同的尺寸的安卓机和iPhone做适配，最后解决了适配的问题，并提出来了一系列的设计原则。所以在2013年，我们主要做得还是解决适配问题。</p><!-- [[[read_end]]] --><p>2016到2017，我在各种不同的会议上讲了三场演讲，它们的背后其实都是同一个东西，叫做BindingX。</p><p>我是希望提出一个交互领域的通用模型，我把交互抽象成输入、输出和中间的一个表达式。通过三者之间的关系，来建立针对所有交互的领域模型。</p><p>我的三场分别是从技术的角度、从架构的角度，和从团队基础设施建设的角度，讲了三次。差不多两年的时间，我一直在研究这个方向。</p><p>16年初的时候，我做了一件事，我让团队的一个小伙伴去找当时所有看起来比较先进的设计，他到网上到处去找，总结了这么一份PPT。</p><p>然后呢，16年初的时候，我们就对着PPT开始研究说，到底哪个东西还是我们现在的基础设施实现不了的。我们用binding尽量去实现了。但是还是有一部分在2016年是做不到的。</p><p>到了2018年，我们又做了一次一样的事情，我们把当时的这个PPT拿出来，说这个效果还有没有我们做不到的，我们发现整个的效果，我们已经全都能做到了。</p><p>当时我们觉得作为前端，至少从底层能力上来说，我们已经建设得很好了，市面上能看到的先进的交互，我们都是可以做出来的。</p><p>不过，我还是做了一些思考，其实还是能找到一些做不出来的效果，比如说一些光和影的效果，还是我们现在做不出来的。</p><h3>浏览器的图形学</h3><p>对浏览器来说，图形这一条线下来，它大概会是个这样一个依赖关系。</p><p><img src="https://static001.geekbang.org/resource/image/c5/15/c5ceb67bc32dc36fd76af20ac150aa15.jpg" alt=""></p><p>我发现前面觉得自己做不出来的东西，实际上毫无疑问都可以用OpenGL的API去解决，我觉得它其实除了大家耳熟能详的“做3D”这一能力之外，是不是还可以用来解决我们在渲染方面的一些问题。</p><h3>设计稿里的图形学</h3><p>除了技术的角度，我们也做了另一个角度的分析，我们考察了一下设计师最常用的这个工具，Photoshop。它有一个工具叫滤镜。Photoshop里能够画出来东西的，都是通过滤镜实现的。</p><p><img src="https://static001.geekbang.org/resource/image/be/f5/bea6a3081342e34aecd4a8c934a02af5.jpg" alt=""></p><p>所以，我们做了一些基础渲染型的滤镜，也有一些对图片处理的滤镜，通过对它们的灵活组合，我们可以实现各种各样的图案，比如画个火焰、画个云彩类似的效果。</p><p>基于此，我们又做了一些探索。</p><h2>图形学应用场景</h2><p>我们把Photoshop生成的图片其实分了一些不同的种类。</p><p><img src="https://static001.geekbang.org/resource/image/7b/95/7bc0176efdf89f74968c3829df6bd095.jpg" alt=""></p><p>一种叫做图案，这个它可能是一种重复率比较高的，也可能是不重复，但是它相对来说是一种多用于背景的这样的一种东西。</p><p>还有一种，就是Photo图片，图片基本上就是拍照拍出来的，比如说这个图里的一个音箱，这个东西你没法去用技术去代替它，就是真实的图像。</p><p>还有一种东西叫做形状，比如三角形、圆形、方形，形状已经在浏览器里用了很成熟的技术去实现。</p><h3>来自设计稿的图形：云雾</h3><p>那么我们现在重点要去解决的是第一种pattern。比如我们要实现云雾效果。</p><p><img src="https://static001.geekbang.org/resource/image/71/a6/7146c502f0d91ebfd811d08cc90efaa6.jpg" alt=""></p><p>首先我们要有一个noise，小时候看电视这个出雪花就是这样的，那个就是说来自硬件的噪声，当我们把这个噪声做一些处理，放大，放到最大，它就会变成一个模糊的几个块，再放的小一点，就变成几个不动的模糊的块，一直到最后就变成雪花点，但是我们把几张图以一定的比例做一定的叠加，然后就搞定了。</p><p><img src="https://static001.geekbang.org/resource/image/cc/f5/ccce535cdb6fd9e8aea5671047a5fdf5.jpg" alt=""></p><p>接下来我们看一下对比图，看我们的结果，我们的这个云彩和Photoshop这个云彩渲染出来它的形状基本上是一模一样的。</p><p><img src="https://static001.geekbang.org/resource/image/97/3f/97757abccfaf529c82e6c81b777d243f.jpg" alt=""></p><p>我们打开了一扇新的大门，我们仔细研究发现很多内容都是可以用shader去做的，如果这个想法再深入一点，我们不需要用图片了，可以直接用代码去渲染了。</p><p>我们可能未来会给设计师提供很多这样的平台、工具，让他直接在我们的这个平台上去做操作，代替原来Photoshop的步骤，或者我们对Photoshop的文件做一定的处理，来生成这种图案，这是我们的一个思路。</p><h3>来自数学的图形：几何图形与分形</h3><p>除了灵感来自Photoshop之外，还有些其他的来源，比如几何图形，如果大家看一下这个著名的Logo，苹果的图标。</p><p>这幅图里面有很多的圆、框和螺旋线，它们总能找到一些数学的依据，设计师们做图标的时候都是要讲道理的，不能是凭空手绘的，尤其是这种著名公司的icon。</p><p><img src="https://static001.geekbang.org/resource/image/53/0d/5379622bd97a5b31caa5c3febaa2690d.jpg" alt=""></p><p>大家不要去轻视这个简单的几何图形，简单的几何图形也可以产生一些非常好的效果，除了几何图形之外，来自数学的还有一类，非常著名高端，但是实现起来非常简单的，叫做分形。</p><p>很多广告片里面，它会用类似这样的图形做这个背景，分形本来是数学里面的一门学科，分形集合，研究分形图的性质，它的特点是每个部分都是大图的一个相似图形，所以说，它可以无限延伸下去。</p><p><img src="https://static001.geekbang.org/resource/image/65/55/65bcc59719ebdf4650f9e53e924bfd55.jpg" alt=""></p><p>分形的代码很简单，就这么多代码，但是它也是画一个像素点的，它可以画成类似雪花这样的东西。</p><p>这类的分形图呢，叫Juila Set ，我们作为前端，我们就照着上面的数学公式把它用代码实现就好，所以非常的方便，为什么我要挑出来Juila Set来讲，是因为它有个特点，当你用不同的常数的时候的它会产生非常不一样的图形。</p><p><img src="https://static001.geekbang.org/resource/image/0c/4c/0c046400292e6ac7badb89ae173e304c.jpg" alt=""></p><p>比如说我们要做一个后台的这样的系统，给我们的设计师用，你让它自己调一调这个参数，它可以调出不同的图案。</p><p>总之，我们看到了很多的可能性，而Juila Set只是分形里面的一个集合，而数学里面的各种各样，能画出来奇怪花纹的东西，绝对不只分形一个，这里有非常大的想象空间。</p><h3>来自物理的图形：光的衍射</h3><p>还有一些来自物理的一些灵感，尤其是这种光晕效果，这个光晕效果也是Photoshop里面提供的，用这个光晕效果也可以做很多的设计。</p><p><img src="https://static001.geekbang.org/resource/image/5a/75/5a6593e87e8c8ccfd0df812332d48e75.jpg" alt=""></p><p>这个代码也惊人的简单，我们也不需要把这个东西搞的特别清楚，你知道理解我们可以有这些灵感的来源，就足够了。</p><h3>相变</h3><p>相变又是来自于一个新的领域的知识，就是我们可以对图片做一个处理，大家看到这个小人有帽子，作为一个有追求的前端程序员，我们可以用代码去改变它帽子的颜色。这里面涉及一个颜色的知识，叫做hsv。</p><p><img src="https://static001.geekbang.org/resource/image/b0/4e/b0797c17aebea57ba7c873067ed72a4e.jpg" alt=""></p><p>一般来说，大家只把hsv当作一种写颜色的方式，但我认为它是一个比rgb语义更好的颜色表述的方式，hsv是用了一个色相和明度，和纯度这样的一个概念，我们要想改变一张图的色相，我们就只需要去改变它的色相。</p><p>我们把蓝色的色相变到绿色的色相就OK了，这里面有一个很复杂的公式，只是写起来有点吓人，其实都是加加减减就好了，我们在hsv完成一个相变，我们再把它转回rgb，这样就实现了我们的这个色相变化的效果。</p><p>我们可以把这一点利用到很多场景上，比如说人民币，你从5元到100元钱，虽然大家觉得它差异很大，但它其实就是一个色相的改变。（我在前面的文章中讲到了同一种鸟颜色的转变，也是如此。）</p><h3>绿幕</h3><p><img src="https://static001.geekbang.org/resource/image/db/0d/dbf479fe38b97a0106a349eb3481e10d.jpg" alt=""></p><p>绿幕是电影的技术。如果大家到拍摄现场看拍电影，你会发现他们经常弄一个绿幕在上面，我们也用了一个类似的技术，我们也管它叫做绿幕。</p><h3>3D图形</h3><p><img src="https://static001.geekbang.org/resource/image/34/ed/349949c1592eb128ebe4fc1cb40ae8ed.jpg" alt=""></p><p>最后提一下3D图形，因为这个是业内非常成熟的东西，我就不仔细讲了。就是我们的ThreeJS和BabylonJS提供的3D的效果。3D的领域，现在是个红海竞争，你写一个引擎基本上跟别的引擎差不多，你有的功能别人都有，除非你与一个很厉害的实验室合作做了一些特殊的优化，但是，我觉得对于工程团队来说，这个代价有点高。</p><h2>图形学的基础设施</h2><p>最后讲一下图形学的基础设施，我们做图形的事情，还有些比较现实的问题。</p><h3>基础设施：GCanvas</h3><p><img src="https://static001.geekbang.org/resource/image/ec/d7/ec17b5b8bbf1181b48df32f0b4ea98d7.jpg" alt=""></p><p><img src="https://static001.geekbang.org/resource/image/59/4b/592aac455002919c19d9dc381a3b4e4b.jpg" alt=""><br>\n<img src="https://static001.geekbang.org/resource/image/e8/07/e822a732d980a01502d0b4a072f27407.jpg" alt=""></p><p>比如说阿里巴巴现在已经不用web view，基本上淘宝里面的页面已经是百分之百weex化了，可能就有一两个页面不是，我们面对的一个非常现实的问题，就是我们在用weex技术，而它里面是没有Canvas的，如果大家没有用weex，用了React  Native其实也要面临一样的问题。</p><p>没有Canvas怎么办？其实还是很简单的道理，做一个，所以我们做了一个叫做GCanvas的东西。</p><h3>基础设施：G3D</h3><p><img src="https://static001.geekbang.org/resource/image/b6/83/b6d2fa7226f642ed24365d6aa1928b83.jpg" alt=""></p><p>业界还有一个东西就是G3D，它与ThreeJS一类，没有什么本质的区别。底层它会有些管理的能力，它也可以交互，我们也做了点选，拖拽、顶点变形这样的能力。</p><p>如果你对今天的内容有什么样的想法，你可以给我留言，我们一起分享。</p>',
        article_title: "加餐 | 前端与图形学",
      },
      {
        title: "加餐 | 前端交互基础设施的建设",
        herf: "https://time.geekbang.org/column/article/93289",
        id: "93289",
        content:
          '<p><video poster="https://media001.geekbang.org/60dcf2f17b154a228f48c05c2d7b0b99/snapshots/178ef805a9fa4b94910b2b962681b413-00005.jpg" preload="none" controls=""><source src="https://media001.geekbang.org/customerTrans/fe4a99b62946f2c31c2095c167b26f9c/489cf0ee-16d14083228-0000-0000-01d-dbacd.mp4" type="video/mp4"><source src="https://media001.geekbang.org/ade06cd034114f7dacdd5c1dfa3e3d1f/5413348c5d2d42ccbea0164ef4e4723a-73dd7e79d80ed8012040a27ae1dd242d-sd.m3u8" type="application/x-mpegURL"></video></p><h2>分享内容大纲</h2><p>Vue、React等现代前端框架很好地解决了组件化和数据视图解耦问题。而对前端来说，新交互永远是花费时间最多的工作，新交互也是前端团队的自然价值和核心竞争力之一。</p><p>在这次话题中，我会分享在交互的基础设施的建设上的一些思考和实践，包括图形图像基础、事件机制与视图层架构模式、交互管理框架等内容。</p><p><img src="https://static001.geekbang.org/resource/image/79/1c/7917180b45e4d591bf3aaaada17c911c.jpg" alt=""></p><p>首先我们要了解一下历史。在70年代，大概是70年代的尾巴，1979年左右，有了特别有名的，MVC架构。</p><p>MVC之后，经过了差不多十几年的发展，到了90年代，准确地说应该是95年左右的时候，这个有一个公司的CTO，叫Mike，Mike在MVC的基础上，提出来了MVP。</p><p>到了 2005年，2005年微软的一个架构师，做WPF的，提出了MVVM模式。</p><p>2014年左右的时候，出现了FLUX，这个是Facebook为了它的JSX和React提出的一种模式。</p><p>后来隔了短短的一年，2015年，同样是在React社区，出现了REDUX。</p><p>对于前端来说，我们为用户创造价值才是特别回答的一个问题，这么多年过去了，前端到底为用户创造了什么价值呢？</p><p><img src="https://static001.geekbang.org/resource/image/b4/35/b46a898e8a5bc31280f8754cdfe1ed35.jpg" alt=""></p><p>这是70年代，施乐公司做的一个软件管理的流程图软件，那个时代，整个的界面就是这个样子，施乐已经算比较先进的了。</p><!-- [[[read_end]]] --><p>再到90年代，当时这个画面还是很惊艳，按钮键是立体的。现在来看这个东西就有不那么美观了。</p><p>2006年左右的时候，Vista的界面已经开始有了一个非常大的变化了，这时已经是设计师在主导这个界面的了，但是性能并不佳。</p><p>再之后，手机出现了，比如iPhone的界面，这时不但交互模式发生了巨大的改变，而且屏幕也变了，甚至我们熟悉的鼠标不见了，变成了触屏。虽然两者之间操作上有一定的相似，但是变化还是非常的。</p><p><img src="https://static001.geekbang.org/resource/image/25/30/25648bd93fef8871c1eccc612f7f3530.jpg" alt=""></p><p>视图的职责也在演变，70年代，视图的职责是：任何一个视图，永远不应该知道用户的输入。</p><p>我们这个时代的视图则既负责输入，也负责输出，并且与Model之间有一个交互。</p><p><img src="https://static001.geekbang.org/resource/image/cb/ab/cb57a540ec3779002c7c31d0960005ab.jpg" alt=""></p><p>计算机的功能也在演变。70年代，计算机主要用来计算。</p><p>我们今天计算机主要用来上网，基本上，大家的计算机都是24小时联网的，你的手机也是24小时联网的，所以计算机的职责在发生变化。</p><p>这个变化对于UI有很大的影响，1970年的那个MVC那篇论文里的图，model很大，view很小，而到了2018年，今天我们很多的model，都是放在服务端的，而今天model的大小已经不是说一台机器上能去存的，你存在本地的只是视图展现一点点的model，这个是很小的一部分的东西。而同时view却越来越重要了。</p><p><img src="https://static001.geekbang.org/resource/image/62/0e/6287d6cb49f51c13b2ba89bd121cc30e.jpg" alt=""></p><p>我们来看一下视图的技术。</p><p>从最底层的有很多人是做显卡和drivers，有这样的大佬人才。</p><p>还有现在非常流行的OpenGL等的GL层，做这一层的人非常专业，基本上都集中在各种大公司，最近苹果和安卓还竞争，推出了新一代的这个GL架构。</p><p>还有一个这个Draw层，这一层的内容非常多，基本上就爆发了，skia是安卓的底层绘制系统，graphics.h是最早的C语言带的一个图形库，基本上相当于一个基础库，还有很多3D引擎。</p><p>UI Framework这一层，它提供了一套基本的UI结构，有了绘制层， 一般人都不会在绘制层直接去工作，需要有些控件，这层有我们比较熟悉的Dom。GJI是Windows的图形系统，WPF也是Windows的图形系统。</p><p>最上面其实会有一些DSL，这是描述图形的语言，WPF对应的就是XAML，JSX对应的是React，HTML大家都知道了，想说这个视图技术变得越来越复杂，</p><p><img src="https://static001.geekbang.org/resource/image/ae/20/ae5b0f0cb1e5e42370d97fa518307a20.jpg" alt=""></p><p>那么我们的主战场是怎么样的，我们可以看一下淘宝终端技术在各层上的分布状况。</p><p>交互体系其实是这里面的一部分，但它不是这里面的全部，我觉得我们要讲这个交互呢，我们还是要做一下抽象的，我们要认识到，交互的本质是什么。</p><p><img src="https://static001.geekbang.org/resource/image/7b/18/7b1cbcd358431b45ef23fc13f4732e18.jpg" alt=""></p><p>交互的本质是什么呢，我画了一个手和一个眼睛，其实无非是操作和看。</p><p>操作最常见的一个抽象的模式就是事件。这个比如说这个touch-screen事件，陀螺仪事件，或者是时钟芯片触发的持续事件，这些作为输入。</p><p>输出一定是通过属性的形式体现的，在任何一个现在的UI框架下，都是通过属性的方式反映出来的。transform是变形，opacity是透明度，color是颜色，这就是一个比较完整的抽象了。你在任意的输入和输出连成一条线后，它都会产生一种效果。</p><p><img src="https://static001.geekbang.org/resource/image/59/8e/597261cebd9e48d115f6c8ae2a9b098e.jpg" alt=""></p><p>不过直接把陀螺仪得到的参数输入到transform里肯定是不行的，它需要有个关系，我们在这里面选择了Expression。我们可以用JavaScript去做计算。我觉得这是一个完备的抽象。</p><p><img src="https://static001.geekbang.org/resource/image/cb/ee/cba8a0fac235bd1186a9a470b50564ee.jpg" alt=""></p><p>不过这里还有一个坑是需要迈过去的，对计算机理解的输入跟人类理解的输入有非常大的偏差，对计算机来说呢，有多少种硬件，就有多少种输入。</p><p>我们发现输入非常复杂，在做基础设施建设的时候，我们在输入上面其实投入了很大的精力，最后出来的是一个更接近于人脑概念的一系列的输入。</p><p><img src="https://static001.geekbang.org/resource/image/ff/95/ff41ffacad1377e0caf5a3890cf17f95.jpg" alt=""></p><p>比如说，touch和gesture，我们知道触屏其实是触屏事件，触屏事件其实非常简单，只有四个，touch start，touch  move，touch  end，touch cancel则不太常用。</p><p>比如我想摁或者点一个东西，它都是是touch start，touch  move，touch  end，如果你要监听这些事件，中间的判断很繁琐，作为交互的基础设施，我们不可能提供这些给我们的前端工程师使用，我们肯定做一些操作。</p><p>比如手指移动10px，我们就认为这个touch  start到了pan  start，这个后面就是pan  move，pan  end这样，</p><p>手指很快离开，那么它就会产生一个tap事件。</p><p>如果超过1.5秒那就一个press start，如果手指没移呢，就会产生一个press end，如果手指移了，它还会产生一个pan start。所以gesture已经比touch复杂了很多了。</p><p><img src="https://static001.geekbang.org/resource/image/0e/f6/0edd194d6926619cf994444f9b4b54f6.jpg" alt=""></p><p>scroll就在gesture的基础上又复杂了一层，它不但手指在屏幕的时候响应，手指离开屏幕的时候它也响应，比如说轮播，它是一个变形的轮播，它在轮播的过程中，不但产生位移，还会产生大小的变化，这就让用户更舒服一些。</p><p>还有一个滚动导航，一边滚动出来一个导航，近年来还有一个交互设计，不是滚动到某个位置导航出来，而是一直再往下滚动的时候它不出来，突然往上滚动一下，导航就出来。这个部分还有更难的设计交互，所以我们还需要在scroll的基础上再做一层。</p><p><img src="https://static001.geekbang.org/resource/image/55/df/55553181bd8ff7feaebc7a5afda03cdf.jpg" alt=""></p><p>我们再来看陀螺仪，它只提供了三个分量，并且它是0到360度，所以如果不经过任何处理，前端工程师基本上是没有办法用的，比如在某个角度，它可能会突然从0跳变成360度，这个在数据计算时候非常可怕。</p><p>所以我们建立这样一个模型，我们把手机看作这样一个立方体，去计算在空间中对立方体产生的旋转效果，我们拿着立方体上面的一个点呢，去做我们定位的一个依据。</p><p><img src="https://static001.geekbang.org/resource/image/40/a6/406d0e28e45424ad7a5f7f55b0def8a6.jpg" alt=""></p><p>因为我们在用Weex，所以有一个Native跟JS通讯的问题，比如说从gesture事件到gesture handler，这一步就会到JS去执行，图中我们可以看到这个线，跨过中间JS和Native的分界线，跨越地非常频繁。</p><p>假如一个Touch  move事件或者Pan  move事件，你手指每移动一小点它都会触发一次JS跟Native的一个跨语言通讯，所以说整个的性能会非常差，最后基本上会有5毫秒到10毫秒左右的一个延迟，有60帧的话，每一秒钟有300毫秒被占掉了，帧率就下去了。</p><p><img src="https://static001.geekbang.org/resource/image/ce/66/cec057f7bc548c01e0ef3bafa6975766.jpg" alt=""></p><p>这就是我们最初开始做Binding模式的原因。我们的Binding模式，expression传递一次给Native，然后它会去做大量的绑定，所有的过程都是由Native来完成的，Native做完了以后，还需要再更新一下VDOM，所以这操作就完全由Native完成，通讯次数就降下来了。除此之外，我们还额外收获了性能上的收益。</p><p><img src="https://static001.geekbang.org/resource/image/3f/c5/3f1c0f0a6313fac231e3328e0a07f7c5.jpg" alt=""></p><p>我们的结论，其实淘宝一个交互体系是这样的，是以Binding为核心，下面的平台支持了weex，Web，React Native。DSL上面，我们支持了View和Rax两种，在上面，是由我们自己建的Components体系。</p><p><img src="https://static001.geekbang.org/resource/image/c2/92/c25d8385b4fba22294bbab5e30b95a92.jpg" alt=""></p><p>最后，还有一个展望，我们用绘制层相结合，会有更多的想象空间，我们通过各种各样的输入、手势、时间、陀螺仪，我们其实可以去控制矢量图，也可以去控制绘制，这些都是前端未来的想象空间。</p><p>如果你对今天的内容有所思考，可以给我留言，我们一起讨论。</p>',
        article_title: "加餐 | 前端交互基础设施的建设",
      },
      {
        title: "期末答疑（一）：前端代码单元测试怎么做？",
        herf: "https://time.geekbang.org/column/article/96269",
        id: "96269",
        content:
          '<p>你好，我是winter。</p><p>我们专栏课程的知识部分已经告一段落了。今天，我来集中解决一下大家在学习中遇到的问题，我争取用快问快答的形式，咱们多回答一些问题。</p><p><strong>1. 前端代码单元测试还是非常有必要的，不知道老师这一块是怎么做的，能否分享一下？</strong></p><p>答：关于单元测试这件事，虽然在业务代码我没做成功过，但是它在框架和基础库开发中起到了非常积极的作用。</p><p>我们平时写代码也肯定写一部分就要运行一下试试，其实这种行为就是单元测试，只是我们把很多自动化的内容，用人肉执行了，并且没有保存和管理case，也没有统计code coverage。</p><p>只要选择一个好的单元测试框架，单元测试成本其实不高，尤其是比较复杂的底层库，引入单元测试不但不会消耗时间，还会提高效率。</p><p>所以我认为单元测试要实行，有两个关键点你要格外注意：一是出一套好的单元测试方案，二是在基础库和框架开发中引入单元测试。</p><p><strong>2. 关于Undefined ，如果一个变量没有赋值后面又赋值，这个过程就是“变量会被篡改”的意思么？而null 为什么又不会被篡改？一个变量开始定义为 null 然后赋值其他数据这个过程不算篡改吗？</strong></p><p>答：undefined是个全局变量，null是个关键字，在一些版本比较旧的浏览器上，你可以试试：</p><!-- [[[read_end]]] --><pre><code>undefined = 1;\n</code></pre><p>但是你在任何版本的浏览器上，都不能这么干：</p><pre><code>null = 1; \n</code></pre><p>这样的话，上面这个代码就会报错了。</p><p><strong>3. winter老师你好，我们公司的前端是Node.js写的，如何做性能监控呢，如何做页面加载优化呢，我对您的页面性能打分系统很感兴趣，能详细讲一讲吗？谢谢了。</strong></p><p>答：首先，Node.js写的是服务端代码跟前端性能没有任何关系，Node.js的性能监控比前端性能监控复杂得多，你可以了解下alinode。</p><p>前端性能打分可能主要包含几个部分。</p><ul>\n<li>图片：检查图片数量和图片大小，比如单个超过50k，总量超过400k的图片就要注意了，如果检查到小图片，也可以建议用data uri内联。</li>\n<li>请求数：检查请求数，检查是否有独立的JS、CSS请求，这些都是潜在的优化点。<br>\n域名：检查域名是否有在http dns的范围内，检查域名数量是否过多，检查资源文件域名是否属于CDN。</li>\n<li>实际加载时间：如果测试环境加载时间过程，也可能说明一些问题。</li>\n<li>缓存：检查静态资源是否设置了正确的缓存。</li>\n</ul><p>你可以自己动手试试。</p><p><strong>4. 有一个疑惑是，大小写的两个属性有什么区别呢，比如：</strong></p><pre><code>Screen，screen\nEvent，event\n</code></pre><p>答：这里面大写的是类，小写的是对象。</p><p><strong>5. 我还是比较认同，从左往右匹配的规则，这样就像老师讲的可以在构建DOM树的同时来进行匹配CSS规则，相当于同时构建渲染树了，而不必等到DOM构建完毕再进行CSS的规则匹配。</strong></p><p><strong>进行构建渲染树，虽然从右向左匹配对于复杂的选择器更优，但是这里面浪费了等待DOM构建完毕，才能使用的CSS匹配规则。而且相对于同为id等单一选择器而言，明显从左向右更具有优势！这是我的一点想法，望老师指正！</strong></p><p>答：其实我在<a href="https://v.youku.com/v_show/id_XMjMzMzU2NDc2.html?spm=a2h0k.11417342.soresults.dtitle">之前的分享</a>中做过一个试验，当时的Chrome确实是从右往左，如果#id在最左，速度会更快，但是那个过程是后添加CSS的情况。</p><p><strong>6. 程老师你好。我在很多地方看到的说法是：CSS会阻塞DOM渲染，但不会阻塞DOM的解析，且CSS文件的请求是异步请求。</strong></p><p><strong>那么如果按照您所说，DOM的构建和CSS属性的计算是同步的话，head中CSS文件的下载以及CSSOM的rule部分的构建，应该会阻塞HTML的解析和DOM的构建。好像这两种说法之间就有了冲突。麻烦程老师有空的时候可以帮忙解释一下，万分感谢。</strong></p><p>答：其实你误解了我的意思，DOM构建的结果到CSS属性计算是个流水线，所以CSS会阻塞CSS计算，不会阻塞DOM构建。</p><p><strong>7. 老师，我记得有的书上或者是资料上说超过五次的if else 就最好用 switch case来替换。这样效率更好。您这里为什么说不用这个呢？</strong></p><p>答：我在性能部分讲了，“凡是不做profiling的性能优化都是耍流氓”。</p><p>具体的话，你可以看一看“<a href="https://time.geekbang.org/column/article/94156">43 | 性能：前端的性能到底对业务数据有多大的影响</a>”这一篇。</p><p><strong>8. 函数调用和函数执行有什么区别？ 有没有相应的标准？</strong></p><p>答：我们一般讲“A函数调用了B函数”“浏览器执行了B函数”，所以你看，两者的区别是主语不同，你可以感受一下区别。它们对应的标准都是ECMA262。</p><p><strong>9. 请问下老师，为什么flexible布局方案不再维护了呢？这个方案本身存在问题吗？</strong></p><p>答：不存在问题，但是rem计算是个历史方案，现在，我比较推荐大家使用vw。</p><p><strong>10. 有的工业软件，3D建模的也可以用浏览器来实现了，用的是ThreeJS WebGL，老师了解这些嘛？怎么看待这个发展前景。</strong></p><p>答：挺好的，但是我觉得这件事由本来做3D的工程师转型更方便。</p><p><strong>11. 最近出于好奇，我clone了github上chrome的源码仓库，发现竟然有12G多，貌似比linux内核的源码还多。个人特别想探索一下浏览器源码，但面对如此庞大的代码，不禁望而生畏，也不知从何下手。</strong></p><p><strong>请问老师，浏览器内核源码该如何去研究，skia渲染引擎是最先进吗，svg，canvas，WebGL该如何选择，怎样深入地学习和掌握它们呢？望老师拨冗答疑，谢谢！</strong></p><p>答：你先编译通过吧，然后试着跑起来打断点这样子，其实这件事没有捷径，多花些时间就可以。</p><p>skia引擎是不是最先进，这事我也不好说，其实在工程领域我们一般不追求“最先进”，我们只需要它“足够先进”。</p><p>关于如何选择，我收到了很多问题，不过我其实都不做回答，毕竟我没法替你决定你自己的职业发展道路，这个责任实在是有些重大了。</p><p><strong>12.看完老师列出的表格更迷茫了，比如，为什么transform属于level 1，transform不是CSS3里的属性么？level4是什么？是CSS4么？为什么color这种常用属性属于level4?不应该属于level1么？好迷茫哦。</strong></p><p>答：我先解释一下你的问题，一方面，level4里有不等于level3里没有，另一个是，W3C定level并不是十分严谨，有从1开始，也有从3开始的。</p><p>除此之外，我想提醒一下，这个表格并不是给你去看level的，而是告诉你标准在哪里，让你去读标准的。</p><p><strong>13. 请问老师，我后台用的是Tomcat服务器，前端用ajax请求静态资源时会间隔会报412，也就是一次成功进入后台，一次报412，这该怎么解决呢？</strong></p><p>答：理论上412意思是你浏览器的问题。从你提供的信息我没法给你解决方案，建议你可以搞一个最小复现环境去Tomcat社区问。</p><p><strong>14.老师好，有个疑问： WHATWG 和 W3C 标准以哪个为准，这两个标准有什么区别？是不是相互不认可的。</strong></p><p>答：这个问题比较复杂，WHATWG最初是几家不满W3C，出走搞出来的，后来被招安了把HTML5带回了W3C，不过两边出标准的思路还是不太一样，WHATWG是living standard，就是随时更新标准，没有版本的概念，我是个人会倾向于WHATWG版本，因为比较新，而且Chrome跟得比较紧。</p><p><strong>15. winter老师好，可以给我讲一下那个presentational attributes ，有些看不懂。</strong></p><pre><code>function showThis(){\nconsole.log(this);\n}\n\nvar o = {\nshowThis: showThis\n}\n\nshowThis(); // global\no.showThis(); // o\n</code></pre><p><strong>我知道函数中的this是由调用函数的对象决定的，但这种理解总感觉是由结论推原因；老师能不能讲解下。</strong></p><p>答：this是由调用函数的对象决定，这完全是个规定，没有什么原因。（你后面的问题我节选掉了，我其实没太理解到你想表述的意思，你看到了可以再给我留言）。</p><p><strong>16. 喜欢使用let和const，看很多库里面，他们都喜欢使用const，并且推荐使用const，比如声明一个数组。</strong></p><p><strong>老师能讲解下声明一个数组用let和const有什么区别吗？在操作数组时，都是往数组中push值，原先的变量并物理地址并没有发生变化，如果用let，和用const有什么区别，为什么const的性能会好一点？</strong></p><p>答：性能好一些完全是乱说的，用const的话，可以避免你误把数组整个赋值掉，比较有安全感吧。</p><ol>\n<li><strong>老师我有几个问题希望你回答：</strong></li>\n</ol><p><strong>老师讲到：“注意，我们这里讲的渲染过程，是不会把子元素绘制到渲染的位图上的，这样，当父子元素的相对位置发生变化时，可以保证渲染的结果能够最大程度被缓存，减少重新渲染。”</strong></p><ul>\n<li>缓存的是什么东西，位图吗？如何减少重新渲染的？</li>\n<li>是不是所有的元素都有对应的位图？</li>\n</ul><p><strong>文中你举了两个例子，说如果只有一个位图，任何改变都会引起所有重新渲染。这个好理解，一个大位图就是一个单元，任何的改动相当于这个单元被变了，所以要重新创建这个，这样理解对吗？</strong></p><p><strong>但是你下面又说如果不合并，每次还是所有的重新渲染。感觉说的很矛盾啊。希望老师能回答一下我的疑问。</strong></p><p>答：缓存的是位图，父子元素位置变化时，因为子元素的位图被缓存，子元素不需要重新渲染，因为父元素的位图也被缓存，父元素也不需要重新渲染，只有父子元素合成起来的位图需要被渲染。</p><p>你这样理解是对的，如果不合并，每次改点什么东西，都要重新逐级合成最终的大位图，也相当于重新渲染。</p><p><strong>18. 老师，“当没有强制指定文字书写方向时，在左到右文字中插入右到左向文字，会形成一个双向文字盒，反之亦然。”这个能不能给个例子，不明白什么意思。</strong></p><p>答：比如你在中文中插入几个阿拉伯语字符，阿拉伯语字符就会形成一个双向文字盒。</p><p><strong>19. 看了您的流式数据的解释，是不是可以理解当看到页面渲染的时候，DOM是不是有可能都还没构建完成呢？即使是理论上，有这种可能吗？</strong></p><p>答：渲染不但发生在DOM构建之前，甚至可能发生在你下载网页完成之前，比如你上个XX软件下载站，是不是下载链接还没见到，就看到广告了（你提到的网上的那段是别人写错了。我节选掉了）。</p><p><strong>20. footer 也可以和 aside，nav，section 相关联(header不存在关联问题)，不存在关联问题是什么意思啊，不应该在header中使用吗？下面又说header中可以使用nav，老师的“关联”是什么意思啊？</strong></p><p>答：因为footer有自己的语义，footer必须要指明是谁的footer，这样footer中的作者、地址才有意义，所谓的关联就是这个意思了。</p><p><strong>21. 子元素的事件委托给父元素时，添加事件监听的第三个参数直接设置为true，在捕获过程就判断父元素上的事件目标会比冒泡好些嘛？</strong></p><p>答：对，但是你需要在捕获阶段想办法知道事件具体发生在哪个子元素上。</p><p><strong>22. 老师 如果我想更深入的了解移动端的兼容问题，有没有好的学习路线呢？</strong></p><p>答：兼容问题不是学出来的，你想在山中苦修，自出洞来无敌手？手机早就更新好几代了。所以兼容问题必须靠实践，在一个需要兼容性的业务上，不断积累和更新兼容性知识。</p><p><strong>23. 老师，我在理解SICP这本书的过程抽象和数据抽象的时候，代入到前端，比如生命周期、事件处理等更多是过程的抽象，能提出一些公用的过程，而数据抽象更多指的是组件内的数据定义、api的设计、高阶组件等。</strong></p><p><strong>请问我这样理解对吗？或者说老师对过程抽象和数据抽象在前端中怎么理解的？如果理解得不对，有什么好的书或者文章帮助理解？</strong></p><p>答：SICP讲的是很实在的编程技巧，在前端中对应的是变量、循环、条件这些东西，SICP是一本好书，你应该更认真地去阅读它。</p><p><strong>24. 通过这个课程老师对于前端的划分为JavaScript、HTML和CSS、浏览器、工程实践几个部分。</strong></p><ul>\n<li><strong>疑问1：现在前端基本把Node也包括进来了，对于Node的知识应该怎么定位？</strong></li>\n<li><strong>疑问2：Node属于后端的范畴了，是否应该去学习下java相关的后端体系？学习了后端的体系是否会反过来促进前端知识的学习呢。</strong></li>\n</ul><p><strong>winter老师对这两个问题怎么看呢？谢谢。</strong></p><p>答：Node属于后端，electron属于客户端，不论你学哪个体系，肯定对前端都有促进作用。</p><p>但是，你不能认为懂了Node就懂了后端，懂了electron就懂了客户端，每个领域都可以很深入，知识本来就是学不完的，你能掌握多少只跟投入的时间有关，这道理是很简单的，与其困惑，不如把困惑的时间拿来学习，相信你会有所收获的。</p><p><strong>25. 老师，CSS是如何依附在DOM树上的?是通过前面讲得Node实例来实现的?</strong></p><p>答：在Node实例上添加属性，我在“<a href="https://time.geekbang.org/column/article/80311">12 | 浏览器：一个浏览器是如何工作的（阶段三）</a>”讲到了，你可以返回去看看。</p><p><strong>26.清楚为什么要使用语义化标签，是否有必要使用之前，很难让自己有动机去应用每个标签。另外标签新推出如何保持实时掌握最新的标签呢，如何解决浏览器兼容的问题？</strong></p><p>答：对语义化标签，我是建议不必追求全部掌握，现有需求再找标签即可。</p><p><strong>27. 老师您好，有个疑问想请教一下，为啥基于对象关联风格的面向对象并不是像模拟类的行为的面向对象那么流行呢？原型委托这种的不是应该更符合JavaScript语言本身的设计嘛？类似这种：</strong></p><pre><code>var father = {\na: 1,\nfn(): {\nreturn 123;\n}\n}\nvar child = Object.create(father);\nchild.fn(); // 123\n</code></pre><p>答：大部分人在学校学的都是C++和Java，我就没见过教原型的，这是现实，没办法。</p><p><strong>28. 老师，可否稍加解释一下执行上下文的分类? 网络上的文章说“ JavaScript 中可执行的代码可分为三种类型：全局代码、函数代码、eval 代码，对应三种执行上下文（全局执行上下文、函数执行上下文、eval 执行上下文）。</strong></p><p><strong>在 ECMAScript 2018 中没有找到这种说法的依据。我的意思是，我不太清楚这些文章的说法是否正确，是否不够全面。</strong></p><p>答：这个说法倒不能说不正确，但是严重过时了。</p><p>现在ECMAScript 2018里面执行上下文非常复杂，你可以看看各种Record，重学前端课程里面也没有讲全。</p><p><strong>29. 老师，在ES5之前版本规范中，会提及JavaScript的可执行代码分为全局、函数、Eval。但是在ES6之后版本规范中，再也不提及可执行代码的概念了，这是为什么呢？</strong></p><p>答：其实这里是重构了一下表达方式，新加入了模块什么的。</p><p><strong>30. 试过好多次，找了很多方法flex兼容IE9以下，每次都失败，有什么好的解决办法吗？</strong></p><p>答：如果真有IE9兼容需求，我想只能单独写一份CSS了。</p><p><strong>31. 请问大佬，如何冻结对象，一般什么样的场景可以用到？</strong></p><p>答：Object.freeze函数可以冻结对象。一般都是写底层库，希望避免篡改。</p><p><strong>32. </strong></p><pre><code>new Promise(function(resovle, reject) {\nsetTimeout(resovle, duration);\n})\nsetTimeout(resovle, duration);和setTimeout(() =&gt; {resovle()}, duration);\n</code></pre><p><strong>两者到底有什么区别，想不明白，求教。</strong></p><p>答：这个区别不大的，第二种写法一般都是为了给resolve传参数，不过如果你不想给resolve传特定参数，为什么还要多写一个函数呢。</p><p><strong>33. 我听JavaScript像听天书，怎么办，是不是要从0重新学起呀？</strong></p><p>答：理论上，我的课程是把JavaScript的内容重新组织了一下，如果平时就在用JavaScript，我认为问题不大。如果这部分完全听不懂，可能说明确实基础薄弱，建议你从0学起。</p><hr></hr><p>好了，本期的答疑告一段落，如果你还有其他的问题，或者还是没有弄清楚，你可以继续给我留言，我会继续解答大家的问题，并一起讨论。</p><p></p>',
        article_title: "期末答疑（一）：前端代码单元测试怎么做？",
      },
      {
        title:
          "期末答疑（二）：前端架构中，每个逻辑页面如何可以做到独立发布呢？",
        herf: "https://time.geekbang.org/column/article/96809",
        id: "96809",
        content:
          '<p>你好，我是winter。</p><p>上一期的答疑文章发布之后，同学们的热情很高，我在后台又收到了一批新的问题，今天我们继续来答疑。</p><p><strong>1. 请问前端架构中，每个逻辑页面如何可以做到独立发布呢？</strong></p><p>答：首先，我们要知道发布是什么意思，我们平时开发好一个网页，把它放到线上真实对用户服务的机器上，这个过程叫做发布。</p><p>正常来讲，前端工程师发布的原材料是HTML，产出是一个线上的URL地址。</p><p>各个公司的发布系统差异非常的大，有的是前端发HTML，有的是前端把代码给服务端同学，改成JSP之类的代码，再一起发布。</p><p>对于逻辑页面而言，我们需要发布的从HTML变成了JavaScript，这个JavaScript代码的作用就是渲染一个页面的内容。同时我们线上还需要一个公共的HTML文件来运行这些JavaScript。</p><p>最后这些JavaScript文件只要能够做到独立发布，我们就可以认为逻辑页面是独立发布了。</p><p><strong>2. 对于一个后端开发者来说，前端最困难的东西永远是CSS布局而不是JavaScript，我们对CSS有很大畏惧和恐慌在于：CSS没有很好的调试工具能解决问题，即使chrome dev这样的顶级debug工具，有时候也很难解释诸如“为什么页面上的这个盒子在这个地方”这样的问题。感觉CSS完全不符合编程的思路，老师有没有办法缓解一下这个问题？</strong></p><!-- [[[read_end]]] --><p>答：其实我在课程中已经解释过了，早期的CSS从思路上来说就很别扭， 任何人都会觉得别扭，现在有了Flex布局，我认为这个问题基本可以算解决了。</p><p><strong>3. 最近一直在研究前端性能优化和线上错误收集，收效甚微，老师可以讲解一下大厂是怎么处理的吗？</strong></p><p>答：这一部分，首先你需要一个比较通用的日志服务，能接受前端用HTTP请求的方式打一些日志进去，一般公司都会有这样的系统，如果没有，就需要新建一个，这部分比较麻烦，需要一定的专业知识。</p><p>有了这个日志服务，剩下的就是在每个前端页面插入一个JavaScript代码，监听Window.onerror可以得到错误，取window.performance可以得到性能，拿到以后，打日志就行了。</p><p>至于后续怎么去展示，展示了以后又怎么去推动执行，这块就需要你自己根据公司实际情况去找到解决方案了。</p><p><strong>4. 老师，想问一下用float排版的时候margin值在不同的浏览器中会显示不同，是什么原因导致的呢？</strong></p><p>答：我是从IE6时代过来，我还真没听说过margin值有什么兼容问题，你可以拿具体的案例来，我们一起看一看。不过我建议早日切到flex，我们不要在没价值的事情上浪费生命。</p><p><strong>5. 把链接分为超链接类和外部资源类是您自己的理解么，还是官方有这种分类呀，我没找到。老师可以说一下么？</strong></p><p>答：不是，链接这个概念来自HTML标准（4.6.1位置）。</p><ul>\n<li><a href="https://html.spec.whatwg.org/">https://html.spec.whatwg.org/</a></li>\n</ul><p>我在HTML的部分都在讲这个问题，你可以关注一下。</p><p><strong>6. 老师，关于线上监控的数据采集和数据显示您有好的插件或者方案推荐？</strong></p><p>这个其实没有现成的，这个东西，如果公司从数据安全的角度考虑，一般都不让用第三方的。</p><p><strong>7. 老师提到原生构造器无法继承。而<a href="http://es6.ruanyifeng.com/#docs/class-extends">阮一峰老师</a>表示，es6已经可以继承原生构造函数，并且能定义子类。以我的理解来看，阮一峰老师的说法没有问题。不知道老师怎么看？</strong></p><p>答：我查了一下，你说的没错，还真是这样，这块我理解错了，我后面会迭代一下。</p><p><strong>8. 活动页面样式风格多变，并且有些活动页面是存在交互和购买流程等交互，这些交互怎么做成模板化？</strong></p><p>答：这个答案很简单，只要能传参数，就能做成模板化。</p><p><strong>9. DOM树就是一种嵌套的数据结构吗？然后是渲染引擎将这个数据结构处理成我们看到的网页吗 ？</strong></p><p>答：DOM树是嵌套的树形结构，渲染过程是把它变成位图，绘制过程是把它画到显示器上。关于这部分内容，你可以回顾一下浏览器原理部分的几节课。</p><p><strong>10. 浏览器中大多数的对象都原型继承自Object，是否可以根据原型继承关系将Window上面的api绘制成一颗树？有了这些继承关系是否更容易理清这些全局属性呢？</strong></p><p>答：API不止有类，也有很多函数呀。所有的函数API的原型都是Function.prototype，这不就没意义了么。</p><p><strong>11. “宿主对象（host Objects）：由 JavaScript 宿主环境提供的对象，它们的行为完全由宿主环境决定。”</strong></p><p><strong>但是下面对宿主对象的解释又是：“实际上，这个全局对象 windows上的属性，一部分来自 JavaScript 语言，一部分来自浏览器环境”。这并不像上面说的完全由宿主环境决定，这个怎么理解呢？</strong></p><p>答：请注意看了，我这里讲宿主对象有个“们”字。</p><p>所以，这里可不是对宿主对象的解释，这是对Window对象的解释。Window对象比较复杂，这块我没有详细讲，从JavaScript的Global Object的角度可以讲，浏览器部分还有个Window Proxy机制，我是觉得复杂又没什么实际意义就没有讲，你可以这样感性地理解一下：全局对象和Window对象合成了一个东西。</p><p><strong>12. winter老师，我看到淘宝用了iframe标签，能给我讲一下这个标签的使用场景和注意点吗？</strong></p><p>答：我可以简单告诉你一个口诀：手机上不要用，PC上除了历史包袱不要用。</p><p><strong>13. 请问下，link preload 解析执行时机和构建 CSSOM一样吗，HTML从上往下解析到link preload才会解析执行？还是说并行解析HTML和preload？</strong></p><p>答：从标准来看应该是可以并行，但是具体怎样这块需要看浏览器源代码确定。</p><p><strong>14. 老师，在ES5之前版本规范中，会提及JavaScript的可执行代码分为全局、函数、Eval。但是在ES6之后版本规范中，再也不提及可执行代码的概念了，这是为什么呢？</strong></p><p>答：它们还在，只是现在执行过程更复杂了，没法这么简单分类了。</p><p><strong>15. winter老师，你提倡多继承吗？还是说尽量用聚合来解决问题？我看着ES6里面要实现多继承的方式也挺别扭的。</strong></p><p>答：我不提倡多继承，Java也不支持多继承啊。如果你想抽象可以用接口来代替，想复用可以用Mixin来代替。</p><p><strong>16. 我这里还有个问题，使用figureCaption标签后，img标签的alt属性可以缺失么？我一直觉得alt与src情同手足，什么都不应该把彼此拆散的。</strong></p><p>答：不可以缺失，这是两个意思，figureCaption可能是“图1”这种东西，可不一定在描述图片内容。</p><p><strong>17. 老师，style 既然也可以这么用<code>&lt;style&gt;css</code> 规则<code>&lt;/style&gt;</code>，为什么没有 <code>&lt;style src=“”&gt;&lt;/style&gt;</code>？</strong></p><p>答：你这个设计得不错，但是估计有了link以后，HTML懒得把style改成replacement了吧。</p><p><strong>18. 老师好，想请问下，业务场景中需要嵌入公司其他行业线的页面，这种不使用iframe该怎么办？</strong></p><p>答：理论上应该让他们给你做个组件出来，但是如果实在没别的办法，就使用iframe吧。</p><p><strong>19. 老师，目前有办法通过脚本反射的方式获取所有JavaScript原生对象吗？还是只能查文档？通过for. in 遍历全局对象是不可以的，因为这些JavaScript原生对象虽然挂到了全局，但是属于不可枚举成员。</strong></p><p>答：我们现在可以用Object.getOwnPropertyNames，但是你symbol还是拿不到。</p><p><strong>20. 老师，jquery ajax 同步请求的原理是?目前用axios库，不支持同步请求，如果希望执行同步请求有什么解决办法？</strong></p><p>答：原理是XMLHttpRequest这个可以传第三个参数，但是我不建议你用同步请求，会把JS执行线程卡住。</p><p><strong>21. 老师您好，把JavaScript代码缓存在 localStorage 中，从 localStorage 取出后怎么执行？ 如果缓存的是 CSS 呢？</strong></p><p>答：执行JavaScript用eval，执行CSS用document.createElement(“style”)。</p><p><strong>22. 请问：var,let 和 const 在 babel 中都会被编译为 var, 那怎么区分 const 是常量呢？</strong></p><p>答：如果你用babel的话，就不要管编译后的代码。</p><p><strong>23. DOM树构建与CSSOM构建有先后关系吗？CSS计算与DOM树流式构建同步进行是不是意味着DOM树流式构建之前，CSSOM已经构建完成呢？</strong></p><p>答：我这里说的确实有点歧义，我在这里再厘清一下。CSSOM是有rule部分和view部分的，rule部分是在DOM开始之前就构件完成的，而view部分是跟着DOM同步构建的。</p><p><strong>24. 老师能解释下这个么？</strong></p><pre><code>var b = 10;\n(function b(){\nb = 20;\nconsole.log(b); // [Function: b]\n})();\n</code></pre><p>答：这个地方比较特殊，“具有名称的函数表达式”会在外层词法环境和它自己执行产生的词法环境之间，产生一个词法环境，再把自己的名称和值当作变量塞进去。</p><p>所以你这里的b = 20 并没有改变外面的b，而是试图改变一个只读的变量b。这块儿的知识有点偏，你仅做理解掌握就好。</p><p><strong>25. 关于状态机这一块，我觉得是不是可以先讲一节正则的知识点呢。理解了正则，那么大家对状态机的概念就有了更加直观的理解了。</strong></p><p>答：一般正则都是状态机实现的，讲正则对理解它底层的状态机并没有多少意义。</p><p>当然了，词法分析也可以用正则来实现，我这里没有这么做而已，我写过一个JavaScript的词法分析是用正则做的，你可以参考这里:</p><ul>\n<li><a href="https://github.com/wintercn/JSinJS/blob/master/source/LexicalParser.js">https://github.com/wintercn/JSinJS/blob/master/source/LexicalParser.js</a></li>\n</ul><hr></hr><p>好了，今天的答疑就到这里，如果你还有问题，可以继续给我留言。我们一起讨论。</p><p></p>',
        article_title:
          "期末答疑（二）：前端架构中，每个逻辑页面如何可以做到独立发布呢？",
      },
      {
        title: "加餐 | 一个前端工程师到底需要掌握哪些技能？",
        herf: "https://time.geekbang.org/column/article/106193",
        id: "106193",
        content:
          '<p>自从开了“重学前端”这门课程，总会遇到同学反复问我这几个问题：</p><ul>\n<li>学这门课需要什么样的基础？</li>\n<li>为什么你不讲Vue？</li>\n<li>有必要学习Node.js/Flutter/函数式吗？</li>\n</ul><p>这几个问题看似毫无关联，但是其实它们本质上都是同一个问题，这个问题就是“一个前端工程师到底需要掌握哪些技能？”</p><p>其实在行业里面，对前端工程师的能力模型有一个基本的认知，不同公司的定义可能有细微差别，但是它的内核是一致的。</p><p>这里我给出一张图，是我自己理解的前端工程师的技能模型。</p><p><img src="https://static001.geekbang.org/resource/image/e0/92/e0c654fa7cf5f63cdcca1b6c51008992.jpeg" alt=""></p><p>为了方便你理解，我把这些技能具体放进前端工程师的不同级别里，你可以对照着找到一条符合自己实际情况的前端进阶之路。下面我就一部分一部分地详细讲讲前端技能树是如何发展的。</p><h2>助理工程师</h2><p><strong>首先来说说助理前端工程师，对标的是阿里的P4级别。</strong>它的要求是基本的编程能力。什么叫基本的编程能力呢？我认为就是熟练地用计算机编程语言表达任何逻辑的能力。一般来说，在大学学习过计算机专业的学生应该具备编程能力。</p><p>我举一个具体的例子，我们用自然语言说“从1打印到100”，在多数编程语言里的表述，是一个变量从1开始，每次循环加1，每次打印，到变量值为100时循环结束。理论上只要掌握了循环、分支逻辑，能组合出一切逻辑，这是图灵可计算理论决定的。但是理论是一回事，真想要熟练掌握，是需要经过一定训练的。这个训练，就是对助理工程师的要求。</p><!-- [[[read_end]]] --><p>在面试中考察这部分知识的问题往往被称作“算法题”。其实广义上的算法指我们一切完成问题的步骤，而狭义的算法则是指算法课本上几种经典的算法如分治、贪心、动态规划等。面试中考察基本编程能力，其实题目出难了就是所谓的“算法题”，出简单了就是“写段代码看看”，并没有一个明确的分界线。</p><p>助理工程师的定义是“能够在辅助下完成工作”，因此不是所有公司都会招聘助理工程师的，因为严格来说，助理工程师不具备独立工作的能力，他的工作产出可能是负数。但是招聘助理工程师的公司，一般都是看重应聘人的潜力，期望能快速成长。</p><h2>工程师</h2><p><strong>接下来我们说说前端工程师，对标阿里P5级别。</strong>它的要求是掌握基本的前端技能，这样说也许有点模糊，但是换个说法就很明白了，基本前端技能就是“综合运用HTML、JavaScript、CSS完成任何界面和交互需求”。这个“任何界面和交互需求”，看似要求很高，但是如果你写过前端就知道，这是任何前端的基本技能——大不了用图片呗。</p><p>其实这个级别的工程师，水平跨度非常大，界面写出来了，但是兼容性如何、代码可维护性如何、离了框架能不能写出来、语义表现分离能做到吗、开发过程中能不能做到有效沟通…还会有很多问题。而这些问题，决定了一个前端工程师的潜力，一些好一点的公司招聘这个级别的工程师，除了“基本的前端技能”之外，还会对我上面提到的这些问题有所要求。</p><p>关于助理前端工程师和前端工程师，能力方面主要的要求是编程能力，知识方面的要求是一个“可用”的最小集合。</p><h2>资深工程师</h2><p><strong>我们接着往下讲，资深前端工程师，对标阿里P6级别。</strong>到了这个阶段，我们可以看到图上开始出现不同的区块了，这意味着，对资深前端工程师的要求，也是多元化的。</p><p>我们用一句话来概括，资深前端工程师，要求开始关注并且解决项目中的问题。什么样的问题呢？可能是别人做不出来的技术难题，也可能是容易出错的代码，或者说无意义的重复劳动，或者是业务上想不出来合适的交互…… 等等。</p><p>其实对资深前端工程师的要求是很自由的，我上面的图中给出的仅仅是几个例子，比如组件化可以解决重复劳动问题和开发耦合问题；工具可以解决的问题有很多，生成代码的工具提高效率，代码检查工具提高质量；性能优化则会带来业务价值，这些都是资深前端工程师可以做的事情，并且只要把其中一两项做好，就可以达到资深前端工程师的水平。</p><p>再有就是这个级别开始对架构能力和工程能力有所要求了，但还处于萌芽阶段，一些天赋好的同学可以凭感觉达到这个水平。</p><h2>技术专家</h2><p><strong>下面说说前端专家，对标阿里P7级别。</strong>到了这个级别，我们从图上可以看到，要求又不一样了，比如组件变成了组件体系，工具变成了工具链和持续集成体系，性能优化变成了性能体系。这些东西变得不仅仅是称呼，还有工作的内容，这个级别跟资深工程师的主要区别是，从解决单点问题变成系统性方法，从服务自己变成服务团队，从一次性发挥变成持续性输出。</p><p>比如，资深工程师可能做一些组件，然后在项目里面用，自己的代码可维护性提升了，复用也做得更好了。但是前端专家要考虑制定组件规范推广到团队，还要做培训，考虑组件如何开发、管理和下线。资深工程师做性能，把自己的页面优化好了就可以了，但是前端专家就需要考虑采集数据、做报表和监控、总结checklist、跟工具结合、定性能指标等等。</p><p>由于这个级别对架构能力、工程和软技能要求很高，所以算是比较难以跨越的。</p><h2>高级技术专家</h2><p><strong>最后来说高级前端专家，对标阿里的P8级别。</strong>我们从图上看，这个级别分开的发展方向又聚合到了一起。高级前端专家做事的关键是审时度势，需要在前面讲的前端专家所掌握的各个领域里，组合出一套适合自己所在团队的方案。比如做企业内部系统的前端团队，可能对性能要求就没那么高，但电商前端团队因为运营活动频繁，就需要很好的组件体系，这里很难有一定的规则，全靠人来把握。</p><p>到这个级别，对工程能力的要求就很高了，而且即使不带人的高级前端专家，也必定涉及一些管理能力。</p><h2>前端进阶的核心要素</h2><p>讲完了各个级别的前端技能模型，我们回到最开始的问题“<strong>一个前端工程师到底需要掌握哪些技能</strong>”。</p><p>要回答这个问题，你要先根据自己的情况对号入座。梳理出自己掌握的前端知识程度，定位出自己的级别。再根据更高层级所需的知识，有的放矢，循序渐进，不断精进、完善自己的前端知识水平。</p><p>我们现在学习的“重学前端”这门课程，最重要的作用首先是构建出一个完整的前端知识架构，让你可以把自己的前端能力梳理清晰，让你意识到自己“会什么，不会什么”。如果后面再遇见了拿不准的知识点，你也可以定位好属于哪部分的哪个知识点。</p><p>有同学会问：自己对照专栏的知识架构后，好多知识点都不会，比较模糊，感觉会影响岗位的晋升，很焦虑，怎么办？</p><p>不要急，我们可以看到，在前端的技能模型里，对“知识”是没有任何硬性要求的，具体到各个公司的不同岗位，可能会有一些特殊要求，但市场是巨大的，所以大家可以不必对学什么知识不学什么知识感到那么焦虑。</p><p><strong>现在大部分同学会更为注重前端岗位的晋升，我认为想要真正实现前端岗位的晋升，更多还是要看你的能力，尤其是在工作中非常重要的编程能力、架构能力和工程能力，这些都是前端工程师必备的“内功”。</strong></p><p>而且“前端知识”应该是一个垂直的模块，它不能直接帮助你进阶下一个更高的级别，但是它能提升你的潜力，使你未来能走得更远。</p><p>我现在也在从教育的视角，结合自己多年的前端一线经验，尝试一种更为直接有效的课程形式，帮助大家提升能力、实现进阶。去年，我和极客大学联合举办了第 0 期线下的「前端训练营」，得到了同学们很好的反馈，也恰恰验证了我的观点，<strong>“前端能力是可以培养的，这比单纯学习框架要重要得多”</strong>。</p><p>今年我和极客大学又重新设计了线上版的<strong>「前端进阶训练营」</strong> ，课程设计深度对标阿里 P6 技能模型，延用班主任、助教、作业、评分、毕业、研讨等多种学习形式和服务。针对不同基础的同学，课程增加了前端基础知识的讲解，以及<strong>组件化、工具链、发布与持续集成</strong>这三条大厂进阶的关键路径。</p><p>我依然会把重点放在前端工程师能力培养上，希望教你知识怎么学，并且通过线上刻意练习的方式，帮助你提高编程、架构和工程能力。</p><p>欢迎你来参加。</p><p><a href="https://u.geekbang.org/subject/fe/100044701?utm_source=time_app&amp;utm_medium=cxqdjiacan&amp;utm_term=timeappcxqdjiacan"><img src="https://static001.geekbang.org/resource/image/76/f3/7629623563c0aa06b5725215112308f3.png" alt=""></a></p>',
        article_title: "加餐 | 一个前端工程师到底需要掌握哪些技能？",
      },
      {
        title: "免费学习 | 手把手带你实现一个极简的 React 框架",
        herf: "https://time.geekbang.org/column/article/280589",
        id: "280589",
        content:
          '<p>你好，我是极客时间《重学前端》专栏的编辑。在我参与制作整个课程的过程中，总是会看到有用户问，为什么老师不讲讲Vue、React这样的框架？这可是热点知识。其实winter老师早就在直播里解释过，他认为好的前端工程师，没必要花太多时间在框架的使用上，转而应该研究下框架背后的设计思想。就像阿里前端技术委员会主席圆心老师在GMTC大会上分享的观点一样，“框架一定是基于某个理念解决了一个被大家诟病已久的问题”。</p><p><img src="https://static001.geekbang.org/resource/image/00/e8/00ac8743d0d0ca7f9c6f29fef96f33e8.png" alt="" title="框架和设计模式"></p><p>在你学完了《重学前端》专栏，建立了前端的知识体系后，我们希望能更进一步，带你消化理解专栏中的那些基础知识点。这一次，我们和winter老师一起研发了一个新的训练营（《重学前端》专栏用户的免费福利），希望用 7 天的时间，手把手带你实现一个极简的 React 框架：ToyReact。</p><p>当然，我们的思路还和之前一样，不讲用法，不讲那些框架既定的规则，转而希望能帮你用“造轮子”的方式进一步理解框架的实现原理。我们也知道，这个课程不简单，所以为了能够保证你学会、学懂，我们还额外增加了学习服务：</p><ol>\n<li>助教随时答疑：在学习过程中，遇到问题可以随时向助教提问；</li>\n<li>高效社群连接：配备专属班主任全程带班，打造高效学习社群，收获学习伙伴；</li>\n<li>实战作业练习：除了听课，还会有实战作业来检验自己的学习成果；</li>\n<li>配套源码解析：winter 老师会提供课程源码，供你学习参考。</li>\n</ol><!-- [[[read_end]]] --><p>整个的7天训练营，学完之后，你将会有如下收获：</p><ul>\n<li>了解一个 ToyReact 框架搭建的全过程</li>\n<li>掌握 React 框架背后的原理及实现方式</li>\n<li>掌握 React 中的组件化思想</li>\n<li>亲自实现一个 ToyReact 框架</li>\n</ul><p>具体的课程大纲如下：</p><p><img src="https://static001.geekbang.org/resource/image/8c/2f/8c9d367fb07d9d3cc29953d4cf761c2f.png" alt="" title="7天训练营大纲"></p><p>作为《重学前端》专栏的用户福利，如果你已经拿到了毕业证书，那<strong>以上所有的课程和学习服务对于你都是免费的，但需要你花时间</strong>（这一点很重要）。感兴趣的话，你可以直接添加班主任的微信申请这次公开课活动，添加后留下你的极客时间账号即可，我们会自动给你绑定课程。当然，如果你还没学完专栏，那还是先花点时间学专栏吧。</p><p><img src="https://static001.geekbang.org/resource/image/c1/9b/c1bd9197c552617e888afe6a1fe96b9b.png" alt="" title="\b班主任二维码"></p><p>也可以在<a href="https://jinshuju.net/f/RGtg1x">这里报名</a>，班主任会通过微信联系你。祝学习愉快。</p>',
        article_title: "免费学习 | 手把手带你实现一个极简的 React 框架",
      },
    ],
  },
  {
    chapterTitle: "尾声 (1讲)",
    children: [
      {
        title: "尾声 | 长风破浪会有时，直挂云帆济沧海",
        herf: "https://time.geekbang.org/column/article/97144",
        id: "97144",
        content:
          '<p>你好，我是winter。</p><p>感觉特别长的几个月，忽然间就结束了。对我而言，这是一段奇妙的旅程，对你来说，我希望也是。</p><p>去年9月我离开原来的公司，打定主意要做一些程序员教育的事情，10月份在QCon，我遇到了“极客时间”的编辑，收到邀请来做一个专栏，于是就有了“重学前端”。</p><p>最初我答应“极客时间”的时候，其实心里想的是：反正我要做程序员教育，做一个专栏就当整理自己的知识也好。</p><p>但是从一开始的磨合和存稿阶段，我就发现这个事情没有我想的那么简单，与以前零散地写博客相比，按时按体系去产出课程需要花费成倍的时间和精力。不断查阅资料，整理代码，“重学前端”这个专栏对我自己来说，也是一个自我重塑的过程。</p><p>在这个专栏即将结束的时刻，我想借“重学前端”这个课程谈谈我对教育的理解。</p><h2>教育是知识的展现形式</h2><p>现在有一个特别火爆的概念叫做知识付费，其实我不太喜欢这个说法。</p><p>“重学前端”所讲的知识点，没有一条是我发明或原创的知识，这么说的原因是：知识就在那里，每个人都可以获得它。</p><p>你可以在各种文档和标准中找到它们或者它们的变体。有一些工程领域相关的知识，来自我工作中的实践，有一些也算是首创，但是我不认为这些知识属于我，我只是发现了它们。</p><!-- [[[read_end]]] --><p>所以我认为，知识是免费的，承载它们的教育产品才是收费的。</p><p>在整个课程写作中，我致力于在知识之间建立关系。我不希望把我的课程变成抄写文档。我从排版追溯到活字印刷，我从渲染追溯到中国画的技法，还有面向对象的起源。在这个过程中，我自己也颇有收获。我期望这样的一种组织形式能够帮助你更好地理解和记忆知识。</p><p>我有时候会觉得，这个把“知识变成课程”的过程，特别像前端工程师把数据变成可见的页面的过程，所以，从某种意义上讲，我做的事情还是前端。</p><h2>教育的重点在于能力提升而不是知识积累</h2><p>不过，我也不希望“重学前端”这个课程仅仅是“更容易记忆的知识”。因为在我看来，知识量并非衡量一个工程师优秀与否的因素，能力才是。</p><p>我的一点小小的奢望是：“重学前端”这个课程，能给你带来一些建立知识体系的能力。</p><p>我在“重学前端”的课程中，穿插了大量的“用代码读标准”的实验。这个小系列，算是我的一种“独门武功”。</p><p>我刚开始关注前端的2007年左右，国内还少有程序员知道Web标准这件事，想要找到资料就更难了，我也经历了最初看标准如同天书的过程。</p><p>但是我发现，其实标准中佶屈聱牙、晦涩难懂的那些概念，有着内在的联系，又因为标准文本中用词非常严谨，所以尝试用代码去理解，反而是个快捷的路径，还能找出不少边边角角的冷知识。</p><p>通过类似这样的线索，我建立了自己最初的知识体系，我开始对前端的体系的全貌有了粗浅的认知，现在，我希望通过“重学前端”课程，让你也来体会一下这个过程。</p><h2>教育是一种服务，我们做得显然还不够好</h2><p>作为老师，我希望这个课程能够真正帮助到你们每一个人，但是其实我们可以看到，每一节课都有一些放弃的同学。</p><p>可能有人会说，对平台方和老师来说并无所谓呀，反正付过钱了。但是在我和“极客时间”看来，这正是我们做得不够好的地方。今天“重学前端”这个课程，可能以这样的产品形态呈现出来，凭学员的自觉性来完成学习，实属一种无奈。</p><p>不论对我，还是对“极客时间”而言，培养更多优秀的工程师，潜在的价格远远高于卖一些课程得到收入。</p><p>我认为，教育是一种服务，理想的教育产品卖的应该是服务的结果，而不是服务的过程。</p><p>在未来，我会跟极客邦一起，持续探索全新的教育形态。我们也已经上线第 1 期「前端进阶训练营」，如果你具备基本的前端技能，渴望通过自己的努力和我的指导，快速成长为一名资深前端工程师，欢迎你关注我在极客大学开设的「前端进阶训练营」。</p><p><strong>另外，虽然正稿已经结束，“重学前端”将来也不会变成一个“过去式”的专栏，我想把它变成一个“Ask me anything”的栏目，不论是后来购买的同学还是已经学完的同学，你们可以来这里的评论区与我交流，不限于课程内容，只要是技术和职业相关的问题，都可以来问我，我会回复或者更新答疑文章来为你解答。</strong></p><p>专栏的课程到此告一段落，但是对我而言，这是一个起点。长风破浪会有时，直挂云帆济沧海，希望未来能与你一起遇见更好的自己。</p><p><a href="https://jinshuju.net/f/AWd190"><img src="https://static001.geekbang.org/resource/image/e3/4d/e3c15e5e99a6c532b4e0027c5669b74d.jpg" alt=""></a></p>',
        article_title: "尾声 | 长风破浪会有时，直挂云帆济沧海",
      },
    ],
  },
];
